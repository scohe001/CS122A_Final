
122a_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001d96  00001e2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065f  0080016a  0080016a  00001e94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ec4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277b  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  000048f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e5  00000000  00000000  0000536d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  00006d54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cef  00000000  00000000  0000740c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a6  00000000  00000000  000080fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  000099a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__vector_13>
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c2       	rjmp	.+1196   	; 0x4fa <__vector_19>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e9       	ldi	r30, 0x96	; 150
      a0:	fd e1       	ldi	r31, 0x1D	; 29
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 36       	cpi	r26, 0x6A	; 106
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	aa e6       	ldi	r26, 0x6A	; 106
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3c       	cpi	r26, 0xC9	; 201
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	9a d6       	rcall	.+3380   	; 0xdf8 <main>
      c4:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 c8 09 	call	0x1390	; 0x1390 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	20 91 6a 01 	lds	r18, 0x016A
      d8:	30 91 6b 01 	lds	r19, 0x016B
      dc:	ce 01       	movw	r24, r28
      de:	82 0f       	add	r24, r18
      e0:	93 1f       	adc	r25, r19
      e2:	8c 3d       	cpi	r24, 0xDC	; 220
      e4:	45 e0       	ldi	r20, 0x05	; 5
      e6:	94 07       	cpc	r25, r20
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	e9 01       	movw	r28, r18
      f2:	c4 59       	subi	r28, 0x94	; 148
      f4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f6:	90 93 6b 01 	sts	0x016B, r25
      fa:	80 93 6a 01 	sts	0x016A, r24
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 92 0a 	call	0x1524	; 0x1524 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	ce 01       	movw	r24, r28
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     116:	08 95       	ret

00000118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     118:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11a:	03 96       	adiw	r24, 0x03	; 3
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	3f ef       	ldi	r19, 0xFF	; 255
     124:	34 83       	std	Z+4, r19	; 0x04
     126:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     128:	96 83       	std	Z+6, r25	; 0x06
     12a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12c:	90 87       	std	Z+8, r25	; 0x08
     12e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     134:	fc 01       	movw	r30, r24
     136:	11 86       	std	Z+9, r1	; 0x09
     138:	10 86       	std	Z+8, r1	; 0x08
     13a:	08 95       	ret

0000013c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fc 01       	movw	r30, r24
     142:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     144:	21 81       	ldd	r18, Z+1	; 0x01
     146:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     148:	e9 01       	movw	r28, r18
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	13 96       	adiw	r26, 0x03	; 3
     150:	9c 93       	st	X, r25
     152:	8e 93       	st	-X, r24
     154:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	92 81       	ldd	r25, Z+2	; 0x02
     15a:	15 96       	adiw	r26, 0x05	; 5
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	ec 01       	movw	r28, r24
     168:	7d 83       	std	Y+5, r23	; 0x05
     16a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16c:	e9 01       	movw	r28, r18
     16e:	7b 83       	std	Y+3, r23	; 0x03
     170:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     172:	72 83       	std	Z+2, r23	; 0x02
     174:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     176:	19 96       	adiw	r26, 0x09	; 9
     178:	fc 93       	st	X, r31
     17a:	ee 93       	st	-X, r30
     17c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17e:	80 81       	ld	r24, Z
     180:	8f 5f       	subi	r24, 0xFF	; 255
     182:	80 83       	st	Z, r24
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     190:	48 81       	ld	r20, Y
     192:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	52 07       	cpc	r21, r18
     19a:	31 f4       	brne	.+12     	; 0x1a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19c:	dc 01       	movw	r26, r24
     19e:	17 96       	adiw	r26, 0x07	; 7
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	18 97       	sbiw	r26, 0x08	; 8
     1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a8:	fc 01       	movw	r30, r24
     1aa:	33 96       	adiw	r30, 0x03	; 3
     1ac:	dc 01       	movw	r26, r24
     1ae:	15 96       	adiw	r26, 0x05	; 5
     1b0:	2d 91       	ld	r18, X+
     1b2:	3c 91       	ld	r19, X
     1b4:	16 97       	sbiw	r26, 0x06	; 6
     1b6:	d9 01       	movw	r26, r18
     1b8:	2d 91       	ld	r18, X+
     1ba:	3c 91       	ld	r19, X
     1bc:	42 17       	cp	r20, r18
     1be:	53 07       	cpc	r21, r19
     1c0:	50 f0       	brcs	.+20     	; 0x1d6 <vListInsert+0x4c>
     1c2:	02 80       	ldd	r0, Z+2	; 0x02
     1c4:	f3 81       	ldd	r31, Z+3	; 0x03
     1c6:	e0 2d       	mov	r30, r0
     1c8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ca:	b3 81       	ldd	r27, Z+3	; 0x03
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	b0 f7       	brcc	.-20     	; 0x1c2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d6:	a2 81       	ldd	r26, Z+2	; 0x02
     1d8:	b3 81       	ldd	r27, Z+3	; 0x03
     1da:	bb 83       	std	Y+3, r27	; 0x03
     1dc:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1de:	15 96       	adiw	r26, 0x05	; 5
     1e0:	dc 93       	st	X, r29
     1e2:	ce 93       	st	-X, r28
     1e4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e6:	fd 83       	std	Y+5, r31	; 0x05
     1e8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ea:	d3 83       	std	Z+3, r29	; 0x03
     1ec:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ee:	99 87       	std	Y+9, r25	; 0x09
     1f0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	20 83       	st	Z, r18
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     200:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     202:	a2 81       	ldd	r26, Z+2	; 0x02
     204:	b3 81       	ldd	r27, Z+3	; 0x03
     206:	84 81       	ldd	r24, Z+4	; 0x04
     208:	95 81       	ldd	r25, Z+5	; 0x05
     20a:	15 96       	adiw	r26, 0x05	; 5
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     212:	a4 81       	ldd	r26, Z+4	; 0x04
     214:	b5 81       	ldd	r27, Z+5	; 0x05
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	9c 93       	st	X, r25
     21e:	8e 93       	st	-X, r24
     220:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     222:	a0 85       	ldd	r26, Z+8	; 0x08
     224:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	8d 91       	ld	r24, X+
     22a:	9c 91       	ld	r25, X
     22c:	12 97       	sbiw	r26, 0x02	; 2
     22e:	8e 17       	cp	r24, r30
     230:	9f 07       	cpc	r25, r31
     232:	31 f4       	brne	.+12     	; 0x240 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     240:	11 86       	std	Z+9, r1	; 0x09
     242:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     244:	8c 91       	ld	r24, X
     246:	81 50       	subi	r24, 0x01	; 1
     248:	8c 93       	st	X, r24
     24a:	08 95       	ret

0000024c <joystickInit>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     24c:	ea e7       	ldi	r30, 0x7A	; 122
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	80 6c       	ori	r24, 0xC0	; 192
     254:	80 83       	st	Z, r24
     256:	10 92 bd 07 	sts	0x07BD, r1
     25a:	10 92 bc 07 	sts	0x07BC, r1
     25e:	10 92 b8 07 	sts	0x07B8, r1
     262:	10 92 b7 07 	sts	0x07B7, r1
     266:	08 95       	ret

00000268 <joystickSample>:
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	61 97       	sbiw	r28, 0x11	; 17
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	ea e7       	ldi	r30, 0x7A	; 122
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	80 83       	st	Z, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	86 fd       	sbrc	r24, 6
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <joystickSample+0x3e>
     2ac:	80 91 78 00 	lds	r24, 0x0078
     2b0:	90 91 79 00 	lds	r25, 0x0079
     2b4:	90 93 bd 07 	sts	0x07BD, r25
     2b8:	80 93 bc 07 	sts	0x07BC, r24
     2bc:	ec e7       	ldi	r30, 0x7C	; 124
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
     2c6:	ea e7       	ldi	r30, 0x7A	; 122
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	80 83       	st	Z, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	86 fd       	sbrc	r24, 6
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <joystickSample+0x68>
     2d6:	80 91 78 00 	lds	r24, 0x0078
     2da:	90 91 79 00 	lds	r25, 0x0079
     2de:	90 93 b8 07 	sts	0x07B8, r25
     2e2:	80 93 b7 07 	sts	0x07B7, r24
     2e6:	ec e7       	ldi	r30, 0x7C	; 124
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	80 83       	st	Z, r24
     2f0:	40 90 bc 07 	lds	r4, 0x07BC
     2f4:	50 90 bd 07 	lds	r5, 0x07BD
     2f8:	20 ef       	ldi	r18, 0xF0	; 240
     2fa:	42 1a       	sub	r4, r18
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	52 0a       	sbc	r5, r18
     300:	50 92 bd 07 	sts	0x07BD, r5
     304:	40 92 bc 07 	sts	0x07BC, r4
     308:	60 90 b7 07 	lds	r6, 0x07B7
     30c:	70 90 b8 07 	lds	r7, 0x07B8
     310:	3c e0       	ldi	r19, 0x0C	; 12
     312:	63 1a       	sub	r6, r19
     314:	32 e0       	ldi	r19, 0x02	; 2
     316:	73 0a       	sbc	r7, r19
     318:	70 92 b8 07 	sts	0x07B8, r7
     31c:	60 92 b7 07 	sts	0x07B7, r6
     320:	95 2d       	mov	r25, r5
     322:	99 0f       	add	r25, r25
     324:	99 0b       	sbc	r25, r25
     326:	97 2c       	mov	r9, r7
     328:	99 0c       	add	r9, r9
     32a:	99 08       	sbc	r9, r9
     32c:	a4 2c       	mov	r10, r4
     32e:	b5 2c       	mov	r11, r5
     330:	c9 2e       	mov	r12, r25
     332:	d9 2e       	mov	r13, r25
     334:	e9 2e       	mov	r14, r25
     336:	f9 2e       	mov	r15, r25
     338:	09 2f       	mov	r16, r25
     33a:	19 2f       	mov	r17, r25
     33c:	24 2d       	mov	r18, r4
     33e:	35 2d       	mov	r19, r5
     340:	49 2f       	mov	r20, r25
     342:	59 2f       	mov	r21, r25
     344:	69 2f       	mov	r22, r25
     346:	79 2f       	mov	r23, r25
     348:	89 2f       	mov	r24, r25
     34a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__muldi3>
     34e:	22 2e       	mov	r2, r18
     350:	33 2e       	mov	r3, r19
     352:	84 2e       	mov	r8, r20
     354:	5d 87       	std	Y+13, r21	; 0x0d
     356:	6e 87       	std	Y+14, r22	; 0x0e
     358:	7f 87       	std	Y+15, r23	; 0x0f
     35a:	88 8b       	std	Y+16, r24	; 0x10
     35c:	99 8b       	std	Y+17, r25	; 0x11
     35e:	a6 2c       	mov	r10, r6
     360:	b7 2c       	mov	r11, r7
     362:	c9 2c       	mov	r12, r9
     364:	d9 2c       	mov	r13, r9
     366:	e9 2c       	mov	r14, r9
     368:	f9 2c       	mov	r15, r9
     36a:	09 2d       	mov	r16, r9
     36c:	19 2d       	mov	r17, r9
     36e:	26 2d       	mov	r18, r6
     370:	37 2d       	mov	r19, r7
     372:	49 2d       	mov	r20, r9
     374:	59 2d       	mov	r21, r9
     376:	69 2d       	mov	r22, r9
     378:	79 2d       	mov	r23, r9
     37a:	89 2d       	mov	r24, r9
     37c:	99 2d       	mov	r25, r9
     37e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <__muldi3>
     382:	a2 2e       	mov	r10, r18
     384:	b3 2e       	mov	r11, r19
     386:	c4 2e       	mov	r12, r20
     388:	d5 2e       	mov	r13, r21
     38a:	e6 2e       	mov	r14, r22
     38c:	f7 2e       	mov	r15, r23
     38e:	08 2f       	mov	r16, r24
     390:	19 2f       	mov	r17, r25
     392:	22 2d       	mov	r18, r2
     394:	33 2d       	mov	r19, r3
     396:	48 2d       	mov	r20, r8
     398:	5d 85       	ldd	r21, Y+13	; 0x0d
     39a:	6e 85       	ldd	r22, Y+14	; 0x0e
     39c:	7f 85       	ldd	r23, Y+15	; 0x0f
     39e:	88 89       	ldd	r24, Y+16	; 0x10
     3a0:	99 89       	ldd	r25, Y+17	; 0x11
     3a2:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__adddi3>
     3a6:	2f 3f       	cpi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	41 05       	cpc	r20, r1
     3ac:	51 05       	cpc	r21, r1
     3ae:	61 05       	cpc	r22, r1
     3b0:	71 05       	cpc	r23, r1
     3b2:	81 05       	cpc	r24, r1
     3b4:	91 05       	cpc	r25, r1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <joystickSample+0x152>
     3b8:	1c f4       	brge	.+6      	; 0x3c0 <joystickSample+0x158>
     3ba:	10 92 c2 07 	sts	0x07C2, r1
     3be:	35 c0       	rjmp	.+106    	; 0x42a <joystickSample+0x1c2>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	8a 83       	std	Y+2, r24	; 0x02
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	8b 83       	std	Y+3, r24	; 0x03
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	8c 83       	std	Y+4, r24	; 0x04
     3d0:	5e 82       	std	Y+6, r5	; 0x06
     3d2:	4d 82       	std	Y+5, r4	; 0x05
     3d4:	51 94       	neg	r5
     3d6:	41 94       	neg	r4
     3d8:	51 08       	sbc	r5, r1
     3da:	58 86       	std	Y+8, r5	; 0x08
     3dc:	4f 82       	std	Y+7, r4	; 0x07
     3de:	7a 86       	std	Y+10, r7	; 0x0a
     3e0:	69 86       	std	Y+9, r6	; 0x09
     3e2:	71 94       	neg	r7
     3e4:	61 94       	neg	r6
     3e6:	71 08       	sbc	r7, r1
     3e8:	7c 86       	std	Y+12, r7	; 0x0c
     3ea:	6b 86       	std	Y+11, r6	; 0x0b
     3ec:	de 01       	movw	r26, r28
     3ee:	17 96       	adiw	r26, 0x07	; 7
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	4d 91       	ld	r20, X+
     3f6:	5d 91       	ld	r21, X+
     3f8:	e9 2f       	mov	r30, r25
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	2c 0f       	add	r18, r28
     406:	3d 1f       	adc	r19, r29
     408:	e2 0f       	add	r30, r18
     40a:	f3 1f       	adc	r31, r19
     40c:	24 81       	ldd	r18, Z+4	; 0x04
     40e:	35 81       	ldd	r19, Z+5	; 0x05
     410:	24 17       	cp	r18, r20
     412:	35 07       	cpc	r19, r21
     414:	0c f4       	brge	.+2      	; 0x418 <joystickSample+0x1b0>
     416:	98 2f       	mov	r25, r24
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	59 f7       	brne	.-42     	; 0x3f4 <joystickSample+0x18c>
     41e:	fe 01       	movw	r30, r28
     420:	e9 0f       	add	r30, r25
     422:	f1 1d       	adc	r31, r1
     424:	81 81       	ldd	r24, Z+1	; 0x01
     426:	80 93 c2 07 	sts	0x07C2, r24
     42a:	61 96       	adiw	r28, 0x11	; 17
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	7f 90       	pop	r7
     450:	6f 90       	pop	r6
     452:	5f 90       	pop	r5
     454:	4f 90       	pop	r4
     456:	3f 90       	pop	r3
     458:	2f 90       	pop	r2
     45a:	08 95       	ret

0000045c <QueueInit>:
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	18 2f       	mov	r17, r24
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <malloc>
     46c:	ec 01       	movw	r28, r24
     46e:	81 2f       	mov	r24, r17
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <malloc>
     476:	99 83       	std	Y+1, r25	; 0x01
     478:	88 83       	st	Y, r24
     47a:	1a 82       	std	Y+2, r1	; 0x02
     47c:	1b 82       	std	Y+3, r1	; 0x03
     47e:	1c 82       	std	Y+4, r1	; 0x04
     480:	1d 83       	std	Y+5, r17	; 0x05
     482:	ce 01       	movw	r24, r28
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	08 95       	ret

0000048c <QueueEnqueue>:
     48c:	fc 01       	movw	r30, r24
     48e:	94 81       	ldd	r25, Z+4	; 0x04
     490:	85 81       	ldd	r24, Z+5	; 0x05
     492:	98 17       	cp	r25, r24
     494:	88 f4       	brcc	.+34     	; 0x4b8 <QueueEnqueue+0x2c>
     496:	83 81       	ldd	r24, Z+3	; 0x03
     498:	a0 81       	ld	r26, Z
     49a:	b1 81       	ldd	r27, Z+1	; 0x01
     49c:	a8 0f       	add	r26, r24
     49e:	b1 1d       	adc	r27, r1
     4a0:	6c 93       	st	X, r22
     4a2:	83 81       	ldd	r24, Z+3	; 0x03
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	65 81       	ldd	r22, Z+5	; 0x05
     4a8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodqi4>
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	84 81       	ldd	r24, Z+4	; 0x04
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	84 83       	std	Z+4, r24	; 0x04
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	08 95       	ret

000004bc <QueueDequeue>:
     4bc:	fc 01       	movw	r30, r24
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	88 23       	and	r24, r24
     4c2:	89 f0       	breq	.+34     	; 0x4e6 <QueueDequeue+0x2a>
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	a0 81       	ld	r26, Z
     4c8:	b1 81       	ldd	r27, Z+1	; 0x01
     4ca:	a8 0f       	add	r26, r24
     4cc:	b1 1d       	adc	r27, r1
     4ce:	2c 91       	ld	r18, X
     4d0:	1c 92       	st	X, r1
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	65 81       	ldd	r22, Z+5	; 0x05
     4d8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__udivmodqi4>
     4dc:	92 83       	std	Z+2, r25	; 0x02
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	81 50       	subi	r24, 0x01	; 1
     4e2:	84 83       	std	Z+4, r24	; 0x04
     4e4:	82 2f       	mov	r24, r18
     4e6:	08 95       	ret

000004e8 <SPI_ServantInit>:
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	84 b9       	out	0x04, r24	; 4
     4ec:	8c b5       	in	r24, 0x2c	; 44
     4ee:	80 6c       	ori	r24, 0xC0	; 192
     4f0:	8c bd       	out	0x2c, r24	; 44
     4f2:	8f b7       	in	r24, 0x3f	; 63
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8f bf       	out	0x3f, r24	; 63
     4f8:	08 95       	ret

000004fa <__vector_19>:
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	8f 93       	push	r24
     506:	8e b5       	in	r24, 0x2e	; 46
     508:	80 93 37 01 	sts	0x0137, r24
     50c:	8f 91       	pop	r24
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <transmit_data>:
     518:	43 9a       	sbi	0x08, 3	; 8
     51a:	41 98       	cbi	0x08, 1	; 8
     51c:	38 e0       	ldi	r19, 0x08	; 8
     51e:	43 9a       	sbi	0x08, 3	; 8
     520:	42 98       	cbi	0x08, 2	; 8
     522:	98 b1       	in	r25, 0x08	; 8
     524:	88 23       	and	r24, r24
     526:	14 f4       	brge	.+4      	; 0x52c <transmit_data+0x14>
     528:	91 60       	ori	r25, 0x01	; 1
     52a:	01 c0       	rjmp	.+2      	; 0x52e <transmit_data+0x16>
     52c:	9e 7f       	andi	r25, 0xFE	; 254
     52e:	98 b9       	out	0x08, r25	; 8
     530:	98 b1       	in	r25, 0x08	; 8
     532:	66 23       	and	r22, r22
     534:	14 f4       	brge	.+4      	; 0x53a <transmit_data+0x22>
     536:	90 61       	ori	r25, 0x10	; 16
     538:	01 c0       	rjmp	.+2      	; 0x53c <transmit_data+0x24>
     53a:	9f 7e       	andi	r25, 0xEF	; 239
     53c:	98 b9       	out	0x08, r25	; 8
     53e:	98 b1       	in	r25, 0x08	; 8
     540:	44 23       	and	r20, r20
     542:	14 f4       	brge	.+4      	; 0x548 <transmit_data+0x30>
     544:	90 62       	ori	r25, 0x20	; 32
     546:	01 c0       	rjmp	.+2      	; 0x54a <transmit_data+0x32>
     548:	9f 7d       	andi	r25, 0xDF	; 223
     54a:	98 b9       	out	0x08, r25	; 8
     54c:	98 b1       	in	r25, 0x08	; 8
     54e:	22 23       	and	r18, r18
     550:	14 f4       	brge	.+4      	; 0x556 <transmit_data+0x3e>
     552:	90 64       	ori	r25, 0x40	; 64
     554:	01 c0       	rjmp	.+2      	; 0x558 <transmit_data+0x40>
     556:	9f 7b       	andi	r25, 0xBF	; 191
     558:	98 b9       	out	0x08, r25	; 8
     55a:	88 0f       	add	r24, r24
     55c:	66 0f       	add	r22, r22
     55e:	44 0f       	add	r20, r20
     560:	22 0f       	add	r18, r18
     562:	42 9a       	sbi	0x08, 2	; 8
     564:	31 50       	subi	r19, 0x01	; 1
     566:	d9 f6       	brne	.-74     	; 0x51e <transmit_data+0x6>
     568:	41 9a       	sbi	0x08, 1	; 8
     56a:	08 95       	ret

0000056c <Shift_Tick>:
     56c:	80 91 be 07 	lds	r24, 0x07BE
     570:	81 11       	cpse	r24, r1
     572:	05 c0       	rjmp	.+10     	; 0x57e <Shift_Tick+0x12>
     574:	20 91 5a 07 	lds	r18, 0x075A
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	cd df       	rcall	.-102    	; 0x518 <transmit_data>
     57e:	80 91 be 07 	lds	r24, 0x07BE
     582:	81 11       	cpse	r24, r1
     584:	10 92 be 07 	sts	0x07BE, r1
     588:	08 95       	ret

0000058a <Shift_Task>:
     58a:	10 92 be 07 	sts	0x07BE, r1
     58e:	ee df       	rcall	.-36     	; 0x56c <Shift_Tick>
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	0e 94 16 0b 	call	0x162c	; 0x162c <vTaskDelay>
     598:	fa cf       	rjmp	.-12     	; 0x58e <Shift_Task+0x4>

0000059a <Motor_Tick>:
     59a:	2f 92       	push	r2
     59c:	3f 92       	push	r3
     59e:	4f 92       	push	r4
     5a0:	5f 92       	push	r5
     5a2:	6f 92       	push	r6
     5a4:	7f 92       	push	r7
     5a6:	8f 92       	push	r8
     5a8:	9f 92       	push	r9
     5aa:	af 92       	push	r10
     5ac:	bf 92       	push	r11
     5ae:	cf 92       	push	r12
     5b0:	df 92       	push	r13
     5b2:	ef 92       	push	r14
     5b4:	ff 92       	push	r15
     5b6:	0f 93       	push	r16
     5b8:	1f 93       	push	r17
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	2a 97       	sbiw	r28, 0x0a	; 10
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	80 91 bb 07 	lds	r24, 0x07BB
     5d2:	88 23       	and	r24, r24
     5d4:	19 f0       	breq	.+6      	; 0x5dc <Motor_Tick+0x42>
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	19 f0       	breq	.+6      	; 0x5e0 <Motor_Tick+0x46>
     5da:	05 c1       	rjmp	.+522    	; 0x7e6 <Motor_Tick+0x24c>
     5dc:	15 b8       	out	0x05, r1	; 5
     5de:	03 c1       	rjmp	.+518    	; 0x7e6 <Motor_Tick+0x24c>
     5e0:	0f 2e       	mov	r0, r31
     5e2:	fa e4       	ldi	r31, 0x4A	; 74
     5e4:	ef 2e       	mov	r14, r31
     5e6:	f7 e0       	ldi	r31, 0x07	; 7
     5e8:	ff 2e       	mov	r15, r31
     5ea:	f0 2d       	mov	r31, r0
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f2 e5       	ldi	r31, 0x52	; 82
     5f0:	8f 2e       	mov	r8, r31
     5f2:	f7 e0       	ldi	r31, 0x07	; 7
     5f4:	9f 2e       	mov	r9, r31
     5f6:	f0 2d       	mov	r31, r0
     5f8:	0f 2e       	mov	r0, r31
     5fa:	ff e2       	ldi	r31, 0x2F	; 47
     5fc:	2f 2e       	mov	r2, r31
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	3f 2e       	mov	r3, r31
     602:	f0 2d       	mov	r31, r0
     604:	81 e3       	ldi	r24, 0x31	; 49
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	9a 83       	std	Y+2, r25	; 0x02
     60a:	89 83       	std	Y+1, r24	; 0x01
     60c:	03 e3       	ldi	r16, 0x33	; 51
     60e:	11 e0       	ldi	r17, 0x01	; 1
     610:	a7 e2       	ldi	r26, 0x27	; 39
     612:	b1 e0       	ldi	r27, 0x01	; 1
     614:	bc 83       	std	Y+4, r27	; 0x04
     616:	ab 83       	std	Y+3, r26	; 0x03
     618:	aa 24       	eor	r10, r10
     61a:	a3 94       	inc	r10
     61c:	b1 2c       	mov	r11, r1
     61e:	fa 86       	std	Y+10, r15	; 0x0a
     620:	e9 86       	std	Y+9, r14	; 0x09
     622:	98 86       	std	Y+8, r9	; 0x08
     624:	8f 82       	std	Y+7, r8	; 0x07
     626:	f4 01       	movw	r30, r8
     628:	60 81       	ld	r22, Z
     62a:	71 81       	ldd	r23, Z+1	; 0x01
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	44 e3       	ldi	r20, 0x34	; 52
     636:	54 e4       	ldi	r21, 0x44	; 68
     638:	0e 94 47 0c 	call	0x188e	; 0x188e <fmod>
     63c:	2b 01       	movw	r4, r22
     63e:	3c 01       	movw	r6, r24
     640:	d4 01       	movw	r26, r8
     642:	6d 93       	st	X+, r22
     644:	7d 93       	st	X+, r23
     646:	8d 93       	st	X+, r24
     648:	9c 93       	st	X, r25
     64a:	13 97       	sbiw	r26, 0x03	; 3
     64c:	e9 84       	ldd	r14, Y+9	; 0x09
     64e:	fa 84       	ldd	r15, Y+10	; 0x0a
     650:	fe 82       	std	Y+6, r15	; 0x06
     652:	ed 82       	std	Y+5, r14	; 0x05
     654:	d7 01       	movw	r26, r14
     656:	6d 91       	ld	r22, X+
     658:	7d 91       	ld	r23, X+
     65a:	8d 91       	ld	r24, X+
     65c:	9c 91       	ld	r25, X
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	44 e3       	ldi	r20, 0x34	; 52
     664:	54 e4       	ldi	r21, 0x44	; 68
     666:	0e 94 47 0c 	call	0x188e	; 0x188e <fmod>
     66a:	6b 01       	movw	r12, r22
     66c:	7c 01       	movw	r14, r24
     66e:	e9 85       	ldd	r30, Y+9	; 0x09
     670:	fa 85       	ldd	r31, Y+10	; 0x0a
     672:	60 83       	st	Z, r22
     674:	71 83       	std	Z+1, r23	; 0x01
     676:	82 83       	std	Z+2, r24	; 0x02
     678:	93 83       	std	Z+3, r25	; 0x03
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	a9 01       	movw	r20, r18
     680:	c3 01       	movw	r24, r6
     682:	b2 01       	movw	r22, r4
     684:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__cmpsf2>
     688:	88 23       	and	r24, r24
     68a:	74 f4       	brge	.+28     	; 0x6a8 <Motor_Tick+0x10e>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	44 e3       	ldi	r20, 0x34	; 52
     692:	54 e4       	ldi	r21, 0x44	; 68
     694:	c3 01       	movw	r24, r6
     696:	b2 01       	movw	r22, r4
     698:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__addsf3>
     69c:	d4 01       	movw	r26, r8
     69e:	6d 93       	st	X+, r22
     6a0:	7d 93       	st	X+, r23
     6a2:	8d 93       	st	X+, r24
     6a4:	9c 93       	st	X, r25
     6a6:	13 97       	sbiw	r26, 0x03	; 3
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	a9 01       	movw	r20, r18
     6ae:	c7 01       	movw	r24, r14
     6b0:	b6 01       	movw	r22, r12
     6b2:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__cmpsf2>
     6b6:	88 23       	and	r24, r24
     6b8:	0c f0       	brlt	.+2      	; 0x6bc <Motor_Tick+0x122>
     6ba:	9d c0       	rjmp	.+314    	; 0x7f6 <Motor_Tick+0x25c>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	44 e3       	ldi	r20, 0x34	; 52
     6c2:	54 e4       	ldi	r21, 0x44	; 68
     6c4:	c7 01       	movw	r24, r14
     6c6:	b6 01       	movw	r22, r12
     6c8:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__addsf3>
     6cc:	ed 81       	ldd	r30, Y+5	; 0x05
     6ce:	fe 81       	ldd	r31, Y+6	; 0x06
     6d0:	60 83       	st	Z, r22
     6d2:	71 83       	std	Z+1, r23	; 0x01
     6d4:	82 83       	std	Z+2, r24	; 0x02
     6d6:	93 83       	std	Z+3, r25	; 0x03
     6d8:	8e c0       	rjmp	.+284    	; 0x7f6 <Motor_Tick+0x25c>
     6da:	27 2f       	mov	r18, r23
     6dc:	37 2d       	mov	r19, r7
     6de:	d1 01       	movw	r26, r2
     6e0:	dc 90       	ld	r13, X
     6e2:	dc 01       	movw	r26, r24
     6e4:	64 e0       	ldi	r22, 0x04	; 4
     6e6:	d6 9e       	mul	r13, r22
     6e8:	a0 0d       	add	r26, r0
     6ea:	b1 1d       	adc	r27, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	a9 5f       	subi	r26, 0xF9	; 249
     6f0:	be 4f       	sbci	r27, 0xFE	; 254
     6f2:	ac 91       	ld	r26, X
     6f4:	aa 23       	and	r26, r26
     6f6:	79 f0       	breq	.+30     	; 0x716 <Motor_Tick+0x17c>
     6f8:	d8 01       	movw	r26, r16
     6fa:	ed 90       	ld	r14, X+
     6fc:	fc 90       	ld	r15, X
     6fe:	65 01       	movw	r12, r10
     700:	00 80       	ld	r0, Z
     702:	02 c0       	rjmp	.+4      	; 0x708 <Motor_Tick+0x16e>
     704:	cc 0c       	add	r12, r12
     706:	dd 1c       	adc	r13, r13
     708:	0a 94       	dec	r0
     70a:	e2 f7       	brpl	.-8      	; 0x704 <Motor_Tick+0x16a>
     70c:	d7 01       	movw	r26, r14
     70e:	6c 91       	ld	r22, X
     710:	c6 2a       	or	r12, r22
     712:	cc 92       	st	X, r12
     714:	10 c0       	rjmp	.+32     	; 0x736 <Motor_Tick+0x19c>
     716:	d8 01       	movw	r26, r16
     718:	ed 90       	ld	r14, X+
     71a:	fc 90       	ld	r15, X
     71c:	d5 01       	movw	r26, r10
     71e:	00 80       	ld	r0, Z
     720:	02 c0       	rjmp	.+4      	; 0x726 <Motor_Tick+0x18c>
     722:	aa 0f       	add	r26, r26
     724:	bb 1f       	adc	r27, r27
     726:	0a 94       	dec	r0
     728:	e2 f7       	brpl	.-8      	; 0x722 <Motor_Tick+0x188>
     72a:	6a 2f       	mov	r22, r26
     72c:	60 95       	com	r22
     72e:	d7 01       	movw	r26, r14
     730:	dc 90       	ld	r13, X
     732:	6d 21       	and	r22, r13
     734:	6c 93       	st	X, r22
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	31 96       	adiw	r30, 0x01	; 1
     73a:	84 30       	cpi	r24, 0x04	; 4
     73c:	91 05       	cpc	r25, r1
     73e:	69 f6       	brne	.-102    	; 0x6da <Motor_Tick+0x140>
     740:	5a 87       	std	Y+10, r21	; 0x0a
     742:	49 87       	std	Y+9, r20	; 0x09
     744:	f9 01       	movw	r30, r18
     746:	a9 81       	ldd	r26, Y+1	; 0x01
     748:	ba 81       	ldd	r27, Y+2	; 0x02
     74a:	8c 91       	ld	r24, X
     74c:	88 23       	and	r24, r24
     74e:	09 f4       	brne	.+2      	; 0x752 <Motor_Tick+0x1b8>
     750:	6f c0       	rjmp	.+222    	; 0x830 <Motor_Tick+0x296>
     752:	80 81       	ld	r24, Z
     754:	8f 5f       	subi	r24, 0xFF	; 255
     756:	88 30       	cpi	r24, 0x08	; 8
     758:	10 f4       	brcc	.+4      	; 0x75e <Motor_Tick+0x1c4>
     75a:	80 83       	st	Z, r24
     75c:	2a c0       	rjmp	.+84     	; 0x7b2 <Motor_Tick+0x218>
     75e:	10 82       	st	Z, r1
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	44 e3       	ldi	r20, 0x34	; 52
     766:	5f e3       	ldi	r21, 0x3F	; 63
     768:	ed 81       	ldd	r30, Y+5	; 0x05
     76a:	fe 81       	ldd	r31, Y+6	; 0x06
     76c:	60 81       	ld	r22, Z
     76e:	71 81       	ldd	r23, Z+1	; 0x01
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	93 81       	ldd	r25, Z+3	; 0x03
     774:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <__addsf3>
     778:	ad 81       	ldd	r26, Y+5	; 0x05
     77a:	be 81       	ldd	r27, Y+6	; 0x06
     77c:	6d 93       	st	X+, r22
     77e:	7d 93       	st	X+, r23
     780:	8d 93       	st	X+, r24
     782:	9c 93       	st	X, r25
     784:	13 97       	sbiw	r26, 0x03	; 3
     786:	15 c0       	rjmp	.+42     	; 0x7b2 <Motor_Tick+0x218>
     788:	b7 e0       	ldi	r27, 0x07	; 7
     78a:	b0 83       	st	Z, r27
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	44 e3       	ldi	r20, 0x34	; 52
     792:	5f e3       	ldi	r21, 0x3F	; 63
     794:	ed 81       	ldd	r30, Y+5	; 0x05
     796:	fe 81       	ldd	r31, Y+6	; 0x06
     798:	60 81       	ld	r22, Z
     79a:	71 81       	ldd	r23, Z+1	; 0x01
     79c:	82 81       	ldd	r24, Z+2	; 0x02
     79e:	93 81       	ldd	r25, Z+3	; 0x03
     7a0:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <__subsf3>
     7a4:	ad 81       	ldd	r26, Y+5	; 0x05
     7a6:	be 81       	ldd	r27, Y+6	; 0x06
     7a8:	6d 93       	st	X+, r22
     7aa:	7d 93       	st	X+, r23
     7ac:	8d 93       	st	X+, r24
     7ae:	9c 93       	st	X, r25
     7b0:	13 97       	sbiw	r26, 0x03	; 3
     7b2:	e9 85       	ldd	r30, Y+9	; 0x09
     7b4:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b6:	34 96       	adiw	r30, 0x04	; 4
     7b8:	fa 87       	std	Y+10, r31	; 0x0a
     7ba:	e9 87       	std	Y+9, r30	; 0x09
     7bc:	ff ef       	ldi	r31, 0xFF	; 255
     7be:	2f 1a       	sub	r2, r31
     7c0:	3f 0a       	sbc	r3, r31
     7c2:	89 81       	ldd	r24, Y+1	; 0x01
     7c4:	9a 81       	ldd	r25, Y+2	; 0x02
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	0e 5f       	subi	r16, 0xFE	; 254
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	ab 81       	ldd	r26, Y+3	; 0x03
     7d2:	bc 81       	ldd	r27, Y+4	; 0x04
     7d4:	14 96       	adiw	r26, 0x04	; 4
     7d6:	bc 83       	std	Y+4, r27	; 0x04
     7d8:	ab 83       	std	Y+3, r26	; 0x03
     7da:	e9 85       	ldd	r30, Y+9	; 0x09
     7dc:	fa 85       	ldd	r31, Y+10	; 0x0a
     7de:	e2 55       	subi	r30, 0x52	; 82
     7e0:	f7 40       	sbci	r31, 0x07	; 7
     7e2:	09 f0       	breq	.+2      	; 0x7e6 <Motor_Tick+0x24c>
     7e4:	1e cf       	rjmp	.-452    	; 0x622 <Motor_Tick+0x88>
     7e6:	80 91 bb 07 	lds	r24, 0x07BB
     7ea:	81 11       	cpse	r24, r1
     7ec:	28 c0       	rjmp	.+80     	; 0x83e <Motor_Tick+0x2a4>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 bb 07 	sts	0x07BB, r24
     7f4:	24 c0       	rjmp	.+72     	; 0x83e <Motor_Tick+0x2a4>
     7f6:	64 e0       	ldi	r22, 0x04	; 4
     7f8:	86 0e       	add	r8, r22
     7fa:	91 1c       	adc	r9, r1
     7fc:	ad 81       	ldd	r26, Y+5	; 0x05
     7fe:	be 81       	ldd	r27, Y+6	; 0x06
     800:	2d 91       	ld	r18, X+
     802:	3d 91       	ld	r19, X+
     804:	4d 91       	ld	r20, X+
     806:	5c 91       	ld	r21, X
     808:	ef 81       	ldd	r30, Y+7	; 0x07
     80a:	f8 85       	ldd	r31, Y+8	; 0x08
     80c:	60 81       	ld	r22, Z
     80e:	71 81       	ldd	r23, Z+1	; 0x01
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	0e 94 3c 0c 	call	0x1878	; 0x1878 <__cmpsf2>
     818:	88 23       	and	r24, r24
     81a:	59 f2       	breq	.-106    	; 0x7b2 <Motor_Tick+0x218>
     81c:	4b 81       	ldd	r20, Y+3	; 0x03
     81e:	5c 81       	ldd	r21, Y+4	; 0x04
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	72 2d       	mov	r23, r2
     826:	fa 01       	movw	r30, r20
     828:	49 85       	ldd	r20, Y+9	; 0x09
     82a:	5a 85       	ldd	r21, Y+10	; 0x0a
     82c:	73 2c       	mov	r7, r3
     82e:	55 cf       	rjmp	.-342    	; 0x6da <Motor_Tick+0x140>
     830:	80 81       	ld	r24, Z
     832:	88 23       	and	r24, r24
     834:	09 f4       	brne	.+2      	; 0x838 <Motor_Tick+0x29e>
     836:	a8 cf       	rjmp	.-176    	; 0x788 <Motor_Tick+0x1ee>
     838:	81 50       	subi	r24, 0x01	; 1
     83a:	80 83       	st	Z, r24
     83c:	ba cf       	rjmp	.-140    	; 0x7b2 <Motor_Tick+0x218>
     83e:	2a 96       	adiw	r28, 0x0a	; 10
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	7f 90       	pop	r7
     864:	6f 90       	pop	r6
     866:	5f 90       	pop	r5
     868:	4f 90       	pop	r4
     86a:	3f 90       	pop	r3
     86c:	2f 90       	pop	r2
     86e:	08 95       	ret

00000870 <Motor_Task>:
     870:	10 92 bb 07 	sts	0x07BB, r1
     874:	92 de       	rcall	.-732    	; 0x59a <Motor_Tick>
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	d8 d6       	rcall	.+3504   	; 0x162c <vTaskDelay>
     87c:	fb cf       	rjmp	.-10     	; 0x874 <Motor_Task+0x4>

0000087e <Move_Tick>:
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	80 91 c1 07 	lds	r24, 0x07C1
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	19 f0       	breq	.+6      	; 0x890 <Move_Tick+0x12>
     88a:	83 30       	cpi	r24, 0x03	; 3
     88c:	79 f0       	breq	.+30     	; 0x8ac <Move_Tick+0x2e>
     88e:	1a c0       	rjmp	.+52     	; 0x8c4 <Move_Tick+0x46>
     890:	28 b1       	in	r18, 0x08	; 8
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	00 90 06 01 	lds	r0, 0x0106
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <Move_Tick+0x22>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <Move_Tick+0x1e>
     8a4:	80 95       	com	r24
     8a6:	82 23       	and	r24, r18
     8a8:	88 b9       	out	0x08, r24	; 8
     8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <Move_Tick+0x46>
     8ac:	28 b1       	in	r18, 0x08	; 8
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	00 90 06 01 	lds	r0, 0x0106
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <Move_Tick+0x3e>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <Move_Tick+0x3a>
     8c0:	82 2b       	or	r24, r18
     8c2:	88 b9       	out	0x08, r24	; 8
     8c4:	80 91 c1 07 	lds	r24, 0x07C1
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	09 f4       	brne	.+2      	; 0x8ce <Move_Tick+0x50>
     8cc:	f1 c0       	rjmp	.+482    	; 0xab0 <Move_Tick+0x232>
     8ce:	28 f4       	brcc	.+10     	; 0x8da <Move_Tick+0x5c>
     8d0:	88 23       	and	r24, r24
     8d2:	51 f0       	breq	.+20     	; 0x8e8 <Move_Tick+0x6a>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <Move_Tick+0x72>
     8d8:	c1 c1       	rjmp	.+898    	; 0xc5c <Move_Tick+0x3de>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <Move_Tick+0x62>
     8de:	0f c1       	rjmp	.+542    	; 0xafe <Move_Tick+0x280>
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <Move_Tick+0x68>
     8e4:	a4 c1       	rjmp	.+840    	; 0xc2e <Move_Tick+0x3b0>
     8e6:	ba c1       	rjmp	.+884    	; 0xc5c <Move_Tick+0x3de>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 c1 07 	sts	0x07C1, r24
     8ee:	b8 c1       	rjmp	.+880    	; 0xc60 <Move_Tick+0x3e2>
     8f0:	e0 91 b5 07 	lds	r30, 0x07B5
     8f4:	f0 91 b6 07 	lds	r31, 0x07B6
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	88 23       	and	r24, r24
     8fc:	09 f4       	brne	.+2      	; 0x900 <Move_Tick+0x82>
     8fe:	b0 c1       	rjmp	.+864    	; 0xc60 <Move_Tick+0x3e2>
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	80 93 c1 07 	sts	0x07C1, r24
     906:	cf 01       	movw	r24, r30
     908:	d9 dd       	rcall	.-1102   	; 0x4bc <QueueDequeue>
     90a:	80 93 48 07 	sts	0x0748, r24
     90e:	81 11       	cpse	r24, r1
     910:	22 c0       	rjmp	.+68     	; 0x956 <Move_Tick+0xd8>
     912:	c2 e5       	ldi	r28, 0x52	; 82
     914:	d7 e0       	ldi	r29, 0x07	; 7
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	52 e4       	ldi	r21, 0x42	; 66
     91e:	6c 81       	ldd	r22, Y+4	; 0x04
     920:	7d 81       	ldd	r23, Y+5	; 0x05
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	9f 81       	ldd	r25, Y+7	; 0x07
     926:	44 d7       	rcall	.+3720   	; 0x17b0 <__addsf3>
     928:	6c 83       	std	Y+4, r22	; 0x04
     92a:	7d 83       	std	Y+5, r23	; 0x05
     92c:	8e 83       	std	Y+6, r24	; 0x06
     92e:	9f 83       	std	Y+7, r25	; 0x07
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 32 01 	sts	0x0132, r24
     936:	86 e5       	ldi	r24, 0x56	; 86
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	90 93 c4 07 	sts	0x07C4, r25
     93e:	80 93 c3 07 	sts	0x07C3, r24
     942:	8e e4       	ldi	r24, 0x4E	; 78
     944:	97 e0       	ldi	r25, 0x07	; 7
     946:	90 93 ba 07 	sts	0x07BA, r25
     94a:	80 93 b9 07 	sts	0x07B9, r24
     94e:	87 e0       	ldi	r24, 0x07	; 7
     950:	80 93 06 01 	sts	0x0106, r24
     954:	85 c1       	rjmp	.+778    	; 0xc60 <Move_Tick+0x3e2>
     956:	81 30       	cpi	r24, 0x01	; 1
     958:	09 f5       	brne	.+66     	; 0x99c <Move_Tick+0x11e>
     95a:	c2 e5       	ldi	r28, 0x52	; 82
     95c:	d7 e0       	ldi	r29, 0x07	; 7
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	44 eb       	ldi	r20, 0xB4	; 180
     964:	52 e4       	ldi	r21, 0x42	; 66
     966:	6c 81       	ldd	r22, Y+4	; 0x04
     968:	7d 81       	ldd	r23, Y+5	; 0x05
     96a:	8e 81       	ldd	r24, Y+6	; 0x06
     96c:	9f 81       	ldd	r25, Y+7	; 0x07
     96e:	1f d7       	rcall	.+3646   	; 0x17ae <__subsf3>
     970:	6c 83       	std	Y+4, r22	; 0x04
     972:	7d 83       	std	Y+5, r23	; 0x05
     974:	8e 83       	std	Y+6, r24	; 0x06
     976:	9f 83       	std	Y+7, r25	; 0x07
     978:	10 92 32 01 	sts	0x0132, r1
     97c:	86 e5       	ldi	r24, 0x56	; 86
     97e:	97 e0       	ldi	r25, 0x07	; 7
     980:	90 93 c4 07 	sts	0x07C4, r25
     984:	80 93 c3 07 	sts	0x07C3, r24
     988:	8e e4       	ldi	r24, 0x4E	; 78
     98a:	97 e0       	ldi	r25, 0x07	; 7
     98c:	90 93 ba 07 	sts	0x07BA, r25
     990:	80 93 b9 07 	sts	0x07B9, r24
     994:	87 e0       	ldi	r24, 0x07	; 7
     996:	80 93 06 01 	sts	0x0106, r24
     99a:	62 c1       	rjmp	.+708    	; 0xc60 <Move_Tick+0x3e2>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	11 f5       	brne	.+68     	; 0x9e4 <Move_Tick+0x166>
     9a0:	c2 e5       	ldi	r28, 0x52	; 82
     9a2:	d7 e0       	ldi	r29, 0x07	; 7
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	44 e3       	ldi	r20, 0x34	; 52
     9aa:	53 e4       	ldi	r21, 0x43	; 67
     9ac:	6c 81       	ldd	r22, Y+4	; 0x04
     9ae:	7d 81       	ldd	r23, Y+5	; 0x05
     9b0:	8e 81       	ldd	r24, Y+6	; 0x06
     9b2:	9f 81       	ldd	r25, Y+7	; 0x07
     9b4:	fd d6       	rcall	.+3578   	; 0x17b0 <__addsf3>
     9b6:	6c 83       	std	Y+4, r22	; 0x04
     9b8:	7d 83       	std	Y+5, r23	; 0x05
     9ba:	8e 83       	std	Y+6, r24	; 0x06
     9bc:	9f 83       	std	Y+7, r25	; 0x07
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 32 01 	sts	0x0132, r24
     9c4:	86 e5       	ldi	r24, 0x56	; 86
     9c6:	97 e0       	ldi	r25, 0x07	; 7
     9c8:	90 93 c4 07 	sts	0x07C4, r25
     9cc:	80 93 c3 07 	sts	0x07C3, r24
     9d0:	8e e4       	ldi	r24, 0x4E	; 78
     9d2:	97 e0       	ldi	r25, 0x07	; 7
     9d4:	90 93 ba 07 	sts	0x07BA, r25
     9d8:	80 93 b9 07 	sts	0x07B9, r24
     9dc:	87 e0       	ldi	r24, 0x07	; 7
     9de:	80 93 06 01 	sts	0x0106, r24
     9e2:	3e c1       	rjmp	.+636    	; 0xc60 <Move_Tick+0x3e2>
     9e4:	83 30       	cpi	r24, 0x03	; 3
     9e6:	01 f5       	brne	.+64     	; 0xa28 <Move_Tick+0x1aa>
     9e8:	c2 e5       	ldi	r28, 0x52	; 82
     9ea:	d7 e0       	ldi	r29, 0x07	; 7
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	44 eb       	ldi	r20, 0xB4	; 180
     9f2:	52 e4       	ldi	r21, 0x42	; 66
     9f4:	68 81       	ld	r22, Y
     9f6:	79 81       	ldd	r23, Y+1	; 0x01
     9f8:	8a 81       	ldd	r24, Y+2	; 0x02
     9fa:	9b 81       	ldd	r25, Y+3	; 0x03
     9fc:	d9 d6       	rcall	.+3506   	; 0x17b0 <__addsf3>
     9fe:	68 83       	st	Y, r22
     a00:	79 83       	std	Y+1, r23	; 0x01
     a02:	8a 83       	std	Y+2, r24	; 0x02
     a04:	9b 83       	std	Y+3, r25	; 0x03
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 31 01 	sts	0x0131, r24
     a0c:	d0 93 c4 07 	sts	0x07C4, r29
     a10:	c0 93 c3 07 	sts	0x07C3, r28
     a14:	8a e4       	ldi	r24, 0x4A	; 74
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	90 93 ba 07 	sts	0x07BA, r25
     a1c:	80 93 b9 07 	sts	0x07B9, r24
     a20:	87 e0       	ldi	r24, 0x07	; 7
     a22:	80 93 06 01 	sts	0x0106, r24
     a26:	1c c1       	rjmp	.+568    	; 0xc60 <Move_Tick+0x3e2>
     a28:	84 30       	cpi	r24, 0x04	; 4
     a2a:	f9 f4       	brne	.+62     	; 0xa6a <Move_Tick+0x1ec>
     a2c:	c2 e5       	ldi	r28, 0x52	; 82
     a2e:	d7 e0       	ldi	r29, 0x07	; 7
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	44 eb       	ldi	r20, 0xB4	; 180
     a36:	52 e4       	ldi	r21, 0x42	; 66
     a38:	68 81       	ld	r22, Y
     a3a:	79 81       	ldd	r23, Y+1	; 0x01
     a3c:	8a 81       	ldd	r24, Y+2	; 0x02
     a3e:	9b 81       	ldd	r25, Y+3	; 0x03
     a40:	b6 d6       	rcall	.+3436   	; 0x17ae <__subsf3>
     a42:	68 83       	st	Y, r22
     a44:	79 83       	std	Y+1, r23	; 0x01
     a46:	8a 83       	std	Y+2, r24	; 0x02
     a48:	9b 83       	std	Y+3, r25	; 0x03
     a4a:	10 92 31 01 	sts	0x0131, r1
     a4e:	d0 93 c4 07 	sts	0x07C4, r29
     a52:	c0 93 c3 07 	sts	0x07C3, r28
     a56:	8a e4       	ldi	r24, 0x4A	; 74
     a58:	97 e0       	ldi	r25, 0x07	; 7
     a5a:	90 93 ba 07 	sts	0x07BA, r25
     a5e:	80 93 b9 07 	sts	0x07B9, r24
     a62:	87 e0       	ldi	r24, 0x07	; 7
     a64:	80 93 06 01 	sts	0x0106, r24
     a68:	fb c0       	rjmp	.+502    	; 0xc60 <Move_Tick+0x3e2>
     a6a:	85 30       	cpi	r24, 0x05	; 5
     a6c:	09 f0       	breq	.+2      	; 0xa70 <Move_Tick+0x1f2>
     a6e:	f8 c0       	rjmp	.+496    	; 0xc60 <Move_Tick+0x3e2>
     a70:	c2 e5       	ldi	r28, 0x52	; 82
     a72:	d7 e0       	ldi	r29, 0x07	; 7
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	44 e3       	ldi	r20, 0x34	; 52
     a7a:	53 e4       	ldi	r21, 0x43	; 67
     a7c:	68 81       	ld	r22, Y
     a7e:	79 81       	ldd	r23, Y+1	; 0x01
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	9b 81       	ldd	r25, Y+3	; 0x03
     a84:	95 d6       	rcall	.+3370   	; 0x17b0 <__addsf3>
     a86:	68 83       	st	Y, r22
     a88:	79 83       	std	Y+1, r23	; 0x01
     a8a:	8a 83       	std	Y+2, r24	; 0x02
     a8c:	9b 83       	std	Y+3, r25	; 0x03
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	80 93 31 01 	sts	0x0131, r24
     a94:	d0 93 c4 07 	sts	0x07C4, r29
     a98:	c0 93 c3 07 	sts	0x07C3, r28
     a9c:	8a e4       	ldi	r24, 0x4A	; 74
     a9e:	97 e0       	ldi	r25, 0x07	; 7
     aa0:	90 93 ba 07 	sts	0x07BA, r25
     aa4:	80 93 b9 07 	sts	0x07B9, r24
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	80 93 06 01 	sts	0x0106, r24
     aae:	d8 c0       	rjmp	.+432    	; 0xc60 <Move_Tick+0x3e2>
     ab0:	e0 91 c3 07 	lds	r30, 0x07C3
     ab4:	f0 91 c4 07 	lds	r31, 0x07C4
     ab8:	a0 91 b9 07 	lds	r26, 0x07B9
     abc:	b0 91 ba 07 	lds	r27, 0x07BA
     ac0:	2d 91       	ld	r18, X+
     ac2:	3d 91       	ld	r19, X+
     ac4:	4d 91       	ld	r20, X+
     ac6:	5c 91       	ld	r21, X
     ac8:	60 81       	ld	r22, Z
     aca:	71 81       	ldd	r23, Z+1	; 0x01
     acc:	82 81       	ldd	r24, Z+2	; 0x02
     ace:	93 81       	ldd	r25, Z+3	; 0x03
     ad0:	d3 d6       	rcall	.+3494   	; 0x1878 <__cmpsf2>
     ad2:	81 11       	cpse	r24, r1
     ad4:	c5 c0       	rjmp	.+394    	; 0xc60 <Move_Tick+0x3e2>
     ad6:	80 91 48 07 	lds	r24, 0x0748
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	31 f0       	breq	.+12     	; 0xaea <Move_Tick+0x26c>
     ade:	85 30       	cpi	r24, 0x05	; 5
     ae0:	21 f0       	breq	.+8      	; 0xaea <Move_Tick+0x26c>
     ae2:	88 30       	cpi	r24, 0x08	; 8
     ae4:	11 f0       	breq	.+4      	; 0xaea <Move_Tick+0x26c>
     ae6:	8b 30       	cpi	r24, 0x0B	; 11
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <Move_Tick+0x274>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 c1 07 	sts	0x07C1, r24
     af0:	b7 c0       	rjmp	.+366    	; 0xc60 <Move_Tick+0x3e2>
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	80 93 c1 07 	sts	0x07C1, r24
     af8:	10 92 49 07 	sts	0x0749, r1
     afc:	b1 c0       	rjmp	.+354    	; 0xc60 <Move_Tick+0x3e2>
     afe:	80 91 49 07 	lds	r24, 0x0749
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	98 0f       	add	r25, r24
     b06:	90 93 49 07 	sts	0x0749, r25
     b0a:	83 33       	cpi	r24, 0x33	; 51
     b0c:	08 f4       	brcc	.+2      	; 0xb10 <Move_Tick+0x292>
     b0e:	a8 c0       	rjmp	.+336    	; 0xc60 <Move_Tick+0x3e2>
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	80 93 c1 07 	sts	0x07C1, r24
     b16:	80 91 48 07 	lds	r24, 0x0748
     b1a:	81 11       	cpse	r24, r1
     b1c:	21 c0       	rjmp	.+66     	; 0xb60 <Move_Tick+0x2e2>
     b1e:	c2 e5       	ldi	r28, 0x52	; 82
     b20:	d7 e0       	ldi	r29, 0x07	; 7
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	44 eb       	ldi	r20, 0xB4	; 180
     b28:	52 e4       	ldi	r21, 0x42	; 66
     b2a:	6c 81       	ldd	r22, Y+4	; 0x04
     b2c:	7d 81       	ldd	r23, Y+5	; 0x05
     b2e:	8e 81       	ldd	r24, Y+6	; 0x06
     b30:	9f 81       	ldd	r25, Y+7	; 0x07
     b32:	3d d6       	rcall	.+3194   	; 0x17ae <__subsf3>
     b34:	6c 83       	std	Y+4, r22	; 0x04
     b36:	7d 83       	std	Y+5, r23	; 0x05
     b38:	8e 83       	std	Y+6, r24	; 0x06
     b3a:	9f 83       	std	Y+7, r25	; 0x07
     b3c:	10 92 32 01 	sts	0x0132, r1
     b40:	86 e5       	ldi	r24, 0x56	; 86
     b42:	97 e0       	ldi	r25, 0x07	; 7
     b44:	90 93 c4 07 	sts	0x07C4, r25
     b48:	80 93 c3 07 	sts	0x07C3, r24
     b4c:	8e e4       	ldi	r24, 0x4E	; 78
     b4e:	97 e0       	ldi	r25, 0x07	; 7
     b50:	90 93 ba 07 	sts	0x07BA, r25
     b54:	80 93 b9 07 	sts	0x07B9, r24
     b58:	87 e0       	ldi	r24, 0x07	; 7
     b5a:	80 93 06 01 	sts	0x0106, r24
     b5e:	80 c0       	rjmp	.+256    	; 0xc60 <Move_Tick+0x3e2>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	11 f5       	brne	.+68     	; 0xba8 <Move_Tick+0x32a>
     b64:	c2 e5       	ldi	r28, 0x52	; 82
     b66:	d7 e0       	ldi	r29, 0x07	; 7
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	44 eb       	ldi	r20, 0xB4	; 180
     b6e:	52 e4       	ldi	r21, 0x42	; 66
     b70:	6c 81       	ldd	r22, Y+4	; 0x04
     b72:	7d 81       	ldd	r23, Y+5	; 0x05
     b74:	8e 81       	ldd	r24, Y+6	; 0x06
     b76:	9f 81       	ldd	r25, Y+7	; 0x07
     b78:	1b d6       	rcall	.+3126   	; 0x17b0 <__addsf3>
     b7a:	6c 83       	std	Y+4, r22	; 0x04
     b7c:	7d 83       	std	Y+5, r23	; 0x05
     b7e:	8e 83       	std	Y+6, r24	; 0x06
     b80:	9f 83       	std	Y+7, r25	; 0x07
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 32 01 	sts	0x0132, r24
     b88:	86 e5       	ldi	r24, 0x56	; 86
     b8a:	97 e0       	ldi	r25, 0x07	; 7
     b8c:	90 93 c4 07 	sts	0x07C4, r25
     b90:	80 93 c3 07 	sts	0x07C3, r24
     b94:	8e e4       	ldi	r24, 0x4E	; 78
     b96:	97 e0       	ldi	r25, 0x07	; 7
     b98:	90 93 ba 07 	sts	0x07BA, r25
     b9c:	80 93 b9 07 	sts	0x07B9, r24
     ba0:	87 e0       	ldi	r24, 0x07	; 7
     ba2:	80 93 06 01 	sts	0x0106, r24
     ba6:	5c c0       	rjmp	.+184    	; 0xc60 <Move_Tick+0x3e2>
     ba8:	83 30       	cpi	r24, 0x03	; 3
     baa:	f9 f4       	brne	.+62     	; 0xbea <Move_Tick+0x36c>
     bac:	c2 e5       	ldi	r28, 0x52	; 82
     bae:	d7 e0       	ldi	r29, 0x07	; 7
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	44 eb       	ldi	r20, 0xB4	; 180
     bb6:	52 e4       	ldi	r21, 0x42	; 66
     bb8:	68 81       	ld	r22, Y
     bba:	79 81       	ldd	r23, Y+1	; 0x01
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	f6 d5       	rcall	.+3052   	; 0x17ae <__subsf3>
     bc2:	68 83       	st	Y, r22
     bc4:	79 83       	std	Y+1, r23	; 0x01
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	9b 83       	std	Y+3, r25	; 0x03
     bca:	10 92 31 01 	sts	0x0131, r1
     bce:	d0 93 c4 07 	sts	0x07C4, r29
     bd2:	c0 93 c3 07 	sts	0x07C3, r28
     bd6:	8a e4       	ldi	r24, 0x4A	; 74
     bd8:	97 e0       	ldi	r25, 0x07	; 7
     bda:	90 93 ba 07 	sts	0x07BA, r25
     bde:	80 93 b9 07 	sts	0x07B9, r24
     be2:	87 e0       	ldi	r24, 0x07	; 7
     be4:	80 93 06 01 	sts	0x0106, r24
     be8:	3b c0       	rjmp	.+118    	; 0xc60 <Move_Tick+0x3e2>
     bea:	84 30       	cpi	r24, 0x04	; 4
     bec:	c9 f5       	brne	.+114    	; 0xc60 <Move_Tick+0x3e2>
     bee:	c2 e5       	ldi	r28, 0x52	; 82
     bf0:	d7 e0       	ldi	r29, 0x07	; 7
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	44 eb       	ldi	r20, 0xB4	; 180
     bf8:	52 e4       	ldi	r21, 0x42	; 66
     bfa:	68 81       	ld	r22, Y
     bfc:	79 81       	ldd	r23, Y+1	; 0x01
     bfe:	8a 81       	ldd	r24, Y+2	; 0x02
     c00:	9b 81       	ldd	r25, Y+3	; 0x03
     c02:	d6 d5       	rcall	.+2988   	; 0x17b0 <__addsf3>
     c04:	68 83       	st	Y, r22
     c06:	79 83       	std	Y+1, r23	; 0x01
     c08:	8a 83       	std	Y+2, r24	; 0x02
     c0a:	9b 83       	std	Y+3, r25	; 0x03
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 31 01 	sts	0x0131, r24
     c12:	d0 93 c4 07 	sts	0x07C4, r29
     c16:	c0 93 c3 07 	sts	0x07C3, r28
     c1a:	8a e4       	ldi	r24, 0x4A	; 74
     c1c:	97 e0       	ldi	r25, 0x07	; 7
     c1e:	90 93 ba 07 	sts	0x07BA, r25
     c22:	80 93 b9 07 	sts	0x07B9, r24
     c26:	87 e0       	ldi	r24, 0x07	; 7
     c28:	80 93 06 01 	sts	0x0106, r24
     c2c:	19 c0       	rjmp	.+50     	; 0xc60 <Move_Tick+0x3e2>
     c2e:	e0 91 c3 07 	lds	r30, 0x07C3
     c32:	f0 91 c4 07 	lds	r31, 0x07C4
     c36:	a0 91 b9 07 	lds	r26, 0x07B9
     c3a:	b0 91 ba 07 	lds	r27, 0x07BA
     c3e:	2d 91       	ld	r18, X+
     c40:	3d 91       	ld	r19, X+
     c42:	4d 91       	ld	r20, X+
     c44:	5c 91       	ld	r21, X
     c46:	60 81       	ld	r22, Z
     c48:	71 81       	ldd	r23, Z+1	; 0x01
     c4a:	82 81       	ldd	r24, Z+2	; 0x02
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	14 d6       	rcall	.+3112   	; 0x1878 <__cmpsf2>
     c50:	81 11       	cpse	r24, r1
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <Move_Tick+0x3e2>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	80 93 c1 07 	sts	0x07C1, r24
     c5a:	02 c0       	rjmp	.+4      	; 0xc60 <Move_Tick+0x3e2>
     c5c:	10 92 c1 07 	sts	0x07C1, r1
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <Move_Task>:
     c66:	10 92 c1 07 	sts	0x07C1, r1
     c6a:	09 de       	rcall	.-1006   	; 0x87e <Move_Tick>
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	dd d4       	rcall	.+2490   	; 0x162c <vTaskDelay>
     c72:	fb cf       	rjmp	.-10     	; 0xc6a <Move_Task+0x4>

00000c74 <Joy_Tick>:
			break;
		case JPUSHED:
			break;
	}
	
	switch(joy_state) {
     c74:	80 91 bf 07 	lds	r24, 0x07BF
     c78:	81 30       	cpi	r24, 0x01	; 1
     c7a:	41 f0       	breq	.+16     	; 0xc8c <Joy_Tick+0x18>
     c7c:	18 f0       	brcs	.+6      	; 0xc84 <Joy_Tick+0x10>
     c7e:	82 30       	cpi	r24, 0x02	; 2
     c80:	b9 f1       	breq	.+110    	; 0xcf0 <Joy_Tick+0x7c>
     c82:	43 c0       	rjmp	.+134    	; 0xd0a <Joy_Tick+0x96>
		case JINIT:
			joy_state = JWAIT;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 bf 07 	sts	0x07BF, r24
			break;
     c8a:	08 95       	ret
		case JWAIT:
			joystickSample();
     c8c:	ed da       	rcall	.-2598   	; 0x268 <joystickSample>
			//PORTD = joyPos;
			if(joyPos == None) joy_state = JWAIT;
     c8e:	80 91 c2 07 	lds	r24, 0x07C2
     c92:	81 11       	cpse	r24, r1
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <Joy_Tick+0x2a>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 bf 07 	sts	0x07BF, r24
     c9c:	08 95       	ret
			else {
				if(joyPos == Right) { PORTD |= 0x00; QueueEnqueue(moves, R); } //target_angle[1] += 90, dir[1] = 1;
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	49 f4       	brne	.+18     	; 0xcb4 <Joy_Tick+0x40>
     ca2:	8b b1       	in	r24, 0x0b	; 11
     ca4:	8b b9       	out	0x0b, r24	; 11
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	80 91 b5 07 	lds	r24, 0x07B5
     cac:	90 91 b6 07 	lds	r25, 0x07B6
     cb0:	ed db       	rcall	.-2086   	; 0x48c <QueueEnqueue>
     cb2:	1a c0       	rjmp	.+52     	; 0xce8 <Joy_Tick+0x74>
				else if(joyPos == Left) QueueEnqueue(moves, Rp); //target_angle[1] -= 90, dir[1] = 0;
     cb4:	82 30       	cpi	r24, 0x02	; 2
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <Joy_Tick+0x52>
     cb8:	61 e0       	ldi	r22, 0x01	; 1
     cba:	80 91 b5 07 	lds	r24, 0x07B5
     cbe:	90 91 b6 07 	lds	r25, 0x07B6
     cc2:	e4 db       	rcall	.-2104   	; 0x48c <QueueEnqueue>
     cc4:	11 c0       	rjmp	.+34     	; 0xce8 <Joy_Tick+0x74>
				else if(joyPos == Down) QueueEnqueue(moves, R2);
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <Joy_Tick+0x64>
     cca:	62 e0       	ldi	r22, 0x02	; 2
     ccc:	80 91 b5 07 	lds	r24, 0x07B5
     cd0:	90 91 b6 07 	lds	r25, 0x07B6
     cd4:	db db       	rcall	.-2122   	; 0x48c <QueueEnqueue>
     cd6:	08 c0       	rjmp	.+16     	; 0xce8 <Joy_Tick+0x74>
				else if(joyPos == Up) QueueEnqueue(moves, R2);
     cd8:	83 30       	cpi	r24, 0x03	; 3
     cda:	31 f4       	brne	.+12     	; 0xce8 <Joy_Tick+0x74>
     cdc:	62 e0       	ldi	r22, 0x02	; 2
     cde:	80 91 b5 07 	lds	r24, 0x07B5
     ce2:	90 91 b6 07 	lds	r25, 0x07B6
     ce6:	d2 db       	rcall	.-2140   	; 0x48c <QueueEnqueue>
				joy_state = JPUSHED;
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	80 93 bf 07 	sts	0x07BF, r24
     cee:	08 95       	ret
			}
			break;
		case JPUSHED:
			joystickSample();
     cf0:	bb da       	rcall	.-2698   	; 0x268 <joystickSample>
			if(joyPos == None) joy_state = JWAIT;
     cf2:	80 91 c2 07 	lds	r24, 0x07C2
     cf6:	81 11       	cpse	r24, r1
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <Joy_Tick+0x8e>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 bf 07 	sts	0x07BF, r24
     d00:	08 95       	ret
			else joy_state = JPUSHED;
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	80 93 bf 07 	sts	0x07BF, r24
     d08:	08 95       	ret
			break;
			default:
			joy_state = JINIT;
     d0a:	10 92 bf 07 	sts	0x07BF, r1
     d0e:	08 95       	ret

00000d10 <Joy_Task>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     d10:	10 92 bf 07 	sts	0x07BF, r1
}

void Joy_Task() {
	Joy_Init();
	for(;;) {
		Joy_Tick();
     d14:	af df       	rcall	.-162    	; 0xc74 <Joy_Tick>
		vTaskDelay(20);
     d16:	84 e1       	ldi	r24, 0x14	; 20
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	88 d4       	rcall	.+2320   	; 0x162c <vTaskDelay>
	}
     d1c:	fb cf       	rjmp	.-10     	; 0xd14 <Joy_Task+0x4>

00000d1e <Receive_Init>:
}

enum ReveiveState {RINIT, RWAIT} receive_state;

void Receive_Init() {
	SPI_ServantInit();
     d1e:	e4 db       	rcall	.-2104   	; 0x4e8 <SPI_ServantInit>
	receive_state = RINIT;
     d20:	10 92 c0 07 	sts	0x07C0, r1
     d24:	08 95       	ret

00000d26 <Reveiced_Tick>:
}

void Reveiced_Tick() {
	switch(receive_state) {
     d26:	80 91 c0 07 	lds	r24, 0x07C0
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	61 f4       	brne	.+24     	; 0xd46 <Reveiced_Tick+0x20>
		case RINIT:
			break;
		case RWAIT:
			if(~receivedData) {
     d2e:	60 91 37 01 	lds	r22, 0x0137
				if(receivedData < 12) { //Make sure it's a valid move
     d32:	6c 30       	cpi	r22, 0x0C	; 12
     d34:	28 f4       	brcc	.+10     	; 0xd40 <Reveiced_Tick+0x1a>
					QueueEnqueue(moves, receivedData);
     d36:	80 91 b5 07 	lds	r24, 0x07B5
     d3a:	90 91 b6 07 	lds	r25, 0x07B6
     d3e:	a6 db       	rcall	.-2228   	; 0x48c <QueueEnqueue>
				}
				receivedData = 0xFF;
     d40:	8f ef       	ldi	r24, 0xFF	; 255
     d42:	80 93 37 01 	sts	0x0137, r24
			} 
			break;
	}
	
	switch(receive_state) {
     d46:	80 91 c0 07 	lds	r24, 0x07C0
     d4a:	88 23       	and	r24, r24
     d4c:	19 f0       	breq	.+6      	; 0xd54 <Reveiced_Tick+0x2e>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	29 f4       	brne	.+10     	; 0xd5c <Reveiced_Tick+0x36>
     d52:	08 95       	ret
		case RINIT:
			receive_state = RWAIT;
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	80 93 c0 07 	sts	0x07C0, r24
			break;
     d5a:	08 95       	ret
		case RWAIT:
			break;
		default:
			receive_state = RINIT;
     d5c:	10 92 c0 07 	sts	0x07C0, r1
     d60:	08 95       	ret

00000d62 <Receive_Task>:
			break;
	}
}

void Receive_Task() {
	Receive_Init();
     d62:	dd df       	rcall	.-70     	; 0xd1e <Receive_Init>
	for(;;) {
		Reveiced_Tick();
     d64:	e0 df       	rcall	.-64     	; 0xd26 <Reveiced_Tick>
		vTaskDelay(10);
     d66:	8a e0       	ldi	r24, 0x0A	; 10
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	60 d4       	rcall	.+2240   	; 0x162c <vTaskDelay>
	}
     d6c:	fb cf       	rjmp	.-10     	; 0xd64 <Receive_Task+0x2>

00000d6e <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
     d6e:	af 92       	push	r10
     d70:	bf 92       	push	r11
     d72:	cf 92       	push	r12
     d74:	df 92       	push	r13
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	cf 93       	push	r28
	xTaskCreate(Motor_Task, (signed portCHAR *)"Motorer", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     d7e:	a1 2c       	mov	r10, r1
     d80:	b1 2c       	mov	r11, r1
     d82:	c1 2c       	mov	r12, r1
     d84:	d1 2c       	mov	r13, r1
     d86:	e1 2c       	mov	r14, r1
     d88:	f1 2c       	mov	r15, r1
     d8a:	08 2f       	mov	r16, r24
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	45 e5       	ldi	r20, 0x55	; 85
     d92:	50 e0       	ldi	r21, 0x00	; 0
     d94:	6a e3       	ldi	r22, 0x3A	; 58
     d96:	71 e0       	ldi	r23, 0x01	; 1
     d98:	88 e3       	ldi	r24, 0x38	; 56
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	cf d1       	rcall	.+926    	; 0x113c <xTaskGenericCreate>
	xTaskCreate(Move_Task, (signed portCHAR *)"Mover", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	45 e5       	ldi	r20, 0x55	; 85
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	62 e4       	ldi	r22, 0x42	; 66
     da8:	71 e0       	ldi	r23, 0x01	; 1
     daa:	83 e3       	ldi	r24, 0x33	; 51
     dac:	96 e0       	ldi	r25, 0x06	; 6
     dae:	c6 d1       	rcall	.+908    	; 0x113c <xTaskGenericCreate>
	xTaskCreate(Shift_Task, (signed portCHAR *)"Shifter", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	45 e5       	ldi	r20, 0x55	; 85
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	68 e4       	ldi	r22, 0x48	; 72
     dba:	71 e0       	ldi	r23, 0x01	; 1
     dbc:	85 ec       	ldi	r24, 0xC5	; 197
     dbe:	92 e0       	ldi	r25, 0x02	; 2
     dc0:	bd d1       	rcall	.+890    	; 0x113c <xTaskGenericCreate>
	xTaskCreate(Joy_Task, (signed portCHAR *)"JoySticker", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	45 e5       	ldi	r20, 0x55	; 85
     dc8:	50 e0       	ldi	r21, 0x00	; 0
     dca:	60 e5       	ldi	r22, 0x50	; 80
     dcc:	71 e0       	ldi	r23, 0x01	; 1
     dce:	88 e8       	ldi	r24, 0x88	; 136
     dd0:	96 e0       	ldi	r25, 0x06	; 6
     dd2:	b4 d1       	rcall	.+872    	; 0x113c <xTaskGenericCreate>
	xTaskCreate(Receive_Task, (signed portCHAR *)"Receiver", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	45 e5       	ldi	r20, 0x55	; 85
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	6b e5       	ldi	r22, 0x5B	; 91
     dde:	71 e0       	ldi	r23, 0x01	; 1
     de0:	81 eb       	ldi	r24, 0xB1	; 177
     de2:	96 e0       	ldi	r25, 0x06	; 6
     de4:	ab d1       	rcall	.+854    	; 0x113c <xTaskGenericCreate>
}
     de6:	cf 91       	pop	r28
     de8:	0f 91       	pop	r16
     dea:	ff 90       	pop	r15
     dec:	ef 90       	pop	r14
     dee:	df 90       	pop	r13
     df0:	cf 90       	pop	r12
     df2:	bf 90       	pop	r11
     df4:	af 90       	pop	r10
     df6:	08 95       	ret

00000df8 <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     df8:	11 b8       	out	0x01, r1	; 1
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	82 b9       	out	0x02, r24	; 2
	//DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
     dfe:	87 b9       	out	0x07, r24	; 7
     e00:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     e02:	8a b9       	out	0x0a, r24	; 10
     e04:	1b b8       	out	0x0b, r1	; 11
	
	
	moves = QueueInit(30);
     e06:	8e e1       	ldi	r24, 0x1E	; 30
     e08:	29 db       	rcall	.-2478   	; 0x45c <QueueInit>
     e0a:	90 93 b6 07 	sts	0x07B6, r25
     e0e:	80 93 b5 07 	sts	0x07B5, r24
	
	joystickInit();
     e12:	1c da       	rcall	.-3016   	; 0x24c <joystickInit>
	StartSecPulse(1);
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	ab df       	rcall	.-170    	; 0xd6e <StartSecPulse>
	vTaskStartScheduler();
     e18:	92 d2       	rcall	.+1316   	; 0x133e <vTaskStartScheduler>
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	08 95       	ret

00000e20 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e20:	31 e1       	ldi	r19, 0x11	; 17
     e22:	fc 01       	movw	r30, r24
     e24:	30 83       	st	Z, r19
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	22 e2       	ldi	r18, 0x22	; 34
     e2a:	20 83       	st	Z, r18
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	a3 e3       	ldi	r26, 0x33	; 51
     e30:	a0 83       	st	Z, r26
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	60 83       	st	Z, r22
     e36:	31 97       	sbiw	r30, 0x01	; 1
     e38:	70 83       	st	Z, r23
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	10 82       	st	Z, r1
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	60 e8       	ldi	r22, 0x80	; 128
     e42:	60 83       	st	Z, r22
     e44:	31 97       	sbiw	r30, 0x01	; 1
     e46:	10 82       	st	Z, r1
     e48:	31 97       	sbiw	r30, 0x01	; 1
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	60 83       	st	Z, r22
     e4e:	31 97       	sbiw	r30, 0x01	; 1
     e50:	63 e0       	ldi	r22, 0x03	; 3
     e52:	60 83       	st	Z, r22
     e54:	31 97       	sbiw	r30, 0x01	; 1
     e56:	64 e0       	ldi	r22, 0x04	; 4
     e58:	60 83       	st	Z, r22
     e5a:	31 97       	sbiw	r30, 0x01	; 1
     e5c:	65 e0       	ldi	r22, 0x05	; 5
     e5e:	60 83       	st	Z, r22
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	66 e0       	ldi	r22, 0x06	; 6
     e64:	60 83       	st	Z, r22
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	67 e0       	ldi	r22, 0x07	; 7
     e6a:	60 83       	st	Z, r22
     e6c:	31 97       	sbiw	r30, 0x01	; 1
     e6e:	68 e0       	ldi	r22, 0x08	; 8
     e70:	60 83       	st	Z, r22
     e72:	31 97       	sbiw	r30, 0x01	; 1
     e74:	69 e0       	ldi	r22, 0x09	; 9
     e76:	60 83       	st	Z, r22
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	60 e1       	ldi	r22, 0x10	; 16
     e7c:	60 83       	st	Z, r22
     e7e:	31 97       	sbiw	r30, 0x01	; 1
     e80:	30 83       	st	Z, r19
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	32 e1       	ldi	r19, 0x12	; 18
     e86:	30 83       	st	Z, r19
     e88:	31 97       	sbiw	r30, 0x01	; 1
     e8a:	33 e1       	ldi	r19, 0x13	; 19
     e8c:	30 83       	st	Z, r19
     e8e:	31 97       	sbiw	r30, 0x01	; 1
     e90:	34 e1       	ldi	r19, 0x14	; 20
     e92:	30 83       	st	Z, r19
     e94:	31 97       	sbiw	r30, 0x01	; 1
     e96:	35 e1       	ldi	r19, 0x15	; 21
     e98:	30 83       	st	Z, r19
     e9a:	31 97       	sbiw	r30, 0x01	; 1
     e9c:	36 e1       	ldi	r19, 0x16	; 22
     e9e:	30 83       	st	Z, r19
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	37 e1       	ldi	r19, 0x17	; 23
     ea4:	30 83       	st	Z, r19
     ea6:	31 97       	sbiw	r30, 0x01	; 1
     ea8:	38 e1       	ldi	r19, 0x18	; 24
     eaa:	30 83       	st	Z, r19
     eac:	31 97       	sbiw	r30, 0x01	; 1
     eae:	39 e1       	ldi	r19, 0x19	; 25
     eb0:	30 83       	st	Z, r19
     eb2:	31 97       	sbiw	r30, 0x01	; 1
     eb4:	30 e2       	ldi	r19, 0x20	; 32
     eb6:	30 83       	st	Z, r19
     eb8:	31 97       	sbiw	r30, 0x01	; 1
     eba:	31 e2       	ldi	r19, 0x21	; 33
     ebc:	30 83       	st	Z, r19
     ebe:	31 97       	sbiw	r30, 0x01	; 1
     ec0:	20 83       	st	Z, r18
     ec2:	31 97       	sbiw	r30, 0x01	; 1
     ec4:	23 e2       	ldi	r18, 0x23	; 35
     ec6:	20 83       	st	Z, r18
     ec8:	31 97       	sbiw	r30, 0x01	; 1
     eca:	40 83       	st	Z, r20
     ecc:	31 97       	sbiw	r30, 0x01	; 1
     ece:	50 83       	st	Z, r21
     ed0:	31 97       	sbiw	r30, 0x01	; 1
     ed2:	26 e2       	ldi	r18, 0x26	; 38
     ed4:	20 83       	st	Z, r18
     ed6:	31 97       	sbiw	r30, 0x01	; 1
     ed8:	27 e2       	ldi	r18, 0x27	; 39
     eda:	20 83       	st	Z, r18
     edc:	31 97       	sbiw	r30, 0x01	; 1
     ede:	28 e2       	ldi	r18, 0x28	; 40
     ee0:	20 83       	st	Z, r18
     ee2:	31 97       	sbiw	r30, 0x01	; 1
     ee4:	29 e2       	ldi	r18, 0x29	; 41
     ee6:	20 83       	st	Z, r18
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	20 e3       	ldi	r18, 0x30	; 48
     eec:	20 83       	st	Z, r18
     eee:	31 97       	sbiw	r30, 0x01	; 1
     ef0:	21 e3       	ldi	r18, 0x31	; 49
     ef2:	20 83       	st	Z, r18
     ef4:	86 97       	sbiw	r24, 0x26	; 38
     ef6:	08 95       	ret

00000ef8 <xPortStartScheduler>:
     ef8:	10 92 89 00 	sts	0x0089, r1
     efc:	8c e7       	ldi	r24, 0x7C	; 124
     efe:	80 93 88 00 	sts	0x0088, r24
     f02:	8b e0       	ldi	r24, 0x0B	; 11
     f04:	80 93 81 00 	sts	0x0081, r24
     f08:	ef e6       	ldi	r30, 0x6F	; 111
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	82 60       	ori	r24, 0x02	; 2
     f10:	80 83       	st	Z, r24
     f12:	a0 91 b3 07 	lds	r26, 0x07B3
     f16:	b0 91 b4 07 	lds	r27, 0x07B4
     f1a:	cd 91       	ld	r28, X+
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	dd 91       	ld	r29, X+
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	ff 91       	pop	r31
     f24:	ef 91       	pop	r30
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	9f 90       	pop	r9
     f50:	8f 90       	pop	r8
     f52:	7f 90       	pop	r7
     f54:	6f 90       	pop	r6
     f56:	5f 90       	pop	r5
     f58:	4f 90       	pop	r4
     f5a:	3f 90       	pop	r3
     f5c:	2f 90       	pop	r2
     f5e:	1f 90       	pop	r1
     f60:	0f 90       	pop	r0
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	0f 90       	pop	r0
     f66:	08 95       	ret
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	08 95       	ret

00000f6c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
     f74:	1f 92       	push	r1
     f76:	11 24       	eor	r1, r1
     f78:	2f 92       	push	r2
     f7a:	3f 92       	push	r3
     f7c:	4f 92       	push	r4
     f7e:	5f 92       	push	r5
     f80:	6f 92       	push	r6
     f82:	7f 92       	push	r7
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	a0 91 b3 07 	lds	r26, 0x07B3
     fb8:	b0 91 b4 07 	lds	r27, 0x07B4
     fbc:	0d b6       	in	r0, 0x3d	; 61
     fbe:	0d 92       	st	X+, r0
     fc0:	0e b6       	in	r0, 0x3e	; 62
     fc2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     fc4:	88 d3       	rcall	.+1808   	; 0x16d6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fc6:	a0 91 b3 07 	lds	r26, 0x07B3
     fca:	b0 91 b4 07 	lds	r27, 0x07B4
     fce:	cd 91       	ld	r28, X+
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	dd 91       	ld	r29, X+
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	1f 91       	pop	r17
     ff4:	0f 91       	pop	r16
     ff6:	ff 90       	pop	r15
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	7f 90       	pop	r7
    1008:	6f 90       	pop	r6
    100a:	5f 90       	pop	r5
    100c:	4f 90       	pop	r4
    100e:	3f 90       	pop	r3
    1010:	2f 90       	pop	r2
    1012:	1f 90       	pop	r1
    1014:	0f 90       	pop	r0
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	0f 90       	pop	r0

	asm volatile ( "ret" );
    101a:	08 95       	ret

0000101c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	0f 92       	push	r0
    1024:	1f 92       	push	r1
    1026:	11 24       	eor	r1, r1
    1028:	2f 92       	push	r2
    102a:	3f 92       	push	r3
    102c:	4f 92       	push	r4
    102e:	5f 92       	push	r5
    1030:	6f 92       	push	r6
    1032:	7f 92       	push	r7
    1034:	8f 92       	push	r8
    1036:	9f 92       	push	r9
    1038:	af 92       	push	r10
    103a:	bf 92       	push	r11
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	2f 93       	push	r18
    104a:	3f 93       	push	r19
    104c:	4f 93       	push	r20
    104e:	5f 93       	push	r21
    1050:	6f 93       	push	r22
    1052:	7f 93       	push	r23
    1054:	8f 93       	push	r24
    1056:	9f 93       	push	r25
    1058:	af 93       	push	r26
    105a:	bf 93       	push	r27
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
    1064:	a0 91 b3 07 	lds	r26, 0x07B3
    1068:	b0 91 b4 07 	lds	r27, 0x07B4
    106c:	0d b6       	in	r0, 0x3d	; 61
    106e:	0d 92       	st	X+, r0
    1070:	0e b6       	in	r0, 0x3e	; 62
    1072:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1074:	93 d1       	rcall	.+806    	; 0x139c <vTaskIncrementTick>
	vTaskSwitchContext();
    1076:	2f d3       	rcall	.+1630   	; 0x16d6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1078:	a0 91 b3 07 	lds	r26, 0x07B3
    107c:	b0 91 b4 07 	lds	r27, 0x07B4
    1080:	cd 91       	ld	r28, X+
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	dd 91       	ld	r29, X+
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	ff 91       	pop	r31
    108a:	ef 91       	pop	r30
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	7f 90       	pop	r7
    10ba:	6f 90       	pop	r6
    10bc:	5f 90       	pop	r5
    10be:	4f 90       	pop	r4
    10c0:	3f 90       	pop	r3
    10c2:	2f 90       	pop	r2
    10c4:	1f 90       	pop	r1
    10c6:	0f 90       	pop	r0
    10c8:	0f be       	out	0x3f, r0	; 63
    10ca:	0f 90       	pop	r0

	asm volatile ( "ret" );
    10cc:	08 95       	ret

000010ce <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    10ce:	a6 df       	rcall	.-180    	; 0x101c <vPortYieldFromTick>
		asm volatile ( "reti" );
    10d0:	18 95       	reti

000010d2 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	ec 01       	movw	r28, r24
    10d8:	e0 91 b3 07 	lds	r30, 0x07B3
    10dc:	f0 91 b4 07 	lds	r31, 0x07B4
    10e0:	93 83       	std	Z+3, r25	; 0x03
    10e2:	82 83       	std	Z+2, r24	; 0x02
    10e4:	80 91 63 07 	lds	r24, 0x0763
    10e8:	90 91 64 07 	lds	r25, 0x0764
    10ec:	c8 17       	cp	r28, r24
    10ee:	d9 07       	cpc	r29, r25
    10f0:	60 f4       	brcc	.+24     	; 0x110a <prvAddCurrentTaskToDelayedList+0x38>
    10f2:	60 91 b3 07 	lds	r22, 0x07B3
    10f6:	70 91 b4 07 	lds	r23, 0x07B4
    10fa:	80 91 79 07 	lds	r24, 0x0779
    10fe:	90 91 7a 07 	lds	r25, 0x077A
    1102:	6e 5f       	subi	r22, 0xFE	; 254
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	41 d8       	rcall	.-3966   	; 0x18a <vListInsert>
    1108:	16 c0       	rjmp	.+44     	; 0x1136 <prvAddCurrentTaskToDelayedList+0x64>
    110a:	60 91 b3 07 	lds	r22, 0x07B3
    110e:	70 91 b4 07 	lds	r23, 0x07B4
    1112:	80 91 7b 07 	lds	r24, 0x077B
    1116:	90 91 7c 07 	lds	r25, 0x077C
    111a:	6e 5f       	subi	r22, 0xFE	; 254
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	35 d8       	rcall	.-3990   	; 0x18a <vListInsert>
    1120:	80 91 38 01 	lds	r24, 0x0138
    1124:	90 91 39 01 	lds	r25, 0x0139
    1128:	c8 17       	cp	r28, r24
    112a:	d9 07       	cpc	r29, r25
    112c:	20 f4       	brcc	.+8      	; 0x1136 <prvAddCurrentTaskToDelayedList+0x64>
    112e:	d0 93 39 01 	sts	0x0139, r29
    1132:	c0 93 38 01 	sts	0x0138, r28
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	08 95       	ret

0000113c <xTaskGenericCreate>:
    113c:	4f 92       	push	r4
    113e:	5f 92       	push	r5
    1140:	6f 92       	push	r6
    1142:	7f 92       	push	r7
    1144:	8f 92       	push	r8
    1146:	9f 92       	push	r9
    1148:	af 92       	push	r10
    114a:	bf 92       	push	r11
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	5c 01       	movw	r10, r24
    115e:	4b 01       	movw	r8, r22
    1160:	3a 01       	movw	r6, r20
    1162:	29 01       	movw	r4, r18
    1164:	81 e2       	ldi	r24, 0x21	; 33
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    116c:	ec 01       	movw	r28, r24
    116e:	89 2b       	or	r24, r25
    1170:	09 f4       	brne	.+2      	; 0x1174 <xTaskGenericCreate+0x38>
    1172:	d3 c0       	rjmp	.+422    	; 0x131a <xTaskGenericCreate+0x1de>
    1174:	c1 14       	cp	r12, r1
    1176:	d1 04       	cpc	r13, r1
    1178:	09 f0       	breq	.+2      	; 0x117c <xTaskGenericCreate+0x40>
    117a:	cb c0       	rjmp	.+406    	; 0x1312 <xTaskGenericCreate+0x1d6>
    117c:	c3 01       	movw	r24, r6
    117e:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    1182:	98 8f       	std	Y+24, r25	; 0x18
    1184:	8f 8b       	std	Y+23, r24	; 0x17
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	21 f4       	brne	.+8      	; 0x1192 <xTaskGenericCreate+0x56>
    118a:	ce 01       	movw	r24, r28
    118c:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
    1190:	c4 c0       	rjmp	.+392    	; 0x131a <xTaskGenericCreate+0x1de>
    1192:	a3 01       	movw	r20, r6
    1194:	65 ea       	ldi	r22, 0xA5	; 165
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	e6 d5       	rcall	.+3020   	; 0x1d66 <memset>
    119a:	93 01       	movw	r18, r6
    119c:	21 50       	subi	r18, 0x01	; 1
    119e:	31 09       	sbc	r19, r1
    11a0:	8f 89       	ldd	r24, Y+23	; 0x17
    11a2:	98 8d       	ldd	r25, Y+24	; 0x18
    11a4:	3c 01       	movw	r6, r24
    11a6:	62 0e       	add	r6, r18
    11a8:	73 1e       	adc	r7, r19
    11aa:	48 e0       	ldi	r20, 0x08	; 8
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	b4 01       	movw	r22, r8
    11b0:	ce 01       	movw	r24, r28
    11b2:	49 96       	adiw	r24, 0x19	; 25
    11b4:	df d5       	rcall	.+3006   	; 0x1d74 <strncpy>
    11b6:	18 a2       	std	Y+32, r1	; 0x20
    11b8:	10 2f       	mov	r17, r16
    11ba:	04 30       	cpi	r16, 0x04	; 4
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <xTaskGenericCreate+0x84>
    11be:	13 e0       	ldi	r17, 0x03	; 3
    11c0:	1e 8b       	std	Y+22, r17	; 0x16
    11c2:	6e 01       	movw	r12, r28
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	c8 0e       	add	r12, r24
    11c8:	d1 1c       	adc	r13, r1
    11ca:	c6 01       	movw	r24, r12
    11cc:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialiseItem>
    11d0:	ce 01       	movw	r24, r28
    11d2:	0c 96       	adiw	r24, 0x0c	; 12
    11d4:	0e 94 9a 00 	call	0x134	; 0x134 <vListInitialiseItem>
    11d8:	d9 87       	std	Y+9, r29	; 0x09
    11da:	c8 87       	std	Y+8, r28	; 0x08
    11dc:	84 e0       	ldi	r24, 0x04	; 4
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	81 1b       	sub	r24, r17
    11e2:	91 09       	sbc	r25, r1
    11e4:	9d 87       	std	Y+13, r25	; 0x0d
    11e6:	8c 87       	std	Y+12, r24	; 0x0c
    11e8:	db 8b       	std	Y+19, r29	; 0x13
    11ea:	ca 8b       	std	Y+18, r28	; 0x12
    11ec:	a2 01       	movw	r20, r4
    11ee:	b5 01       	movw	r22, r10
    11f0:	c3 01       	movw	r24, r6
    11f2:	16 de       	rcall	.-980    	; 0xe20 <pxPortInitialiseStack>
    11f4:	99 83       	std	Y+1, r25	; 0x01
    11f6:	88 83       	st	Y, r24
    11f8:	e1 14       	cp	r14, r1
    11fa:	f1 04       	cpc	r15, r1
    11fc:	19 f0       	breq	.+6      	; 0x1204 <xTaskGenericCreate+0xc8>
    11fe:	f7 01       	movw	r30, r14
    1200:	d1 83       	std	Z+1, r29	; 0x01
    1202:	c0 83       	st	Z, r28
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	0f 92       	push	r0
    120a:	80 91 65 07 	lds	r24, 0x0765
    120e:	8f 5f       	subi	r24, 0xFF	; 255
    1210:	80 93 65 07 	sts	0x0765, r24
    1214:	80 91 b3 07 	lds	r24, 0x07B3
    1218:	90 91 b4 07 	lds	r25, 0x07B4
    121c:	89 2b       	or	r24, r25
    121e:	a9 f5       	brne	.+106    	; 0x128a <xTaskGenericCreate+0x14e>
    1220:	d0 93 b4 07 	sts	0x07B4, r29
    1224:	c0 93 b3 07 	sts	0x07B3, r28
    1228:	80 91 65 07 	lds	r24, 0x0765
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	e1 f5       	brne	.+120    	; 0x12a8 <xTaskGenericCreate+0x16c>
    1230:	8f e8       	ldi	r24, 0x8F	; 143
    1232:	97 e0       	ldi	r25, 0x07	; 7
    1234:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1238:	88 e9       	ldi	r24, 0x98	; 152
    123a:	97 e0       	ldi	r25, 0x07	; 7
    123c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1240:	81 ea       	ldi	r24, 0xA1	; 161
    1242:	97 e0       	ldi	r25, 0x07	; 7
    1244:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1248:	8a ea       	ldi	r24, 0xAA	; 170
    124a:	97 e0       	ldi	r25, 0x07	; 7
    124c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1250:	86 e8       	ldi	r24, 0x86	; 134
    1252:	97 e0       	ldi	r25, 0x07	; 7
    1254:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1258:	8d e7       	ldi	r24, 0x7D	; 125
    125a:	97 e0       	ldi	r25, 0x07	; 7
    125c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1260:	80 e7       	ldi	r24, 0x70	; 112
    1262:	97 e0       	ldi	r25, 0x07	; 7
    1264:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1268:	87 e6       	ldi	r24, 0x67	; 103
    126a:	97 e0       	ldi	r25, 0x07	; 7
    126c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1270:	86 e8       	ldi	r24, 0x86	; 134
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	90 93 7c 07 	sts	0x077C, r25
    1278:	80 93 7b 07 	sts	0x077B, r24
    127c:	8d e7       	ldi	r24, 0x7D	; 125
    127e:	97 e0       	ldi	r25, 0x07	; 7
    1280:	90 93 7a 07 	sts	0x077A, r25
    1284:	80 93 79 07 	sts	0x0779, r24
    1288:	0f c0       	rjmp	.+30     	; 0x12a8 <xTaskGenericCreate+0x16c>
    128a:	80 91 60 07 	lds	r24, 0x0760
    128e:	81 11       	cpse	r24, r1
    1290:	0b c0       	rjmp	.+22     	; 0x12a8 <xTaskGenericCreate+0x16c>
    1292:	e0 91 b3 07 	lds	r30, 0x07B3
    1296:	f0 91 b4 07 	lds	r31, 0x07B4
    129a:	86 89       	ldd	r24, Z+22	; 0x16
    129c:	08 17       	cp	r16, r24
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <xTaskGenericCreate+0x16c>
    12a0:	d0 93 b4 07 	sts	0x07B4, r29
    12a4:	c0 93 b3 07 	sts	0x07B3, r28
    12a8:	8e 89       	ldd	r24, Y+22	; 0x16
    12aa:	90 91 62 07 	lds	r25, 0x0762
    12ae:	98 17       	cp	r25, r24
    12b0:	10 f4       	brcc	.+4      	; 0x12b6 <xTaskGenericCreate+0x17a>
    12b2:	80 93 62 07 	sts	0x0762, r24
    12b6:	90 91 5b 07 	lds	r25, 0x075B
    12ba:	9f 5f       	subi	r25, 0xFF	; 255
    12bc:	90 93 5b 07 	sts	0x075B, r25
    12c0:	90 91 61 07 	lds	r25, 0x0761
    12c4:	98 17       	cp	r25, r24
    12c6:	10 f4       	brcc	.+4      	; 0x12cc <xTaskGenericCreate+0x190>
    12c8:	80 93 61 07 	sts	0x0761, r24
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 01       	movw	r18, r24
    12d0:	22 0f       	add	r18, r18
    12d2:	33 1f       	adc	r19, r19
    12d4:	22 0f       	add	r18, r18
    12d6:	33 1f       	adc	r19, r19
    12d8:	22 0f       	add	r18, r18
    12da:	33 1f       	adc	r19, r19
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	b6 01       	movw	r22, r12
    12e2:	81 57       	subi	r24, 0x71	; 113
    12e4:	98 4f       	sbci	r25, 0xF8	; 248
    12e6:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	80 91 60 07 	lds	r24, 0x0760
    12f2:	88 23       	and	r24, r24
    12f4:	51 f0       	breq	.+20     	; 0x130a <xTaskGenericCreate+0x1ce>
    12f6:	e0 91 b3 07 	lds	r30, 0x07B3
    12fa:	f0 91 b4 07 	lds	r31, 0x07B4
    12fe:	86 89       	ldd	r24, Z+22	; 0x16
    1300:	80 17       	cp	r24, r16
    1302:	28 f4       	brcc	.+10     	; 0x130e <xTaskGenericCreate+0x1d2>
    1304:	33 de       	rcall	.-922    	; 0xf6c <vPortYield>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	09 c0       	rjmp	.+18     	; 0x131c <xTaskGenericCreate+0x1e0>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	07 c0       	rjmp	.+14     	; 0x131c <xTaskGenericCreate+0x1e0>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	05 c0       	rjmp	.+10     	; 0x131c <xTaskGenericCreate+0x1e0>
    1312:	d8 8e       	std	Y+24, r13	; 0x18
    1314:	cf 8a       	std	Y+23, r12	; 0x17
    1316:	c6 01       	movw	r24, r12
    1318:	3c cf       	rjmp	.-392    	; 0x1192 <xTaskGenericCreate+0x56>
    131a:	8f ef       	ldi	r24, 0xFF	; 255
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	6f 90       	pop	r6
    1338:	5f 90       	pop	r5
    133a:	4f 90       	pop	r4
    133c:	08 95       	ret

0000133e <vTaskStartScheduler>:
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	a1 2c       	mov	r10, r1
    134e:	b1 2c       	mov	r11, r1
    1350:	c1 2c       	mov	r12, r1
    1352:	d1 2c       	mov	r13, r1
    1354:	e1 2c       	mov	r14, r1
    1356:	f1 2c       	mov	r15, r1
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	45 e5       	ldi	r20, 0x55	; 85
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	64 e6       	ldi	r22, 0x64	; 100
    1364:	71 e0       	ldi	r23, 0x01	; 1
    1366:	82 e3       	ldi	r24, 0x32	; 50
    1368:	9b e0       	ldi	r25, 0x0B	; 11
    136a:	e8 de       	rcall	.-560    	; 0x113c <xTaskGenericCreate>
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	41 f4       	brne	.+16     	; 0x1380 <vTaskStartScheduler+0x42>
    1370:	f8 94       	cli
    1372:	80 93 60 07 	sts	0x0760, r24
    1376:	10 92 64 07 	sts	0x0764, r1
    137a:	10 92 63 07 	sts	0x0763, r1
    137e:	bc dd       	rcall	.-1160   	; 0xef8 <xPortStartScheduler>
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	df 90       	pop	r13
    1388:	cf 90       	pop	r12
    138a:	bf 90       	pop	r11
    138c:	af 90       	pop	r10
    138e:	08 95       	ret

00001390 <vTaskSuspendAll>:
    1390:	80 91 5f 07 	lds	r24, 0x075F
    1394:	8f 5f       	subi	r24, 0xFF	; 255
    1396:	80 93 5f 07 	sts	0x075F, r24
    139a:	08 95       	ret

0000139c <vTaskIncrementTick>:
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	80 91 5f 07 	lds	r24, 0x075F
    13a8:	81 11       	cpse	r24, r1
    13aa:	b2 c0       	rjmp	.+356    	; 0x1510 <vTaskIncrementTick+0x174>
    13ac:	80 91 63 07 	lds	r24, 0x0763
    13b0:	90 91 64 07 	lds	r25, 0x0764
    13b4:	01 96       	adiw	r24, 0x01	; 1
    13b6:	90 93 64 07 	sts	0x0764, r25
    13ba:	80 93 63 07 	sts	0x0763, r24
    13be:	80 91 63 07 	lds	r24, 0x0763
    13c2:	90 91 64 07 	lds	r25, 0x0764
    13c6:	89 2b       	or	r24, r25
    13c8:	99 f5       	brne	.+102    	; 0x1430 <vTaskIncrementTick+0x94>
    13ca:	80 91 7b 07 	lds	r24, 0x077B
    13ce:	90 91 7c 07 	lds	r25, 0x077C
    13d2:	20 91 79 07 	lds	r18, 0x0779
    13d6:	30 91 7a 07 	lds	r19, 0x077A
    13da:	30 93 7c 07 	sts	0x077C, r19
    13de:	20 93 7b 07 	sts	0x077B, r18
    13e2:	90 93 7a 07 	sts	0x077A, r25
    13e6:	80 93 79 07 	sts	0x0779, r24
    13ea:	80 91 5c 07 	lds	r24, 0x075C
    13ee:	8f 5f       	subi	r24, 0xFF	; 255
    13f0:	80 93 5c 07 	sts	0x075C, r24
    13f4:	e0 91 7b 07 	lds	r30, 0x077B
    13f8:	f0 91 7c 07 	lds	r31, 0x077C
    13fc:	80 81       	ld	r24, Z
    13fe:	81 11       	cpse	r24, r1
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <vTaskIncrementTick+0x74>
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	9f ef       	ldi	r25, 0xFF	; 255
    1406:	90 93 39 01 	sts	0x0139, r25
    140a:	80 93 38 01 	sts	0x0138, r24
    140e:	10 c0       	rjmp	.+32     	; 0x1430 <vTaskIncrementTick+0x94>
    1410:	e0 91 7b 07 	lds	r30, 0x077B
    1414:	f0 91 7c 07 	lds	r31, 0x077C
    1418:	05 80       	ldd	r0, Z+5	; 0x05
    141a:	f6 81       	ldd	r31, Z+6	; 0x06
    141c:	e0 2d       	mov	r30, r0
    141e:	06 80       	ldd	r0, Z+6	; 0x06
    1420:	f7 81       	ldd	r31, Z+7	; 0x07
    1422:	e0 2d       	mov	r30, r0
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	90 93 39 01 	sts	0x0139, r25
    142c:	80 93 38 01 	sts	0x0138, r24
    1430:	20 91 63 07 	lds	r18, 0x0763
    1434:	30 91 64 07 	lds	r19, 0x0764
    1438:	80 91 38 01 	lds	r24, 0x0138
    143c:	90 91 39 01 	lds	r25, 0x0139
    1440:	28 17       	cp	r18, r24
    1442:	39 07       	cpc	r19, r25
    1444:	08 f4       	brcc	.+2      	; 0x1448 <vTaskIncrementTick+0xac>
    1446:	69 c0       	rjmp	.+210    	; 0x151a <vTaskIncrementTick+0x17e>
    1448:	e0 91 7b 07 	lds	r30, 0x077B
    144c:	f0 91 7c 07 	lds	r31, 0x077C
    1450:	80 81       	ld	r24, Z
    1452:	88 23       	and	r24, r24
    1454:	99 f0       	breq	.+38     	; 0x147c <vTaskIncrementTick+0xe0>
    1456:	e0 91 7b 07 	lds	r30, 0x077B
    145a:	f0 91 7c 07 	lds	r31, 0x077C
    145e:	05 80       	ldd	r0, Z+5	; 0x05
    1460:	f6 81       	ldd	r31, Z+6	; 0x06
    1462:	e0 2d       	mov	r30, r0
    1464:	c6 81       	ldd	r28, Z+6	; 0x06
    1466:	d7 81       	ldd	r29, Z+7	; 0x07
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	9b 81       	ldd	r25, Y+3	; 0x03
    146c:	20 91 63 07 	lds	r18, 0x0763
    1470:	30 91 64 07 	lds	r19, 0x0764
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	f8 f4       	brcc	.+62     	; 0x14b8 <vTaskIncrementTick+0x11c>
    147a:	19 c0       	rjmp	.+50     	; 0x14ae <vTaskIncrementTick+0x112>
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	9f ef       	ldi	r25, 0xFF	; 255
    1480:	90 93 39 01 	sts	0x0139, r25
    1484:	80 93 38 01 	sts	0x0138, r24
    1488:	48 c0       	rjmp	.+144    	; 0x151a <vTaskIncrementTick+0x17e>
    148a:	e0 91 7b 07 	lds	r30, 0x077B
    148e:	f0 91 7c 07 	lds	r31, 0x077C
    1492:	05 80       	ldd	r0, Z+5	; 0x05
    1494:	f6 81       	ldd	r31, Z+6	; 0x06
    1496:	e0 2d       	mov	r30, r0
    1498:	c6 81       	ldd	r28, Z+6	; 0x06
    149a:	d7 81       	ldd	r29, Z+7	; 0x07
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	9b 81       	ldd	r25, Y+3	; 0x03
    14a0:	20 91 63 07 	lds	r18, 0x0763
    14a4:	30 91 64 07 	lds	r19, 0x0764
    14a8:	28 17       	cp	r18, r24
    14aa:	39 07       	cpc	r19, r25
    14ac:	28 f4       	brcc	.+10     	; 0x14b8 <vTaskIncrementTick+0x11c>
    14ae:	90 93 39 01 	sts	0x0139, r25
    14b2:	80 93 38 01 	sts	0x0138, r24
    14b6:	31 c0       	rjmp	.+98     	; 0x151a <vTaskIncrementTick+0x17e>
    14b8:	8e 01       	movw	r16, r28
    14ba:	0e 5f       	subi	r16, 0xFE	; 254
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	c8 01       	movw	r24, r16
    14c0:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    14c4:	8c 89       	ldd	r24, Y+20	; 0x14
    14c6:	9d 89       	ldd	r25, Y+21	; 0x15
    14c8:	89 2b       	or	r24, r25
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <vTaskIncrementTick+0x138>
    14cc:	ce 01       	movw	r24, r28
    14ce:	0c 96       	adiw	r24, 0x0c	; 12
    14d0:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    14d4:	2e 89       	ldd	r18, Y+22	; 0x16
    14d6:	80 91 61 07 	lds	r24, 0x0761
    14da:	82 17       	cp	r24, r18
    14dc:	10 f4       	brcc	.+4      	; 0x14e2 <vTaskIncrementTick+0x146>
    14de:	20 93 61 07 	sts	0x0761, r18
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	c9 01       	movw	r24, r18
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	b8 01       	movw	r22, r16
    14f8:	81 57       	subi	r24, 0x71	; 113
    14fa:	98 4f       	sbci	r25, 0xF8	; 248
    14fc:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1500:	e0 91 7b 07 	lds	r30, 0x077B
    1504:	f0 91 7c 07 	lds	r31, 0x077C
    1508:	80 81       	ld	r24, Z
    150a:	81 11       	cpse	r24, r1
    150c:	be cf       	rjmp	.-132    	; 0x148a <vTaskIncrementTick+0xee>
    150e:	b6 cf       	rjmp	.-148    	; 0x147c <vTaskIncrementTick+0xe0>
    1510:	80 91 5e 07 	lds	r24, 0x075E
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	80 93 5e 07 	sts	0x075E, r24
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <xTaskResumeAll>:
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	0f 92       	push	r0
    153a:	80 91 5f 07 	lds	r24, 0x075F
    153e:	81 50       	subi	r24, 0x01	; 1
    1540:	80 93 5f 07 	sts	0x075F, r24
    1544:	80 91 5f 07 	lds	r24, 0x075F
    1548:	81 11       	cpse	r24, r1
    154a:	62 c0       	rjmp	.+196    	; 0x1610 <xTaskResumeAll+0xec>
    154c:	80 91 65 07 	lds	r24, 0x0765
    1550:	81 11       	cpse	r24, r1
    1552:	32 c0       	rjmp	.+100    	; 0x15b8 <xTaskResumeAll+0x94>
    1554:	60 c0       	rjmp	.+192    	; 0x1616 <xTaskResumeAll+0xf2>
    1556:	d7 01       	movw	r26, r14
    1558:	15 96       	adiw	r26, 0x05	; 5
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	16 97       	sbiw	r26, 0x06	; 6
    1560:	c6 81       	ldd	r28, Z+6	; 0x06
    1562:	d7 81       	ldd	r29, Z+7	; 0x07
    1564:	ce 01       	movw	r24, r28
    1566:	0c 96       	adiw	r24, 0x0c	; 12
    1568:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    156c:	8e 01       	movw	r16, r28
    156e:	0e 5f       	subi	r16, 0xFE	; 254
    1570:	1f 4f       	sbci	r17, 0xFF	; 255
    1572:	c8 01       	movw	r24, r16
    1574:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    1578:	2e 89       	ldd	r18, Y+22	; 0x16
    157a:	80 91 61 07 	lds	r24, 0x0761
    157e:	82 17       	cp	r24, r18
    1580:	10 f4       	brcc	.+4      	; 0x1586 <xTaskResumeAll+0x62>
    1582:	20 93 61 07 	sts	0x0761, r18
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	b8 01       	movw	r22, r16
    159c:	81 57       	subi	r24, 0x71	; 113
    159e:	98 4f       	sbci	r25, 0xF8	; 248
    15a0:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    15a4:	e0 91 b3 07 	lds	r30, 0x07B3
    15a8:	f0 91 b4 07 	lds	r31, 0x07B4
    15ac:	9e 89       	ldd	r25, Y+22	; 0x16
    15ae:	86 89       	ldd	r24, Z+22	; 0x16
    15b0:	98 17       	cp	r25, r24
    15b2:	58 f0       	brcs	.+22     	; 0x15ca <xTaskResumeAll+0xa6>
    15b4:	dc 2c       	mov	r13, r12
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <xTaskResumeAll+0xa6>
    15b8:	d1 2c       	mov	r13, r1
    15ba:	0f 2e       	mov	r0, r31
    15bc:	f0 e7       	ldi	r31, 0x70	; 112
    15be:	ef 2e       	mov	r14, r31
    15c0:	f7 e0       	ldi	r31, 0x07	; 7
    15c2:	ff 2e       	mov	r15, r31
    15c4:	f0 2d       	mov	r31, r0
    15c6:	cc 24       	eor	r12, r12
    15c8:	c3 94       	inc	r12
    15ca:	f7 01       	movw	r30, r14
    15cc:	80 81       	ld	r24, Z
    15ce:	81 11       	cpse	r24, r1
    15d0:	c2 cf       	rjmp	.-124    	; 0x1556 <xTaskResumeAll+0x32>
    15d2:	80 91 5e 07 	lds	r24, 0x075E
    15d6:	88 23       	and	r24, r24
    15d8:	79 f0       	breq	.+30     	; 0x15f8 <xTaskResumeAll+0xd4>
    15da:	80 91 5e 07 	lds	r24, 0x075E
    15de:	88 23       	and	r24, r24
    15e0:	91 f0       	breq	.+36     	; 0x1606 <xTaskResumeAll+0xe2>
    15e2:	dc de       	rcall	.-584    	; 0x139c <vTaskIncrementTick>
    15e4:	80 91 5e 07 	lds	r24, 0x075E
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	80 93 5e 07 	sts	0x075E, r24
    15ee:	80 91 5e 07 	lds	r24, 0x075E
    15f2:	81 11       	cpse	r24, r1
    15f4:	f6 cf       	rjmp	.-20     	; 0x15e2 <xTaskResumeAll+0xbe>
    15f6:	07 c0       	rjmp	.+14     	; 0x1606 <xTaskResumeAll+0xe2>
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	df 16       	cp	r13, r31
    15fc:	21 f0       	breq	.+8      	; 0x1606 <xTaskResumeAll+0xe2>
    15fe:	80 91 5d 07 	lds	r24, 0x075D
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	39 f4       	brne	.+14     	; 0x1614 <xTaskResumeAll+0xf0>
    1606:	10 92 5d 07 	sts	0x075D, r1
    160a:	b0 dc       	rcall	.-1696   	; 0xf6c <vPortYield>
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <xTaskResumeAll+0xf2>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <xTaskResumeAll+0xf2>
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	0f 90       	pop	r0
    1618:	0f be       	out	0x3f, r0	; 63
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	ff 90       	pop	r15
    1624:	ef 90       	pop	r14
    1626:	df 90       	pop	r13
    1628:	cf 90       	pop	r12
    162a:	08 95       	ret

0000162c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    162c:	cf 93       	push	r28
    162e:	df 93       	push	r29
    1630:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1632:	89 2b       	or	r24, r25
    1634:	99 f0       	breq	.+38     	; 0x165c <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    1636:	ac de       	rcall	.-680    	; 0x1390 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1638:	80 91 63 07 	lds	r24, 0x0763
    163c:	90 91 64 07 	lds	r25, 0x0764
    1640:	c8 0f       	add	r28, r24
    1642:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    1644:	80 91 b3 07 	lds	r24, 0x07B3
    1648:	90 91 b4 07 	lds	r25, 0x07B4
    164c:	02 96       	adiw	r24, 0x02	; 2
    164e:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1652:	ce 01       	movw	r24, r28
    1654:	3e dd       	rcall	.-1412   	; 0x10d2 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    1656:	66 df       	rcall	.-308    	; 0x1524 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1658:	81 11       	cpse	r24, r1
    165a:	01 c0       	rjmp	.+2      	; 0x165e <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    165c:	87 dc       	rcall	.-1778   	; 0xf6c <vPortYield>
		}
	}
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1664:	0f 2e       	mov	r0, r31
    1666:	f7 e6       	ldi	r31, 0x67	; 103
    1668:	ef 2e       	mov	r14, r31
    166a:	f7 e0       	ldi	r31, 0x07	; 7
    166c:	ff 2e       	mov	r15, r31
    166e:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1670:	cf e8       	ldi	r28, 0x8F	; 143
    1672:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    1674:	80 91 66 07 	lds	r24, 0x0766
    1678:	88 23       	and	r24, r24
    167a:	41 f1       	breq	.+80     	; 0x16cc <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    167c:	89 de       	rcall	.-750    	; 0x1390 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    167e:	d7 01       	movw	r26, r14
    1680:	1c 91       	ld	r17, X
			xTaskResumeAll();
    1682:	50 df       	rcall	.-352    	; 0x1524 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1684:	11 23       	and	r17, r17
    1686:	11 f1       	breq	.+68     	; 0x16cc <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    168e:	d7 01       	movw	r26, r14
    1690:	15 96       	adiw	r26, 0x05	; 5
    1692:	ed 91       	ld	r30, X+
    1694:	fc 91       	ld	r31, X
    1696:	16 97       	sbiw	r26, 0x06	; 6
    1698:	06 81       	ldd	r16, Z+6	; 0x06
    169a:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    169c:	c8 01       	movw	r24, r16
    169e:	02 96       	adiw	r24, 0x02	; 2
    16a0:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
					--uxCurrentNumberOfTasks;
    16a4:	80 91 65 07 	lds	r24, 0x0765
    16a8:	81 50       	subi	r24, 0x01	; 1
    16aa:	80 93 65 07 	sts	0x0765, r24
					--uxTasksDeleted;
    16ae:	80 91 66 07 	lds	r24, 0x0766
    16b2:	81 50       	subi	r24, 0x01	; 1
    16b4:	80 93 66 07 	sts	0x0766, r24
				}
				taskEXIT_CRITICAL();
    16b8:	0f 90       	pop	r0
    16ba:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    16bc:	f8 01       	movw	r30, r16
    16be:	87 89       	ldd	r24, Z+23	; 0x17
    16c0:	90 8d       	ldd	r25, Z+24	; 0x18
    16c2:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
		vPortFree( pxTCB );
    16c6:	c8 01       	movw	r24, r16
    16c8:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    16cc:	88 81       	ld	r24, Y
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	88 f2       	brcs	.-94     	; 0x1674 <prvIdleTask+0x10>
			{
				taskYIELD();
    16d2:	4c dc       	rcall	.-1896   	; 0xf6c <vPortYield>
    16d4:	cf cf       	rjmp	.-98     	; 0x1674 <prvIdleTask+0x10>

000016d6 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    16d6:	80 91 5f 07 	lds	r24, 0x075F
    16da:	81 11       	cpse	r24, r1
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    16de:	80 91 61 07 	lds	r24, 0x0761
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	fc 01       	movw	r30, r24
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	ee 0f       	add	r30, r30
    16ec:	ff 1f       	adc	r31, r31
    16ee:	ee 0f       	add	r30, r30
    16f0:	ff 1f       	adc	r31, r31
    16f2:	8e 0f       	add	r24, r30
    16f4:	9f 1f       	adc	r25, r31
    16f6:	fc 01       	movw	r30, r24
    16f8:	e1 57       	subi	r30, 0x71	; 113
    16fa:	f8 4f       	sbci	r31, 0xF8	; 248
    16fc:	80 81       	ld	r24, Z
    16fe:	88 23       	and	r24, r24
    1700:	29 f0       	breq	.+10     	; 0x170c <vTaskSwitchContext+0x36>
    1702:	1b c0       	rjmp	.+54     	; 0x173a <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 5d 07 	sts	0x075D, r24
    170a:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    170c:	80 91 61 07 	lds	r24, 0x0761
    1710:	81 50       	subi	r24, 0x01	; 1
    1712:	80 93 61 07 	sts	0x0761, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1716:	80 91 61 07 	lds	r24, 0x0761
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	fc 01       	movw	r30, r24
    171e:	ee 0f       	add	r30, r30
    1720:	ff 1f       	adc	r31, r31
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	8e 0f       	add	r24, r30
    172c:	9f 1f       	adc	r25, r31
    172e:	fc 01       	movw	r30, r24
    1730:	e1 57       	subi	r30, 0x71	; 113
    1732:	f8 4f       	sbci	r31, 0xF8	; 248
    1734:	80 81       	ld	r24, Z
    1736:	88 23       	and	r24, r24
    1738:	49 f3       	breq	.-46     	; 0x170c <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    173a:	80 91 61 07 	lds	r24, 0x0761
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 01       	movw	r18, r24
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	28 0f       	add	r18, r24
    1750:	39 1f       	adc	r19, r25
    1752:	d9 01       	movw	r26, r18
    1754:	a1 57       	subi	r26, 0x71	; 113
    1756:	b8 4f       	sbci	r27, 0xF8	; 248
    1758:	11 96       	adiw	r26, 0x01	; 1
    175a:	ed 91       	ld	r30, X+
    175c:	fc 91       	ld	r31, X
    175e:	12 97       	sbiw	r26, 0x02	; 2
    1760:	02 80       	ldd	r0, Z+2	; 0x02
    1762:	f3 81       	ldd	r31, Z+3	; 0x03
    1764:	e0 2d       	mov	r30, r0
    1766:	12 96       	adiw	r26, 0x02	; 2
    1768:	fc 93       	st	X, r31
    176a:	ee 93       	st	-X, r30
    176c:	11 97       	sbiw	r26, 0x01	; 1
    176e:	2e 56       	subi	r18, 0x6E	; 110
    1770:	38 4f       	sbci	r19, 0xF8	; 248
    1772:	e2 17       	cp	r30, r18
    1774:	f3 07       	cpc	r31, r19
    1776:	29 f4       	brne	.+10     	; 0x1782 <vTaskSwitchContext+0xac>
    1778:	22 81       	ldd	r18, Z+2	; 0x02
    177a:	33 81       	ldd	r19, Z+3	; 0x03
    177c:	fd 01       	movw	r30, r26
    177e:	32 83       	std	Z+2, r19	; 0x02
    1780:	21 83       	std	Z+1, r18	; 0x01
    1782:	fc 01       	movw	r30, r24
    1784:	ee 0f       	add	r30, r30
    1786:	ff 1f       	adc	r31, r31
    1788:	ee 0f       	add	r30, r30
    178a:	ff 1f       	adc	r31, r31
    178c:	ee 0f       	add	r30, r30
    178e:	ff 1f       	adc	r31, r31
    1790:	8e 0f       	add	r24, r30
    1792:	9f 1f       	adc	r25, r31
    1794:	fc 01       	movw	r30, r24
    1796:	e1 57       	subi	r30, 0x71	; 113
    1798:	f8 4f       	sbci	r31, 0xF8	; 248
    179a:	01 80       	ldd	r0, Z+1	; 0x01
    179c:	f2 81       	ldd	r31, Z+2	; 0x02
    179e:	e0 2d       	mov	r30, r0
    17a0:	86 81       	ldd	r24, Z+6	; 0x06
    17a2:	97 81       	ldd	r25, Z+7	; 0x07
    17a4:	90 93 b4 07 	sts	0x07B4, r25
    17a8:	80 93 b3 07 	sts	0x07B3, r24
    17ac:	08 95       	ret

000017ae <__subsf3>:
    17ae:	50 58       	subi	r21, 0x80	; 128

000017b0 <__addsf3>:
    17b0:	bb 27       	eor	r27, r27
    17b2:	aa 27       	eor	r26, r26
    17b4:	0e d0       	rcall	.+28     	; 0x17d2 <__addsf3x>
    17b6:	fb c0       	rjmp	.+502    	; 0x19ae <__fp_round>
    17b8:	ec d0       	rcall	.+472    	; 0x1992 <__fp_pscA>
    17ba:	30 f0       	brcs	.+12     	; 0x17c8 <__addsf3+0x18>
    17bc:	f1 d0       	rcall	.+482    	; 0x19a0 <__fp_pscB>
    17be:	20 f0       	brcs	.+8      	; 0x17c8 <__addsf3+0x18>
    17c0:	31 f4       	brne	.+12     	; 0x17ce <__addsf3+0x1e>
    17c2:	9f 3f       	cpi	r25, 0xFF	; 255
    17c4:	11 f4       	brne	.+4      	; 0x17ca <__addsf3+0x1a>
    17c6:	1e f4       	brtc	.+6      	; 0x17ce <__addsf3+0x1e>
    17c8:	e1 c0       	rjmp	.+450    	; 0x198c <__fp_nan>
    17ca:	0e f4       	brtc	.+2      	; 0x17ce <__addsf3+0x1e>
    17cc:	e0 95       	com	r30
    17ce:	e7 fb       	bst	r30, 7
    17d0:	c9 c0       	rjmp	.+402    	; 0x1964 <__fp_inf>

000017d2 <__addsf3x>:
    17d2:	e9 2f       	mov	r30, r25
    17d4:	fd d0       	rcall	.+506    	; 0x19d0 <__fp_split3>
    17d6:	80 f3       	brcs	.-32     	; 0x17b8 <__addsf3+0x8>
    17d8:	ba 17       	cp	r27, r26
    17da:	62 07       	cpc	r22, r18
    17dc:	73 07       	cpc	r23, r19
    17de:	84 07       	cpc	r24, r20
    17e0:	95 07       	cpc	r25, r21
    17e2:	18 f0       	brcs	.+6      	; 0x17ea <__addsf3x+0x18>
    17e4:	71 f4       	brne	.+28     	; 0x1802 <__addsf3x+0x30>
    17e6:	9e f5       	brtc	.+102    	; 0x184e <__addsf3x+0x7c>
    17e8:	15 c1       	rjmp	.+554    	; 0x1a14 <__fp_zero>
    17ea:	0e f4       	brtc	.+2      	; 0x17ee <__addsf3x+0x1c>
    17ec:	e0 95       	com	r30
    17ee:	0b 2e       	mov	r0, r27
    17f0:	ba 2f       	mov	r27, r26
    17f2:	a0 2d       	mov	r26, r0
    17f4:	0b 01       	movw	r0, r22
    17f6:	b9 01       	movw	r22, r18
    17f8:	90 01       	movw	r18, r0
    17fa:	0c 01       	movw	r0, r24
    17fc:	ca 01       	movw	r24, r20
    17fe:	a0 01       	movw	r20, r0
    1800:	11 24       	eor	r1, r1
    1802:	ff 27       	eor	r31, r31
    1804:	59 1b       	sub	r21, r25
    1806:	99 f0       	breq	.+38     	; 0x182e <__addsf3x+0x5c>
    1808:	59 3f       	cpi	r21, 0xF9	; 249
    180a:	50 f4       	brcc	.+20     	; 0x1820 <__addsf3x+0x4e>
    180c:	50 3e       	cpi	r21, 0xE0	; 224
    180e:	68 f1       	brcs	.+90     	; 0x186a <__addsf3x+0x98>
    1810:	1a 16       	cp	r1, r26
    1812:	f0 40       	sbci	r31, 0x00	; 0
    1814:	a2 2f       	mov	r26, r18
    1816:	23 2f       	mov	r18, r19
    1818:	34 2f       	mov	r19, r20
    181a:	44 27       	eor	r20, r20
    181c:	58 5f       	subi	r21, 0xF8	; 248
    181e:	f3 cf       	rjmp	.-26     	; 0x1806 <__addsf3x+0x34>
    1820:	46 95       	lsr	r20
    1822:	37 95       	ror	r19
    1824:	27 95       	ror	r18
    1826:	a7 95       	ror	r26
    1828:	f0 40       	sbci	r31, 0x00	; 0
    182a:	53 95       	inc	r21
    182c:	c9 f7       	brne	.-14     	; 0x1820 <__addsf3x+0x4e>
    182e:	7e f4       	brtc	.+30     	; 0x184e <__addsf3x+0x7c>
    1830:	1f 16       	cp	r1, r31
    1832:	ba 0b       	sbc	r27, r26
    1834:	62 0b       	sbc	r22, r18
    1836:	73 0b       	sbc	r23, r19
    1838:	84 0b       	sbc	r24, r20
    183a:	ba f0       	brmi	.+46     	; 0x186a <__addsf3x+0x98>
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	a1 f0       	breq	.+40     	; 0x1868 <__addsf3x+0x96>
    1840:	ff 0f       	add	r31, r31
    1842:	bb 1f       	adc	r27, r27
    1844:	66 1f       	adc	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	c2 f7       	brpl	.-16     	; 0x183c <__addsf3x+0x6a>
    184c:	0e c0       	rjmp	.+28     	; 0x186a <__addsf3x+0x98>
    184e:	ba 0f       	add	r27, r26
    1850:	62 1f       	adc	r22, r18
    1852:	73 1f       	adc	r23, r19
    1854:	84 1f       	adc	r24, r20
    1856:	48 f4       	brcc	.+18     	; 0x186a <__addsf3x+0x98>
    1858:	87 95       	ror	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	f7 95       	ror	r31
    1862:	9e 3f       	cpi	r25, 0xFE	; 254
    1864:	08 f0       	brcs	.+2      	; 0x1868 <__addsf3x+0x96>
    1866:	b3 cf       	rjmp	.-154    	; 0x17ce <__addsf3+0x1e>
    1868:	93 95       	inc	r25
    186a:	88 0f       	add	r24, r24
    186c:	08 f0       	brcs	.+2      	; 0x1870 <__addsf3x+0x9e>
    186e:	99 27       	eor	r25, r25
    1870:	ee 0f       	add	r30, r30
    1872:	97 95       	ror	r25
    1874:	87 95       	ror	r24
    1876:	08 95       	ret

00001878 <__cmpsf2>:
    1878:	51 d0       	rcall	.+162    	; 0x191c <__fp_cmp>
    187a:	08 f4       	brcc	.+2      	; 0x187e <__cmpsf2+0x6>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	08 95       	ret
    1880:	88 d0       	rcall	.+272    	; 0x1992 <__fp_pscA>
    1882:	18 f0       	brcs	.+6      	; 0x188a <__cmpsf2+0x12>
    1884:	11 f0       	breq	.+4      	; 0x188a <__cmpsf2+0x12>
    1886:	8c d0       	rcall	.+280    	; 0x19a0 <__fp_pscB>
    1888:	38 f4       	brcc	.+14     	; 0x1898 <fmod+0xa>
    188a:	80 c0       	rjmp	.+256    	; 0x198c <__fp_nan>
    188c:	c4 c0       	rjmp	.+392    	; 0x1a16 <__fp_szero>

0000188e <fmod>:
    188e:	e9 2f       	mov	r30, r25
    1890:	9f d0       	rcall	.+318    	; 0x19d0 <__fp_split3>
    1892:	b0 f3       	brcs	.-20     	; 0x1880 <__cmpsf2+0x8>
    1894:	55 23       	and	r21, r21
    1896:	c9 f3       	breq	.-14     	; 0x188a <__cmpsf2+0x12>
    1898:	e7 fb       	bst	r30, 7
    189a:	62 17       	cp	r22, r18
    189c:	73 07       	cpc	r23, r19
    189e:	84 07       	cpc	r24, r20
    18a0:	95 07       	cpc	r25, r21
    18a2:	a8 f1       	brcs	.+106    	; 0x190e <fmod+0x80>
    18a4:	99 f3       	breq	.-26     	; 0x188c <__cmpsf2+0x14>
    18a6:	e9 2f       	mov	r30, r25
    18a8:	ff 27       	eor	r31, r31
    18aa:	88 23       	and	r24, r24
    18ac:	2a f0       	brmi	.+10     	; 0x18b8 <fmod+0x2a>
    18ae:	31 97       	sbiw	r30, 0x01	; 1
    18b0:	66 0f       	add	r22, r22
    18b2:	77 1f       	adc	r23, r23
    18b4:	88 1f       	adc	r24, r24
    18b6:	da f7       	brpl	.-10     	; 0x18ae <fmod+0x20>
    18b8:	95 2f       	mov	r25, r21
    18ba:	55 27       	eor	r21, r21
    18bc:	44 23       	and	r20, r20
    18be:	32 f0       	brmi	.+12     	; 0x18cc <fmod+0x3e>
    18c0:	91 50       	subi	r25, 0x01	; 1
    18c2:	50 40       	sbci	r21, 0x00	; 0
    18c4:	22 0f       	add	r18, r18
    18c6:	33 1f       	adc	r19, r19
    18c8:	44 1f       	adc	r20, r20
    18ca:	d2 f7       	brpl	.-12     	; 0x18c0 <fmod+0x32>
    18cc:	bb 27       	eor	r27, r27
    18ce:	e9 1b       	sub	r30, r25
    18d0:	f5 0b       	sbc	r31, r21
    18d2:	62 1b       	sub	r22, r18
    18d4:	73 0b       	sbc	r23, r19
    18d6:	84 0b       	sbc	r24, r20
    18d8:	b1 09       	sbc	r27, r1
    18da:	c1 f2       	breq	.-80     	; 0x188c <__cmpsf2+0x14>
    18dc:	22 f4       	brpl	.+8      	; 0x18e6 <fmod+0x58>
    18de:	62 0f       	add	r22, r18
    18e0:	73 1f       	adc	r23, r19
    18e2:	84 1f       	adc	r24, r20
    18e4:	b1 1d       	adc	r27, r1
    18e6:	31 97       	sbiw	r30, 0x01	; 1
    18e8:	2a f0       	brmi	.+10     	; 0x18f4 <fmod+0x66>
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	bb 1f       	adc	r27, r27
    18f2:	ef cf       	rjmp	.-34     	; 0x18d2 <fmod+0x44>
    18f4:	91 50       	subi	r25, 0x01	; 1
    18f6:	50 40       	sbci	r21, 0x00	; 0
    18f8:	5a f0       	brmi	.+22     	; 0x1910 <fmod+0x82>
    18fa:	41 f0       	breq	.+16     	; 0x190c <fmod+0x7e>
    18fc:	88 23       	and	r24, r24
    18fe:	32 f0       	brmi	.+12     	; 0x190c <fmod+0x7e>
    1900:	66 0f       	add	r22, r22
    1902:	77 1f       	adc	r23, r23
    1904:	88 1f       	adc	r24, r24
    1906:	91 50       	subi	r25, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	c1 f7       	brne	.-16     	; 0x18fc <fmod+0x6e>
    190c:	93 95       	inc	r25
    190e:	30 c0       	rjmp	.+96     	; 0x1970 <__fp_mpack>
    1910:	86 95       	lsr	r24
    1912:	77 95       	ror	r23
    1914:	67 95       	ror	r22
    1916:	9f 5f       	subi	r25, 0xFF	; 255
    1918:	d9 f7       	brne	.-10     	; 0x1910 <fmod+0x82>
    191a:	f8 cf       	rjmp	.-16     	; 0x190c <fmod+0x7e>

0000191c <__fp_cmp>:
    191c:	99 0f       	add	r25, r25
    191e:	00 08       	sbc	r0, r0
    1920:	55 0f       	add	r21, r21
    1922:	aa 0b       	sbc	r26, r26
    1924:	e0 e8       	ldi	r30, 0x80	; 128
    1926:	fe ef       	ldi	r31, 0xFE	; 254
    1928:	16 16       	cp	r1, r22
    192a:	17 06       	cpc	r1, r23
    192c:	e8 07       	cpc	r30, r24
    192e:	f9 07       	cpc	r31, r25
    1930:	c0 f0       	brcs	.+48     	; 0x1962 <__fp_cmp+0x46>
    1932:	12 16       	cp	r1, r18
    1934:	13 06       	cpc	r1, r19
    1936:	e4 07       	cpc	r30, r20
    1938:	f5 07       	cpc	r31, r21
    193a:	98 f0       	brcs	.+38     	; 0x1962 <__fp_cmp+0x46>
    193c:	62 1b       	sub	r22, r18
    193e:	73 0b       	sbc	r23, r19
    1940:	84 0b       	sbc	r24, r20
    1942:	95 0b       	sbc	r25, r21
    1944:	39 f4       	brne	.+14     	; 0x1954 <__fp_cmp+0x38>
    1946:	0a 26       	eor	r0, r26
    1948:	61 f0       	breq	.+24     	; 0x1962 <__fp_cmp+0x46>
    194a:	23 2b       	or	r18, r19
    194c:	24 2b       	or	r18, r20
    194e:	25 2b       	or	r18, r21
    1950:	21 f4       	brne	.+8      	; 0x195a <__fp_cmp+0x3e>
    1952:	08 95       	ret
    1954:	0a 26       	eor	r0, r26
    1956:	09 f4       	brne	.+2      	; 0x195a <__fp_cmp+0x3e>
    1958:	a1 40       	sbci	r26, 0x01	; 1
    195a:	a6 95       	lsr	r26
    195c:	8f ef       	ldi	r24, 0xFF	; 255
    195e:	81 1d       	adc	r24, r1
    1960:	81 1d       	adc	r24, r1
    1962:	08 95       	ret

00001964 <__fp_inf>:
    1964:	97 f9       	bld	r25, 7
    1966:	9f 67       	ori	r25, 0x7F	; 127
    1968:	80 e8       	ldi	r24, 0x80	; 128
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	08 95       	ret

00001970 <__fp_mpack>:
    1970:	9f 3f       	cpi	r25, 0xFF	; 255
    1972:	31 f0       	breq	.+12     	; 0x1980 <__fp_mpack_finite+0xc>

00001974 <__fp_mpack_finite>:
    1974:	91 50       	subi	r25, 0x01	; 1
    1976:	20 f4       	brcc	.+8      	; 0x1980 <__fp_mpack_finite+0xc>
    1978:	87 95       	ror	r24
    197a:	77 95       	ror	r23
    197c:	67 95       	ror	r22
    197e:	b7 95       	ror	r27
    1980:	88 0f       	add	r24, r24
    1982:	91 1d       	adc	r25, r1
    1984:	96 95       	lsr	r25
    1986:	87 95       	ror	r24
    1988:	97 f9       	bld	r25, 7
    198a:	08 95       	ret

0000198c <__fp_nan>:
    198c:	9f ef       	ldi	r25, 0xFF	; 255
    198e:	80 ec       	ldi	r24, 0xC0	; 192
    1990:	08 95       	ret

00001992 <__fp_pscA>:
    1992:	00 24       	eor	r0, r0
    1994:	0a 94       	dec	r0
    1996:	16 16       	cp	r1, r22
    1998:	17 06       	cpc	r1, r23
    199a:	18 06       	cpc	r1, r24
    199c:	09 06       	cpc	r0, r25
    199e:	08 95       	ret

000019a0 <__fp_pscB>:
    19a0:	00 24       	eor	r0, r0
    19a2:	0a 94       	dec	r0
    19a4:	12 16       	cp	r1, r18
    19a6:	13 06       	cpc	r1, r19
    19a8:	14 06       	cpc	r1, r20
    19aa:	05 06       	cpc	r0, r21
    19ac:	08 95       	ret

000019ae <__fp_round>:
    19ae:	09 2e       	mov	r0, r25
    19b0:	03 94       	inc	r0
    19b2:	00 0c       	add	r0, r0
    19b4:	11 f4       	brne	.+4      	; 0x19ba <__fp_round+0xc>
    19b6:	88 23       	and	r24, r24
    19b8:	52 f0       	brmi	.+20     	; 0x19ce <__fp_round+0x20>
    19ba:	bb 0f       	add	r27, r27
    19bc:	40 f4       	brcc	.+16     	; 0x19ce <__fp_round+0x20>
    19be:	bf 2b       	or	r27, r31
    19c0:	11 f4       	brne	.+4      	; 0x19c6 <__fp_round+0x18>
    19c2:	60 ff       	sbrs	r22, 0
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__fp_round+0x20>
    19c6:	6f 5f       	subi	r22, 0xFF	; 255
    19c8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ca:	8f 4f       	sbci	r24, 0xFF	; 255
    19cc:	9f 4f       	sbci	r25, 0xFF	; 255
    19ce:	08 95       	ret

000019d0 <__fp_split3>:
    19d0:	57 fd       	sbrc	r21, 7
    19d2:	90 58       	subi	r25, 0x80	; 128
    19d4:	44 0f       	add	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	59 f0       	breq	.+22     	; 0x19f0 <__fp_splitA+0x10>
    19da:	5f 3f       	cpi	r21, 0xFF	; 255
    19dc:	71 f0       	breq	.+28     	; 0x19fa <__fp_splitA+0x1a>
    19de:	47 95       	ror	r20

000019e0 <__fp_splitA>:
    19e0:	88 0f       	add	r24, r24
    19e2:	97 fb       	bst	r25, 7
    19e4:	99 1f       	adc	r25, r25
    19e6:	61 f0       	breq	.+24     	; 0x1a00 <__fp_splitA+0x20>
    19e8:	9f 3f       	cpi	r25, 0xFF	; 255
    19ea:	79 f0       	breq	.+30     	; 0x1a0a <__fp_splitA+0x2a>
    19ec:	87 95       	ror	r24
    19ee:	08 95       	ret
    19f0:	12 16       	cp	r1, r18
    19f2:	13 06       	cpc	r1, r19
    19f4:	14 06       	cpc	r1, r20
    19f6:	55 1f       	adc	r21, r21
    19f8:	f2 cf       	rjmp	.-28     	; 0x19de <__fp_split3+0xe>
    19fa:	46 95       	lsr	r20
    19fc:	f1 df       	rcall	.-30     	; 0x19e0 <__fp_splitA>
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <__fp_splitA+0x30>
    1a00:	16 16       	cp	r1, r22
    1a02:	17 06       	cpc	r1, r23
    1a04:	18 06       	cpc	r1, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	f1 cf       	rjmp	.-30     	; 0x19ec <__fp_splitA+0xc>
    1a0a:	86 95       	lsr	r24
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	61 05       	cpc	r22, r1
    1a10:	08 94       	sec
    1a12:	08 95       	ret

00001a14 <__fp_zero>:
    1a14:	e8 94       	clt

00001a16 <__fp_szero>:
    1a16:	bb 27       	eor	r27, r27
    1a18:	66 27       	eor	r22, r22
    1a1a:	77 27       	eor	r23, r23
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	97 f9       	bld	r25, 7
    1a20:	08 95       	ret

00001a22 <__udivmodqi4>:
    1a22:	99 1b       	sub	r25, r25
    1a24:	79 e0       	ldi	r23, 0x09	; 9
    1a26:	04 c0       	rjmp	.+8      	; 0x1a30 <__udivmodqi4_ep>

00001a28 <__udivmodqi4_loop>:
    1a28:	99 1f       	adc	r25, r25
    1a2a:	96 17       	cp	r25, r22
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <__udivmodqi4_ep>
    1a2e:	96 1b       	sub	r25, r22

00001a30 <__udivmodqi4_ep>:
    1a30:	88 1f       	adc	r24, r24
    1a32:	7a 95       	dec	r23
    1a34:	c9 f7       	brne	.-14     	; 0x1a28 <__udivmodqi4_loop>
    1a36:	80 95       	com	r24
    1a38:	08 95       	ret

00001a3a <__muldi3>:
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	1f 93       	push	r17
    1a40:	0f 93       	push	r16
    1a42:	9a 9d       	mul	r25, r10
    1a44:	f0 2d       	mov	r31, r0
    1a46:	21 9f       	mul	r18, r17
    1a48:	f0 0d       	add	r31, r0
    1a4a:	8b 9d       	mul	r24, r11
    1a4c:	f0 0d       	add	r31, r0
    1a4e:	8a 9d       	mul	r24, r10
    1a50:	e0 2d       	mov	r30, r0
    1a52:	f1 0d       	add	r31, r1
    1a54:	03 9f       	mul	r16, r19
    1a56:	f0 0d       	add	r31, r0
    1a58:	02 9f       	mul	r16, r18
    1a5a:	e0 0d       	add	r30, r0
    1a5c:	f1 1d       	adc	r31, r1
    1a5e:	4e 9d       	mul	r20, r14
    1a60:	e0 0d       	add	r30, r0
    1a62:	f1 1d       	adc	r31, r1
    1a64:	5e 9d       	mul	r21, r14
    1a66:	f0 0d       	add	r31, r0
    1a68:	4f 9d       	mul	r20, r15
    1a6a:	f0 0d       	add	r31, r0
    1a6c:	7f 93       	push	r23
    1a6e:	6f 93       	push	r22
    1a70:	bf 92       	push	r11
    1a72:	af 92       	push	r10
    1a74:	5f 93       	push	r21
    1a76:	4f 93       	push	r20
    1a78:	d5 01       	movw	r26, r10
    1a7a:	39 d0       	rcall	.+114    	; 0x1aee <__umulhisi3>
    1a7c:	8b 01       	movw	r16, r22
    1a7e:	ac 01       	movw	r20, r24
    1a80:	d7 01       	movw	r26, r14
    1a82:	35 d0       	rcall	.+106    	; 0x1aee <__umulhisi3>
    1a84:	eb 01       	movw	r28, r22
    1a86:	e8 0f       	add	r30, r24
    1a88:	f9 1f       	adc	r31, r25
    1a8a:	d6 01       	movw	r26, r12
    1a8c:	1f d0       	rcall	.+62     	; 0x1acc <__muldi3_6>
    1a8e:	2f 91       	pop	r18
    1a90:	3f 91       	pop	r19
    1a92:	d6 01       	movw	r26, r12
    1a94:	2c d0       	rcall	.+88     	; 0x1aee <__umulhisi3>
    1a96:	c6 0f       	add	r28, r22
    1a98:	d7 1f       	adc	r29, r23
    1a9a:	e8 1f       	adc	r30, r24
    1a9c:	f9 1f       	adc	r31, r25
    1a9e:	af 91       	pop	r26
    1aa0:	bf 91       	pop	r27
    1aa2:	14 d0       	rcall	.+40     	; 0x1acc <__muldi3_6>
    1aa4:	2f 91       	pop	r18
    1aa6:	3f 91       	pop	r19
    1aa8:	22 d0       	rcall	.+68     	; 0x1aee <__umulhisi3>
    1aaa:	c6 0f       	add	r28, r22
    1aac:	d7 1f       	adc	r29, r23
    1aae:	e8 1f       	adc	r30, r24
    1ab0:	f9 1f       	adc	r31, r25
    1ab2:	d6 01       	movw	r26, r12
    1ab4:	1c d0       	rcall	.+56     	; 0x1aee <__umulhisi3>
    1ab6:	e6 0f       	add	r30, r22
    1ab8:	f7 1f       	adc	r31, r23
    1aba:	98 01       	movw	r18, r16
    1abc:	be 01       	movw	r22, r28
    1abe:	cf 01       	movw	r24, r30
    1ac0:	11 24       	eor	r1, r1
    1ac2:	0f 91       	pop	r16
    1ac4:	1f 91       	pop	r17
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <__muldi3_6>:
    1acc:	10 d0       	rcall	.+32     	; 0x1aee <__umulhisi3>
    1ace:	46 0f       	add	r20, r22
    1ad0:	57 1f       	adc	r21, r23
    1ad2:	c8 1f       	adc	r28, r24
    1ad4:	d9 1f       	adc	r29, r25
    1ad6:	08 f4       	brcc	.+2      	; 0x1ada <__muldi3_6+0xe>
    1ad8:	31 96       	adiw	r30, 0x01	; 1
    1ada:	08 95       	ret

00001adc <__adddi3>:
    1adc:	2a 0d       	add	r18, r10
    1ade:	3b 1d       	adc	r19, r11
    1ae0:	4c 1d       	adc	r20, r12
    1ae2:	5d 1d       	adc	r21, r13
    1ae4:	6e 1d       	adc	r22, r14
    1ae6:	7f 1d       	adc	r23, r15
    1ae8:	80 1f       	adc	r24, r16
    1aea:	91 1f       	adc	r25, r17
    1aec:	08 95       	ret

00001aee <__umulhisi3>:
    1aee:	a2 9f       	mul	r26, r18
    1af0:	b0 01       	movw	r22, r0
    1af2:	b3 9f       	mul	r27, r19
    1af4:	c0 01       	movw	r24, r0
    1af6:	a3 9f       	mul	r26, r19
    1af8:	70 0d       	add	r23, r0
    1afa:	81 1d       	adc	r24, r1
    1afc:	11 24       	eor	r1, r1
    1afe:	91 1d       	adc	r25, r1
    1b00:	b2 9f       	mul	r27, r18
    1b02:	70 0d       	add	r23, r0
    1b04:	81 1d       	adc	r24, r1
    1b06:	11 24       	eor	r1, r1
    1b08:	91 1d       	adc	r25, r1
    1b0a:	08 95       	ret

00001b0c <malloc>:
    1b0c:	cf 93       	push	r28
    1b0e:	df 93       	push	r29
    1b10:	82 30       	cpi	r24, 0x02	; 2
    1b12:	91 05       	cpc	r25, r1
    1b14:	10 f4       	brcc	.+4      	; 0x1b1a <malloc+0xe>
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	e0 91 c7 07 	lds	r30, 0x07C7
    1b1e:	f0 91 c8 07 	lds	r31, 0x07C8
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	c0 e0       	ldi	r28, 0x00	; 0
    1b28:	d0 e0       	ldi	r29, 0x00	; 0
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	11 f1       	breq	.+68     	; 0x1b72 <malloc+0x66>
    1b2e:	40 81       	ld	r20, Z
    1b30:	51 81       	ldd	r21, Z+1	; 0x01
    1b32:	48 17       	cp	r20, r24
    1b34:	59 07       	cpc	r21, r25
    1b36:	c0 f0       	brcs	.+48     	; 0x1b68 <malloc+0x5c>
    1b38:	48 17       	cp	r20, r24
    1b3a:	59 07       	cpc	r21, r25
    1b3c:	61 f4       	brne	.+24     	; 0x1b56 <malloc+0x4a>
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	20 97       	sbiw	r28, 0x00	; 0
    1b44:	19 f0       	breq	.+6      	; 0x1b4c <malloc+0x40>
    1b46:	9b 83       	std	Y+3, r25	; 0x03
    1b48:	8a 83       	std	Y+2, r24	; 0x02
    1b4a:	2b c0       	rjmp	.+86     	; 0x1ba2 <malloc+0x96>
    1b4c:	90 93 c8 07 	sts	0x07C8, r25
    1b50:	80 93 c7 07 	sts	0x07C7, r24
    1b54:	26 c0       	rjmp	.+76     	; 0x1ba2 <malloc+0x96>
    1b56:	21 15       	cp	r18, r1
    1b58:	31 05       	cpc	r19, r1
    1b5a:	19 f0       	breq	.+6      	; 0x1b62 <malloc+0x56>
    1b5c:	42 17       	cp	r20, r18
    1b5e:	53 07       	cpc	r21, r19
    1b60:	18 f4       	brcc	.+6      	; 0x1b68 <malloc+0x5c>
    1b62:	9a 01       	movw	r18, r20
    1b64:	be 01       	movw	r22, r28
    1b66:	df 01       	movw	r26, r30
    1b68:	ef 01       	movw	r28, r30
    1b6a:	02 80       	ldd	r0, Z+2	; 0x02
    1b6c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	dc cf       	rjmp	.-72     	; 0x1b2a <malloc+0x1e>
    1b72:	21 15       	cp	r18, r1
    1b74:	31 05       	cpc	r19, r1
    1b76:	09 f1       	breq	.+66     	; 0x1bba <malloc+0xae>
    1b78:	28 1b       	sub	r18, r24
    1b7a:	39 0b       	sbc	r19, r25
    1b7c:	24 30       	cpi	r18, 0x04	; 4
    1b7e:	31 05       	cpc	r19, r1
    1b80:	90 f4       	brcc	.+36     	; 0x1ba6 <malloc+0x9a>
    1b82:	12 96       	adiw	r26, 0x02	; 2
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	13 97       	sbiw	r26, 0x03	; 3
    1b8a:	61 15       	cp	r22, r1
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	21 f0       	breq	.+8      	; 0x1b98 <malloc+0x8c>
    1b90:	fb 01       	movw	r30, r22
    1b92:	93 83       	std	Z+3, r25	; 0x03
    1b94:	82 83       	std	Z+2, r24	; 0x02
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <malloc+0x94>
    1b98:	90 93 c8 07 	sts	0x07C8, r25
    1b9c:	80 93 c7 07 	sts	0x07C7, r24
    1ba0:	fd 01       	movw	r30, r26
    1ba2:	32 96       	adiw	r30, 0x02	; 2
    1ba4:	44 c0       	rjmp	.+136    	; 0x1c2e <malloc+0x122>
    1ba6:	fd 01       	movw	r30, r26
    1ba8:	e2 0f       	add	r30, r18
    1baa:	f3 1f       	adc	r31, r19
    1bac:	81 93       	st	Z+, r24
    1bae:	91 93       	st	Z+, r25
    1bb0:	22 50       	subi	r18, 0x02	; 2
    1bb2:	31 09       	sbc	r19, r1
    1bb4:	2d 93       	st	X+, r18
    1bb6:	3c 93       	st	X, r19
    1bb8:	3a c0       	rjmp	.+116    	; 0x1c2e <malloc+0x122>
    1bba:	20 91 c5 07 	lds	r18, 0x07C5
    1bbe:	30 91 c6 07 	lds	r19, 0x07C6
    1bc2:	23 2b       	or	r18, r19
    1bc4:	41 f4       	brne	.+16     	; 0x1bd6 <malloc+0xca>
    1bc6:	20 91 02 01 	lds	r18, 0x0102
    1bca:	30 91 03 01 	lds	r19, 0x0103
    1bce:	30 93 c6 07 	sts	0x07C6, r19
    1bd2:	20 93 c5 07 	sts	0x07C5, r18
    1bd6:	20 91 00 01 	lds	r18, 0x0100
    1bda:	30 91 01 01 	lds	r19, 0x0101
    1bde:	21 15       	cp	r18, r1
    1be0:	31 05       	cpc	r19, r1
    1be2:	41 f4       	brne	.+16     	; 0x1bf4 <malloc+0xe8>
    1be4:	2d b7       	in	r18, 0x3d	; 61
    1be6:	3e b7       	in	r19, 0x3e	; 62
    1be8:	40 91 04 01 	lds	r20, 0x0104
    1bec:	50 91 05 01 	lds	r21, 0x0105
    1bf0:	24 1b       	sub	r18, r20
    1bf2:	35 0b       	sbc	r19, r21
    1bf4:	e0 91 c5 07 	lds	r30, 0x07C5
    1bf8:	f0 91 c6 07 	lds	r31, 0x07C6
    1bfc:	e2 17       	cp	r30, r18
    1bfe:	f3 07       	cpc	r31, r19
    1c00:	a0 f4       	brcc	.+40     	; 0x1c2a <malloc+0x11e>
    1c02:	2e 1b       	sub	r18, r30
    1c04:	3f 0b       	sbc	r19, r31
    1c06:	28 17       	cp	r18, r24
    1c08:	39 07       	cpc	r19, r25
    1c0a:	78 f0       	brcs	.+30     	; 0x1c2a <malloc+0x11e>
    1c0c:	ac 01       	movw	r20, r24
    1c0e:	4e 5f       	subi	r20, 0xFE	; 254
    1c10:	5f 4f       	sbci	r21, 0xFF	; 255
    1c12:	24 17       	cp	r18, r20
    1c14:	35 07       	cpc	r19, r21
    1c16:	48 f0       	brcs	.+18     	; 0x1c2a <malloc+0x11e>
    1c18:	4e 0f       	add	r20, r30
    1c1a:	5f 1f       	adc	r21, r31
    1c1c:	50 93 c6 07 	sts	0x07C6, r21
    1c20:	40 93 c5 07 	sts	0x07C5, r20
    1c24:	81 93       	st	Z+, r24
    1c26:	91 93       	st	Z+, r25
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <malloc+0x122>
    1c2a:	e0 e0       	ldi	r30, 0x00	; 0
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	cf 01       	movw	r24, r30
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <free>:
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	00 97       	sbiw	r24, 0x00	; 0
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <free+0xe>
    1c42:	8c c0       	rjmp	.+280    	; 0x1d5c <free+0x126>
    1c44:	fc 01       	movw	r30, r24
    1c46:	32 97       	sbiw	r30, 0x02	; 2
    1c48:	13 82       	std	Z+3, r1	; 0x03
    1c4a:	12 82       	std	Z+2, r1	; 0x02
    1c4c:	00 91 c7 07 	lds	r16, 0x07C7
    1c50:	10 91 c8 07 	lds	r17, 0x07C8
    1c54:	01 15       	cp	r16, r1
    1c56:	11 05       	cpc	r17, r1
    1c58:	81 f4       	brne	.+32     	; 0x1c7a <free+0x44>
    1c5a:	20 81       	ld	r18, Z
    1c5c:	31 81       	ldd	r19, Z+1	; 0x01
    1c5e:	82 0f       	add	r24, r18
    1c60:	93 1f       	adc	r25, r19
    1c62:	20 91 c5 07 	lds	r18, 0x07C5
    1c66:	30 91 c6 07 	lds	r19, 0x07C6
    1c6a:	28 17       	cp	r18, r24
    1c6c:	39 07       	cpc	r19, r25
    1c6e:	79 f5       	brne	.+94     	; 0x1cce <free+0x98>
    1c70:	f0 93 c6 07 	sts	0x07C6, r31
    1c74:	e0 93 c5 07 	sts	0x07C5, r30
    1c78:	71 c0       	rjmp	.+226    	; 0x1d5c <free+0x126>
    1c7a:	d8 01       	movw	r26, r16
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	ae 17       	cp	r26, r30
    1c82:	bf 07       	cpc	r27, r31
    1c84:	50 f4       	brcc	.+20     	; 0x1c9a <free+0x64>
    1c86:	12 96       	adiw	r26, 0x02	; 2
    1c88:	2d 91       	ld	r18, X+
    1c8a:	3c 91       	ld	r19, X
    1c8c:	13 97       	sbiw	r26, 0x03	; 3
    1c8e:	ad 01       	movw	r20, r26
    1c90:	21 15       	cp	r18, r1
    1c92:	31 05       	cpc	r19, r1
    1c94:	09 f1       	breq	.+66     	; 0x1cd8 <free+0xa2>
    1c96:	d9 01       	movw	r26, r18
    1c98:	f3 cf       	rjmp	.-26     	; 0x1c80 <free+0x4a>
    1c9a:	9d 01       	movw	r18, r26
    1c9c:	da 01       	movw	r26, r20
    1c9e:	33 83       	std	Z+3, r19	; 0x03
    1ca0:	22 83       	std	Z+2, r18	; 0x02
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	86 0f       	add	r24, r22
    1ca8:	97 1f       	adc	r25, r23
    1caa:	82 17       	cp	r24, r18
    1cac:	93 07       	cpc	r25, r19
    1cae:	69 f4       	brne	.+26     	; 0x1cca <free+0x94>
    1cb0:	ec 01       	movw	r28, r24
    1cb2:	28 81       	ld	r18, Y
    1cb4:	39 81       	ldd	r19, Y+1	; 0x01
    1cb6:	26 0f       	add	r18, r22
    1cb8:	37 1f       	adc	r19, r23
    1cba:	2e 5f       	subi	r18, 0xFE	; 254
    1cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cbe:	31 83       	std	Z+1, r19	; 0x01
    1cc0:	20 83       	st	Z, r18
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	93 83       	std	Z+3, r25	; 0x03
    1cc8:	82 83       	std	Z+2, r24	; 0x02
    1cca:	45 2b       	or	r20, r21
    1ccc:	29 f4       	brne	.+10     	; 0x1cd8 <free+0xa2>
    1cce:	f0 93 c8 07 	sts	0x07C8, r31
    1cd2:	e0 93 c7 07 	sts	0x07C7, r30
    1cd6:	42 c0       	rjmp	.+132    	; 0x1d5c <free+0x126>
    1cd8:	13 96       	adiw	r26, 0x03	; 3
    1cda:	fc 93       	st	X, r31
    1cdc:	ee 93       	st	-X, r30
    1cde:	12 97       	sbiw	r26, 0x02	; 2
    1ce0:	ed 01       	movw	r28, r26
    1ce2:	49 91       	ld	r20, Y+
    1ce4:	59 91       	ld	r21, Y+
    1ce6:	9e 01       	movw	r18, r28
    1ce8:	24 0f       	add	r18, r20
    1cea:	35 1f       	adc	r19, r21
    1cec:	e2 17       	cp	r30, r18
    1cee:	f3 07       	cpc	r31, r19
    1cf0:	71 f4       	brne	.+28     	; 0x1d0e <free+0xd8>
    1cf2:	80 81       	ld	r24, Z
    1cf4:	91 81       	ldd	r25, Z+1	; 0x01
    1cf6:	84 0f       	add	r24, r20
    1cf8:	95 1f       	adc	r25, r21
    1cfa:	02 96       	adiw	r24, 0x02	; 2
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	9c 93       	st	X, r25
    1d00:	8e 93       	st	-X, r24
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	13 96       	adiw	r26, 0x03	; 3
    1d08:	9c 93       	st	X, r25
    1d0a:	8e 93       	st	-X, r24
    1d0c:	12 97       	sbiw	r26, 0x02	; 2
    1d0e:	e0 e0       	ldi	r30, 0x00	; 0
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	d8 01       	movw	r26, r16
    1d14:	12 96       	adiw	r26, 0x02	; 2
    1d16:	8d 91       	ld	r24, X+
    1d18:	9c 91       	ld	r25, X
    1d1a:	13 97       	sbiw	r26, 0x03	; 3
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <free+0xf0>
    1d20:	f8 01       	movw	r30, r16
    1d22:	8c 01       	movw	r16, r24
    1d24:	f6 cf       	rjmp	.-20     	; 0x1d12 <free+0xdc>
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	98 01       	movw	r18, r16
    1d2c:	2e 5f       	subi	r18, 0xFE	; 254
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	82 0f       	add	r24, r18
    1d32:	93 1f       	adc	r25, r19
    1d34:	20 91 c5 07 	lds	r18, 0x07C5
    1d38:	30 91 c6 07 	lds	r19, 0x07C6
    1d3c:	28 17       	cp	r18, r24
    1d3e:	39 07       	cpc	r19, r25
    1d40:	69 f4       	brne	.+26     	; 0x1d5c <free+0x126>
    1d42:	30 97       	sbiw	r30, 0x00	; 0
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <free+0x11a>
    1d46:	10 92 c8 07 	sts	0x07C8, r1
    1d4a:	10 92 c7 07 	sts	0x07C7, r1
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <free+0x11e>
    1d50:	13 82       	std	Z+3, r1	; 0x03
    1d52:	12 82       	std	Z+2, r1	; 0x02
    1d54:	10 93 c6 07 	sts	0x07C6, r17
    1d58:	00 93 c5 07 	sts	0x07C5, r16
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	08 95       	ret

00001d66 <memset>:
    1d66:	dc 01       	movw	r26, r24
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <memset+0x6>
    1d6a:	6d 93       	st	X+, r22
    1d6c:	41 50       	subi	r20, 0x01	; 1
    1d6e:	50 40       	sbci	r21, 0x00	; 0
    1d70:	e0 f7       	brcc	.-8      	; 0x1d6a <memset+0x4>
    1d72:	08 95       	ret

00001d74 <strncpy>:
    1d74:	fb 01       	movw	r30, r22
    1d76:	dc 01       	movw	r26, r24
    1d78:	41 50       	subi	r20, 0x01	; 1
    1d7a:	50 40       	sbci	r21, 0x00	; 0
    1d7c:	48 f0       	brcs	.+18     	; 0x1d90 <strncpy+0x1c>
    1d7e:	01 90       	ld	r0, Z+
    1d80:	0d 92       	st	X+, r0
    1d82:	00 20       	and	r0, r0
    1d84:	c9 f7       	brne	.-14     	; 0x1d78 <strncpy+0x4>
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <strncpy+0x16>
    1d88:	1d 92       	st	X+, r1
    1d8a:	41 50       	subi	r20, 0x01	; 1
    1d8c:	50 40       	sbci	r21, 0x00	; 0
    1d8e:	e0 f7       	brcc	.-8      	; 0x1d88 <strncpy+0x14>
    1d90:	08 95       	ret

00001d92 <_exit>:
    1d92:	f8 94       	cli

00001d94 <__stop_program>:
    1d94:	ff cf       	rjmp	.-2      	; 0x1d94 <__stop_program>
