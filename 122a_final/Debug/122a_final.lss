
122a_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  0000211c  000021b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000211c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000673  00800184  00800184  00002234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028c3  00000000  00000000  00002534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8c  00000000  00000000  00004df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b61  00000000  00000000  00005883  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  000073e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5a  00000000  00000000  00007acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a6  00000000  00000000  00008826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 28 0a 	jmp	0x1450	; 0x1450 <__vector_13>
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c2       	rjmp	.+1198   	; 0x4fc <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e1       	ldi	r30, 0x1C	; 28
      a0:	f1 e2       	ldi	r31, 0x21	; 33
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a4 38       	cpi	r26, 0x84	; 132
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a4 e8       	ldi	r26, 0x84	; 132
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 3f       	cpi	r26, 0xF7	; 247
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 bd 08 	call	0x117a	; 0x117a <main>
      c6:	0c 94 8c 10 	jmp	0x2118	; 0x2118 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d6:	20 91 84 01 	lds	r18, 0x0184
      da:	30 91 85 01 	lds	r19, 0x0185
      de:	ce 01       	movw	r24, r28
      e0:	82 0f       	add	r24, r18
      e2:	93 1f       	adc	r25, r19
      e4:	8c 3d       	cpi	r24, 0xDC	; 220
      e6:	45 e0       	ldi	r20, 0x05	; 5
      e8:	94 07       	cpc	r25, r20
      ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x36>
      ec:	28 17       	cp	r18, r24
      ee:	39 07       	cpc	r19, r25
      f0:	58 f4       	brcc	.+22     	; 0x108 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f2:	e9 01       	movw	r28, r18
      f4:	ca 57       	subi	r28, 0x7A	; 122
      f6:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f8:	90 93 85 01 	sts	0x0185, r25
      fc:	80 93 84 01 	sts	0x0184, r24
     100:	05 c0       	rjmp	.+10     	; 0x10c <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <pvPortMalloc+0x40>
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     110:	ce 01       	movw	r24, r28
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     118:	08 95       	ret

0000011a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     11a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11c:	03 96       	adiw	r24, 0x03	; 3
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	34 83       	std	Z+4, r19	; 0x04
     128:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     12a:	96 83       	std	Z+6, r25	; 0x06
     12c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12e:	90 87       	std	Z+8, r25	; 0x08
     130:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     132:	10 82       	st	Z, r1
     134:	08 95       	ret

00000136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     136:	fc 01       	movw	r30, r24
     138:	11 86       	std	Z+9, r1	; 0x09
     13a:	10 86       	std	Z+8, r1	; 0x08
     13c:	08 95       	ret

0000013e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     14a:	e9 01       	movw	r28, r18
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
     150:	13 96       	adiw	r26, 0x03	; 3
     152:	9c 93       	st	X, r25
     154:	8e 93       	st	-X, r24
     156:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	15 96       	adiw	r26, 0x05	; 5
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	ec 01       	movw	r28, r24
     16a:	7d 83       	std	Y+5, r23	; 0x05
     16c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16e:	e9 01       	movw	r28, r18
     170:	7b 83       	std	Y+3, r23	; 0x03
     172:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     174:	72 83       	std	Z+2, r23	; 0x02
     176:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	fc 93       	st	X, r31
     17c:	ee 93       	st	-X, r30
     17e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     180:	80 81       	ld	r24, Z
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 83       	st	Z, r24
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     196:	4f 3f       	cpi	r20, 0xFF	; 255
     198:	2f ef       	ldi	r18, 0xFF	; 255
     19a:	52 07       	cpc	r21, r18
     19c:	31 f4       	brne	.+12     	; 0x1aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19e:	dc 01       	movw	r26, r24
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	18 97       	sbiw	r26, 0x08	; 8
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1aa:	fc 01       	movw	r30, r24
     1ac:	33 96       	adiw	r30, 0x03	; 3
     1ae:	dc 01       	movw	r26, r24
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	d9 01       	movw	r26, r18
     1ba:	2d 91       	ld	r18, X+
     1bc:	3c 91       	ld	r19, X
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	50 f0       	brcs	.+20     	; 0x1d8 <vListInsert+0x4c>
     1c4:	02 80       	ldd	r0, Z+2	; 0x02
     1c6:	f3 81       	ldd	r31, Z+3	; 0x03
     1c8:	e0 2d       	mov	r30, r0
     1ca:	a2 81       	ldd	r26, Z+2	; 0x02
     1cc:	b3 81       	ldd	r27, Z+3	; 0x03
     1ce:	2d 91       	ld	r18, X+
     1d0:	3c 91       	ld	r19, X
     1d2:	42 17       	cp	r20, r18
     1d4:	53 07       	cpc	r21, r19
     1d6:	b0 f7       	brcc	.-20     	; 0x1c4 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d8:	a2 81       	ldd	r26, Z+2	; 0x02
     1da:	b3 81       	ldd	r27, Z+3	; 0x03
     1dc:	bb 83       	std	Y+3, r27	; 0x03
     1de:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e0:	15 96       	adiw	r26, 0x05	; 5
     1e2:	dc 93       	st	X, r29
     1e4:	ce 93       	st	-X, r28
     1e6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	fd 83       	std	Y+5, r31	; 0x05
     1ea:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	d3 83       	std	Z+3, r29	; 0x03
     1ee:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f0:	99 87       	std	Y+9, r25	; 0x09
     1f2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	20 83       	st	Z, r18
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     202:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     204:	a2 81       	ldd	r26, Z+2	; 0x02
     206:	b3 81       	ldd	r27, Z+3	; 0x03
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	15 96       	adiw	r26, 0x05	; 5
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24
     212:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     214:	a4 81       	ldd	r26, Z+4	; 0x04
     216:	b5 81       	ldd	r27, Z+5	; 0x05
     218:	82 81       	ldd	r24, Z+2	; 0x02
     21a:	93 81       	ldd	r25, Z+3	; 0x03
     21c:	13 96       	adiw	r26, 0x03	; 3
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24
     222:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     224:	a0 85       	ldd	r26, Z+8	; 0x08
     226:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8d 91       	ld	r24, X+
     22c:	9c 91       	ld	r25, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
     230:	8e 17       	cp	r24, r30
     232:	9f 07       	cpc	r25, r31
     234:	31 f4       	brne	.+12     	; 0x242 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     236:	84 81       	ldd	r24, Z+4	; 0x04
     238:	95 81       	ldd	r25, Z+5	; 0x05
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     242:	11 86       	std	Z+9, r1	; 0x09
     244:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     246:	8c 91       	ld	r24, X
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

0000024e <joystickInit>:
#define BUTBUS PINA
#define BUTPIN 5
enum ButState {BINIT, BWAIT, BPRESSED, BPWAIT} but_state;

void But_Init() {
	but_state = BINIT;
     24e:	ea e7       	ldi	r30, 0x7A	; 122
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 6c       	ori	r24, 0xC0	; 192
     256:	80 83       	st	Z, r24
     258:	10 92 eb 07 	sts	0x07EB, r1
     25c:	10 92 ea 07 	sts	0x07EA, r1
     260:	10 92 e5 07 	sts	0x07E5, r1
     264:	10 92 e4 07 	sts	0x07E4, r1
     268:	08 95       	ret

0000026a <joystickSample>:
     26a:	2f 92       	push	r2
     26c:	3f 92       	push	r3
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	61 97       	sbiw	r28, 0x11	; 17
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	80 83       	st	Z, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	86 fd       	sbrc	r24, 6
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <joystickSample+0x3e>
     2ae:	80 91 78 00 	lds	r24, 0x0078
     2b2:	90 91 79 00 	lds	r25, 0x0079
     2b6:	90 93 eb 07 	sts	0x07EB, r25
     2ba:	80 93 ea 07 	sts	0x07EA, r24
     2be:	ec e7       	ldi	r30, 0x7C	; 124
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <joystickSample+0x68>
     2d8:	80 91 78 00 	lds	r24, 0x0078
     2dc:	90 91 79 00 	lds	r25, 0x0079
     2e0:	90 93 e5 07 	sts	0x07E5, r25
     2e4:	80 93 e4 07 	sts	0x07E4, r24
     2e8:	ec e7       	ldi	r30, 0x7C	; 124
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8e 7f       	andi	r24, 0xFE	; 254
     2f0:	80 83       	st	Z, r24
     2f2:	40 90 ea 07 	lds	r4, 0x07EA
     2f6:	50 90 eb 07 	lds	r5, 0x07EB
     2fa:	20 ef       	ldi	r18, 0xF0	; 240
     2fc:	42 1a       	sub	r4, r18
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	52 0a       	sbc	r5, r18
     302:	50 92 eb 07 	sts	0x07EB, r5
     306:	40 92 ea 07 	sts	0x07EA, r4
     30a:	60 90 e4 07 	lds	r6, 0x07E4
     30e:	70 90 e5 07 	lds	r7, 0x07E5
     312:	3c e0       	ldi	r19, 0x0C	; 12
     314:	63 1a       	sub	r6, r19
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	73 0a       	sbc	r7, r19
     31a:	70 92 e5 07 	sts	0x07E5, r7
     31e:	60 92 e4 07 	sts	0x07E4, r6
     322:	95 2d       	mov	r25, r5
     324:	99 0f       	add	r25, r25
     326:	99 0b       	sbc	r25, r25
     328:	97 2c       	mov	r9, r7
     32a:	99 0c       	add	r9, r9
     32c:	99 08       	sbc	r9, r9
     32e:	a4 2c       	mov	r10, r4
     330:	b5 2c       	mov	r11, r5
     332:	c9 2e       	mov	r12, r25
     334:	d9 2e       	mov	r13, r25
     336:	e9 2e       	mov	r14, r25
     338:	f9 2e       	mov	r15, r25
     33a:	09 2f       	mov	r16, r25
     33c:	19 2f       	mov	r17, r25
     33e:	24 2d       	mov	r18, r4
     340:	35 2d       	mov	r19, r5
     342:	49 2f       	mov	r20, r25
     344:	59 2f       	mov	r21, r25
     346:	69 2f       	mov	r22, r25
     348:	79 2f       	mov	r23, r25
     34a:	89 2f       	mov	r24, r25
     34c:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__muldi3>
     350:	22 2e       	mov	r2, r18
     352:	33 2e       	mov	r3, r19
     354:	84 2e       	mov	r8, r20
     356:	5d 87       	std	Y+13, r21	; 0x0d
     358:	6e 87       	std	Y+14, r22	; 0x0e
     35a:	7f 87       	std	Y+15, r23	; 0x0f
     35c:	88 8b       	std	Y+16, r24	; 0x10
     35e:	99 8b       	std	Y+17, r25	; 0x11
     360:	a6 2c       	mov	r10, r6
     362:	b7 2c       	mov	r11, r7
     364:	c9 2c       	mov	r12, r9
     366:	d9 2c       	mov	r13, r9
     368:	e9 2c       	mov	r14, r9
     36a:	f9 2c       	mov	r15, r9
     36c:	09 2d       	mov	r16, r9
     36e:	19 2d       	mov	r17, r9
     370:	26 2d       	mov	r18, r6
     372:	37 2d       	mov	r19, r7
     374:	49 2d       	mov	r20, r9
     376:	59 2d       	mov	r21, r9
     378:	69 2d       	mov	r22, r9
     37a:	79 2d       	mov	r23, r9
     37c:	89 2d       	mov	r24, r9
     37e:	99 2d       	mov	r25, r9
     380:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__muldi3>
     384:	a2 2e       	mov	r10, r18
     386:	b3 2e       	mov	r11, r19
     388:	c4 2e       	mov	r12, r20
     38a:	d5 2e       	mov	r13, r21
     38c:	e6 2e       	mov	r14, r22
     38e:	f7 2e       	mov	r15, r23
     390:	08 2f       	mov	r16, r24
     392:	19 2f       	mov	r17, r25
     394:	22 2d       	mov	r18, r2
     396:	33 2d       	mov	r19, r3
     398:	48 2d       	mov	r20, r8
     39a:	5d 85       	ldd	r21, Y+13	; 0x0d
     39c:	6e 85       	ldd	r22, Y+14	; 0x0e
     39e:	7f 85       	ldd	r23, Y+15	; 0x0f
     3a0:	88 89       	ldd	r24, Y+16	; 0x10
     3a2:	99 89       	ldd	r25, Y+17	; 0x11
     3a4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__adddi3>
     3a8:	2f 3f       	cpi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	41 05       	cpc	r20, r1
     3ae:	51 05       	cpc	r21, r1
     3b0:	61 05       	cpc	r22, r1
     3b2:	71 05       	cpc	r23, r1
     3b4:	81 05       	cpc	r24, r1
     3b6:	91 05       	cpc	r25, r1
     3b8:	09 f0       	breq	.+2      	; 0x3bc <joystickSample+0x152>
     3ba:	1c f4       	brge	.+6      	; 0x3c2 <joystickSample+0x158>
     3bc:	10 92 f0 07 	sts	0x07F0, r1
     3c0:	35 c0       	rjmp	.+106    	; 0x42c <joystickSample+0x1c2>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	8c 83       	std	Y+4, r24	; 0x04
     3d2:	5e 82       	std	Y+6, r5	; 0x06
     3d4:	4d 82       	std	Y+5, r4	; 0x05
     3d6:	51 94       	neg	r5
     3d8:	41 94       	neg	r4
     3da:	51 08       	sbc	r5, r1
     3dc:	58 86       	std	Y+8, r5	; 0x08
     3de:	4f 82       	std	Y+7, r4	; 0x07
     3e0:	7a 86       	std	Y+10, r7	; 0x0a
     3e2:	69 86       	std	Y+9, r6	; 0x09
     3e4:	71 94       	neg	r7
     3e6:	61 94       	neg	r6
     3e8:	71 08       	sbc	r7, r1
     3ea:	7c 86       	std	Y+12, r7	; 0x0c
     3ec:	6b 86       	std	Y+11, r6	; 0x0b
     3ee:	de 01       	movw	r26, r28
     3f0:	17 96       	adiw	r26, 0x07	; 7
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	4d 91       	ld	r20, X+
     3f8:	5d 91       	ld	r21, X+
     3fa:	e9 2f       	mov	r30, r25
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	2c 0f       	add	r18, r28
     408:	3d 1f       	adc	r19, r29
     40a:	e2 0f       	add	r30, r18
     40c:	f3 1f       	adc	r31, r19
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	24 17       	cp	r18, r20
     414:	35 07       	cpc	r19, r21
     416:	0c f4       	brge	.+2      	; 0x41a <joystickSample+0x1b0>
     418:	98 2f       	mov	r25, r24
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	84 30       	cpi	r24, 0x04	; 4
     41e:	59 f7       	brne	.-42     	; 0x3f6 <joystickSample+0x18c>
     420:	fe 01       	movw	r30, r28
     422:	e9 0f       	add	r30, r25
     424:	f1 1d       	adc	r31, r1
     426:	81 81       	ldd	r24, Z+1	; 0x01
     428:	80 93 f0 07 	sts	0x07F0, r24
     42c:	61 96       	adiw	r28, 0x11	; 17
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	08 95       	ret

0000045e <QueueInit>:
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <malloc>
     46e:	ec 01       	movw	r28, r24
     470:	81 2f       	mov	r24, r17
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <malloc>
     478:	99 83       	std	Y+1, r25	; 0x01
     47a:	88 83       	st	Y, r24
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	1b 82       	std	Y+3, r1	; 0x03
     480:	1c 82       	std	Y+4, r1	; 0x04
     482:	1d 83       	std	Y+5, r17	; 0x05
     484:	ce 01       	movw	r24, r28
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <QueueEnqueue>:
     48e:	fc 01       	movw	r30, r24
     490:	94 81       	ldd	r25, Z+4	; 0x04
     492:	85 81       	ldd	r24, Z+5	; 0x05
     494:	98 17       	cp	r25, r24
     496:	88 f4       	brcc	.+34     	; 0x4ba <QueueEnqueue+0x2c>
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	a0 81       	ld	r26, Z
     49c:	b1 81       	ldd	r27, Z+1	; 0x01
     49e:	a8 0f       	add	r26, r24
     4a0:	b1 1d       	adc	r27, r1
     4a2:	6c 93       	st	X, r22
     4a4:	83 81       	ldd	r24, Z+3	; 0x03
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	65 81       	ldd	r22, Z+5	; 0x05
     4aa:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodqi4>
     4ae:	93 83       	std	Z+3, r25	; 0x03
     4b0:	84 81       	ldd	r24, Z+4	; 0x04
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret

000004be <QueueDequeue>:
     4be:	fc 01       	movw	r30, r24
     4c0:	84 81       	ldd	r24, Z+4	; 0x04
     4c2:	88 23       	and	r24, r24
     4c4:	89 f0       	breq	.+34     	; 0x4e8 <QueueDequeue+0x2a>
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	a0 81       	ld	r26, Z
     4ca:	b1 81       	ldd	r27, Z+1	; 0x01
     4cc:	a8 0f       	add	r26, r24
     4ce:	b1 1d       	adc	r27, r1
     4d0:	2c 91       	ld	r18, X
     4d2:	1c 92       	st	X, r1
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	65 81       	ldd	r22, Z+5	; 0x05
     4da:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__udivmodqi4>
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	84 81       	ldd	r24, Z+4	; 0x04
     4e2:	81 50       	subi	r24, 0x01	; 1
     4e4:	84 83       	std	Z+4, r24	; 0x04
     4e6:	82 2f       	mov	r24, r18
     4e8:	08 95       	ret

000004ea <SPI_ServantInit>:
     4ea:	80 e4       	ldi	r24, 0x40	; 64
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	8c b5       	in	r24, 0x2c	; 44
     4f0:	80 6c       	ori	r24, 0xC0	; 192
     4f2:	8c bd       	out	0x2c, r24	; 44
     4f4:	8f b7       	in	r24, 0x3f	; 63
     4f6:	80 68       	ori	r24, 0x80	; 128
     4f8:	8f bf       	out	0x3f, r24	; 63
     4fa:	08 95       	ret

000004fc <__vector_19>:
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	8f 93       	push	r24
     508:	8e b5       	in	r24, 0x2e	; 46
     50a:	80 93 48 01 	sts	0x0148, r24
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <transmit_data>:
     51a:	43 9a       	sbi	0x08, 3	; 8
     51c:	41 98       	cbi	0x08, 1	; 8
     51e:	38 e0       	ldi	r19, 0x08	; 8
     520:	43 9a       	sbi	0x08, 3	; 8
     522:	42 98       	cbi	0x08, 2	; 8
     524:	98 b1       	in	r25, 0x08	; 8
     526:	88 23       	and	r24, r24
     528:	14 f4       	brge	.+4      	; 0x52e <transmit_data+0x14>
     52a:	91 60       	ori	r25, 0x01	; 1
     52c:	01 c0       	rjmp	.+2      	; 0x530 <transmit_data+0x16>
     52e:	9e 7f       	andi	r25, 0xFE	; 254
     530:	98 b9       	out	0x08, r25	; 8
     532:	98 b1       	in	r25, 0x08	; 8
     534:	66 23       	and	r22, r22
     536:	14 f4       	brge	.+4      	; 0x53c <transmit_data+0x22>
     538:	90 61       	ori	r25, 0x10	; 16
     53a:	01 c0       	rjmp	.+2      	; 0x53e <transmit_data+0x24>
     53c:	9f 7e       	andi	r25, 0xEF	; 239
     53e:	98 b9       	out	0x08, r25	; 8
     540:	98 b1       	in	r25, 0x08	; 8
     542:	44 23       	and	r20, r20
     544:	14 f4       	brge	.+4      	; 0x54a <transmit_data+0x30>
     546:	90 62       	ori	r25, 0x20	; 32
     548:	01 c0       	rjmp	.+2      	; 0x54c <transmit_data+0x32>
     54a:	9f 7d       	andi	r25, 0xDF	; 223
     54c:	98 b9       	out	0x08, r25	; 8
     54e:	98 b1       	in	r25, 0x08	; 8
     550:	22 23       	and	r18, r18
     552:	14 f4       	brge	.+4      	; 0x558 <transmit_data+0x3e>
     554:	90 64       	ori	r25, 0x40	; 64
     556:	01 c0       	rjmp	.+2      	; 0x55a <transmit_data+0x40>
     558:	9f 7b       	andi	r25, 0xBF	; 191
     55a:	98 b9       	out	0x08, r25	; 8
     55c:	88 0f       	add	r24, r24
     55e:	66 0f       	add	r22, r22
     560:	44 0f       	add	r20, r20
     562:	22 0f       	add	r18, r18
     564:	42 9a       	sbi	0x08, 2	; 8
     566:	31 50       	subi	r19, 0x01	; 1
     568:	d9 f6       	brne	.-74     	; 0x520 <transmit_data+0x6>
     56a:	41 9a       	sbi	0x08, 1	; 8
     56c:	08 95       	ret

0000056e <Shift_Tick>:
     56e:	80 91 ec 07 	lds	r24, 0x07EC
     572:	81 11       	cpse	r24, r1
     574:	09 c0       	rjmp	.+18     	; 0x588 <Shift_Tick+0x1a>
     576:	20 91 85 07 	lds	r18, 0x0785
     57a:	40 91 47 01 	lds	r20, 0x0147
     57e:	60 91 86 07 	lds	r22, 0x0786
     582:	80 91 87 07 	lds	r24, 0x0787
     586:	c9 df       	rcall	.-110    	; 0x51a <transmit_data>
     588:	80 91 ec 07 	lds	r24, 0x07EC
     58c:	81 11       	cpse	r24, r1
     58e:	10 92 ec 07 	sts	0x07EC, r1
     592:	08 95       	ret

00000594 <Shift_Task>:
     594:	10 92 ec 07 	sts	0x07EC, r1
     598:	ea df       	rcall	.-44     	; 0x56e <Shift_Tick>
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <vTaskDelay>
     5a2:	fa cf       	rjmp	.-12     	; 0x598 <Shift_Task+0x4>

000005a4 <Motor_Tick>:
     5a4:	2f 92       	push	r2
     5a6:	3f 92       	push	r3
     5a8:	4f 92       	push	r4
     5aa:	5f 92       	push	r5
     5ac:	6f 92       	push	r6
     5ae:	7f 92       	push	r7
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	2a 97       	sbiw	r28, 0x0a	; 10
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	80 91 e9 07 	lds	r24, 0x07E9
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <Motor_Tick+0x3e>
     5e0:	03 c1       	rjmp	.+518    	; 0x7e8 <Motor_Tick+0x244>
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f5 e6       	ldi	r31, 0x65	; 101
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f7 e0       	ldi	r31, 0x07	; 7
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f5 e7       	ldi	r31, 0x75	; 117
     5f2:	8f 2e       	mov	r8, r31
     5f4:	f7 e0       	ldi	r31, 0x07	; 7
     5f6:	9f 2e       	mov	r9, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f7 e3       	ldi	r31, 0x37	; 55
     5fe:	2f 2e       	mov	r2, r31
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	3f 2e       	mov	r3, r31
     604:	f0 2d       	mov	r31, r0
     606:	8b e3       	ldi	r24, 0x3B	; 59
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	0f e3       	ldi	r16, 0x3F	; 63
     610:	11 e0       	ldi	r17, 0x01	; 1
     612:	a7 e2       	ldi	r26, 0x27	; 39
     614:	b1 e0       	ldi	r27, 0x01	; 1
     616:	bc 83       	std	Y+4, r27	; 0x04
     618:	ab 83       	std	Y+3, r26	; 0x03
     61a:	aa 24       	eor	r10, r10
     61c:	a3 94       	inc	r10
     61e:	b1 2c       	mov	r11, r1
     620:	fa 86       	std	Y+10, r15	; 0x0a
     622:	e9 86       	std	Y+9, r14	; 0x09
     624:	98 86       	std	Y+8, r9	; 0x08
     626:	8f 82       	std	Y+7, r8	; 0x07
     628:	f4 01       	movw	r30, r8
     62a:	60 81       	ld	r22, Z
     62c:	71 81       	ldd	r23, Z+1	; 0x01
     62e:	82 81       	ldd	r24, Z+2	; 0x02
     630:	93 81       	ldd	r25, Z+3	; 0x03
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	44 e3       	ldi	r20, 0x34	; 52
     638:	54 e4       	ldi	r21, 0x44	; 68
     63a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fmod>
     63e:	2b 01       	movw	r4, r22
     640:	3c 01       	movw	r6, r24
     642:	d4 01       	movw	r26, r8
     644:	6d 93       	st	X+, r22
     646:	7d 93       	st	X+, r23
     648:	8d 93       	st	X+, r24
     64a:	9c 93       	st	X, r25
     64c:	13 97       	sbiw	r26, 0x03	; 3
     64e:	e9 84       	ldd	r14, Y+9	; 0x09
     650:	fa 84       	ldd	r15, Y+10	; 0x0a
     652:	fe 82       	std	Y+6, r15	; 0x06
     654:	ed 82       	std	Y+5, r14	; 0x05
     656:	d7 01       	movw	r26, r14
     658:	6d 91       	ld	r22, X+
     65a:	7d 91       	ld	r23, X+
     65c:	8d 91       	ld	r24, X+
     65e:	9c 91       	ld	r25, X
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	44 e3       	ldi	r20, 0x34	; 52
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <fmod>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	e9 85       	ldd	r30, Y+9	; 0x09
     672:	fa 85       	ldd	r31, Y+10	; 0x0a
     674:	60 83       	st	Z, r22
     676:	71 83       	std	Z+1, r23	; 0x01
     678:	82 83       	std	Z+2, r24	; 0x02
     67a:	93 83       	std	Z+3, r25	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	74 f4       	brge	.+28     	; 0x6aa <Motor_Tick+0x106>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	44 e3       	ldi	r20, 0x34	; 52
     694:	54 e4       	ldi	r21, 0x44	; 68
     696:	c3 01       	movw	r24, r6
     698:	b2 01       	movw	r22, r4
     69a:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     69e:	d4 01       	movw	r26, r8
     6a0:	6d 93       	st	X+, r22
     6a2:	7d 93       	st	X+, r23
     6a4:	8d 93       	st	X+, r24
     6a6:	9c 93       	st	X, r25
     6a8:	13 97       	sbiw	r26, 0x03	; 3
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	a9 01       	movw	r20, r18
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <Motor_Tick+0x11a>
     6bc:	9d c0       	rjmp	.+314    	; 0x7f8 <Motor_Tick+0x254>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	44 e3       	ldi	r20, 0x34	; 52
     6c4:	54 e4       	ldi	r21, 0x44	; 68
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     6ce:	ed 81       	ldd	r30, Y+5	; 0x05
     6d0:	fe 81       	ldd	r31, Y+6	; 0x06
     6d2:	60 83       	st	Z, r22
     6d4:	71 83       	std	Z+1, r23	; 0x01
     6d6:	82 83       	std	Z+2, r24	; 0x02
     6d8:	93 83       	std	Z+3, r25	; 0x03
     6da:	8e c0       	rjmp	.+284    	; 0x7f8 <Motor_Tick+0x254>
     6dc:	27 2f       	mov	r18, r23
     6de:	37 2d       	mov	r19, r7
     6e0:	d1 01       	movw	r26, r2
     6e2:	dc 90       	ld	r13, X
     6e4:	dc 01       	movw	r26, r24
     6e6:	64 e0       	ldi	r22, 0x04	; 4
     6e8:	d6 9e       	mul	r13, r22
     6ea:	a0 0d       	add	r26, r0
     6ec:	b1 1d       	adc	r27, r1
     6ee:	11 24       	eor	r1, r1
     6f0:	a9 5f       	subi	r26, 0xF9	; 249
     6f2:	be 4f       	sbci	r27, 0xFE	; 254
     6f4:	ac 91       	ld	r26, X
     6f6:	aa 23       	and	r26, r26
     6f8:	79 f0       	breq	.+30     	; 0x718 <Motor_Tick+0x174>
     6fa:	d8 01       	movw	r26, r16
     6fc:	ed 90       	ld	r14, X+
     6fe:	fc 90       	ld	r15, X
     700:	65 01       	movw	r12, r10
     702:	00 80       	ld	r0, Z
     704:	02 c0       	rjmp	.+4      	; 0x70a <Motor_Tick+0x166>
     706:	cc 0c       	add	r12, r12
     708:	dd 1c       	adc	r13, r13
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <Motor_Tick+0x162>
     70e:	d7 01       	movw	r26, r14
     710:	6c 91       	ld	r22, X
     712:	c6 2a       	or	r12, r22
     714:	cc 92       	st	X, r12
     716:	10 c0       	rjmp	.+32     	; 0x738 <Motor_Tick+0x194>
     718:	d8 01       	movw	r26, r16
     71a:	ed 90       	ld	r14, X+
     71c:	fc 90       	ld	r15, X
     71e:	d5 01       	movw	r26, r10
     720:	00 80       	ld	r0, Z
     722:	02 c0       	rjmp	.+4      	; 0x728 <Motor_Tick+0x184>
     724:	aa 0f       	add	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	0a 94       	dec	r0
     72a:	e2 f7       	brpl	.-8      	; 0x724 <Motor_Tick+0x180>
     72c:	6a 2f       	mov	r22, r26
     72e:	60 95       	com	r22
     730:	d7 01       	movw	r26, r14
     732:	dc 90       	ld	r13, X
     734:	6d 21       	and	r22, r13
     736:	6c 93       	st	X, r22
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	91 05       	cpc	r25, r1
     740:	69 f6       	brne	.-102    	; 0x6dc <Motor_Tick+0x138>
     742:	5a 87       	std	Y+10, r21	; 0x0a
     744:	49 87       	std	Y+9, r20	; 0x09
     746:	f9 01       	movw	r30, r18
     748:	a9 81       	ldd	r26, Y+1	; 0x01
     74a:	ba 81       	ldd	r27, Y+2	; 0x02
     74c:	8c 91       	ld	r24, X
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <Motor_Tick+0x1b0>
     752:	6f c0       	rjmp	.+222    	; 0x832 <Motor_Tick+0x28e>
     754:	80 81       	ld	r24, Z
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	10 f4       	brcc	.+4      	; 0x760 <Motor_Tick+0x1bc>
     75c:	80 83       	st	Z, r24
     75e:	2a c0       	rjmp	.+84     	; 0x7b4 <Motor_Tick+0x210>
     760:	10 82       	st	Z, r1
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	44 e3       	ldi	r20, 0x34	; 52
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	ed 81       	ldd	r30, Y+5	; 0x05
     76c:	fe 81       	ldd	r31, Y+6	; 0x06
     76e:	60 81       	ld	r22, Z
     770:	71 81       	ldd	r23, Z+1	; 0x01
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	93 81       	ldd	r25, Z+3	; 0x03
     776:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     77a:	ad 81       	ldd	r26, Y+5	; 0x05
     77c:	be 81       	ldd	r27, Y+6	; 0x06
     77e:	6d 93       	st	X+, r22
     780:	7d 93       	st	X+, r23
     782:	8d 93       	st	X+, r24
     784:	9c 93       	st	X, r25
     786:	13 97       	sbiw	r26, 0x03	; 3
     788:	15 c0       	rjmp	.+42     	; 0x7b4 <Motor_Tick+0x210>
     78a:	b7 e0       	ldi	r27, 0x07	; 7
     78c:	b0 83       	st	Z, r27
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	44 e3       	ldi	r20, 0x34	; 52
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	ed 81       	ldd	r30, Y+5	; 0x05
     798:	fe 81       	ldd	r31, Y+6	; 0x06
     79a:	60 81       	ld	r22, Z
     79c:	71 81       	ldd	r23, Z+1	; 0x01
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__subsf3>
     7a6:	ad 81       	ldd	r26, Y+5	; 0x05
     7a8:	be 81       	ldd	r27, Y+6	; 0x06
     7aa:	6d 93       	st	X+, r22
     7ac:	7d 93       	st	X+, r23
     7ae:	8d 93       	st	X+, r24
     7b0:	9c 93       	st	X, r25
     7b2:	13 97       	sbiw	r26, 0x03	; 3
     7b4:	e9 85       	ldd	r30, Y+9	; 0x09
     7b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b8:	34 96       	adiw	r30, 0x04	; 4
     7ba:	fa 87       	std	Y+10, r31	; 0x0a
     7bc:	e9 87       	std	Y+9, r30	; 0x09
     7be:	ff ef       	ldi	r31, 0xFF	; 255
     7c0:	2f 1a       	sub	r2, r31
     7c2:	3f 0a       	sbc	r3, r31
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	0e 5f       	subi	r16, 0xFE	; 254
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	ab 81       	ldd	r26, Y+3	; 0x03
     7d4:	bc 81       	ldd	r27, Y+4	; 0x04
     7d6:	14 96       	adiw	r26, 0x04	; 4
     7d8:	bc 83       	std	Y+4, r27	; 0x04
     7da:	ab 83       	std	Y+3, r26	; 0x03
     7dc:	e9 85       	ldd	r30, Y+9	; 0x09
     7de:	fa 85       	ldd	r31, Y+10	; 0x0a
     7e0:	e5 57       	subi	r30, 0x75	; 117
     7e2:	f7 40       	sbci	r31, 0x07	; 7
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <Motor_Tick+0x244>
     7e6:	1e cf       	rjmp	.-452    	; 0x624 <Motor_Tick+0x80>
     7e8:	80 91 e9 07 	lds	r24, 0x07E9
     7ec:	81 11       	cpse	r24, r1
     7ee:	28 c0       	rjmp	.+80     	; 0x840 <Motor_Tick+0x29c>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 e9 07 	sts	0x07E9, r24
     7f6:	24 c0       	rjmp	.+72     	; 0x840 <Motor_Tick+0x29c>
     7f8:	64 e0       	ldi	r22, 0x04	; 4
     7fa:	86 0e       	add	r8, r22
     7fc:	91 1c       	adc	r9, r1
     7fe:	ad 81       	ldd	r26, Y+5	; 0x05
     800:	be 81       	ldd	r27, Y+6	; 0x06
     802:	2d 91       	ld	r18, X+
     804:	3d 91       	ld	r19, X+
     806:	4d 91       	ld	r20, X+
     808:	5c 91       	ld	r21, X
     80a:	ef 81       	ldd	r30, Y+7	; 0x07
     80c:	f8 85       	ldd	r31, Y+8	; 0x08
     80e:	60 81       	ld	r22, Z
     810:	71 81       	ldd	r23, Z+1	; 0x01
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	93 81       	ldd	r25, Z+3	; 0x03
     816:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	59 f2       	breq	.-106    	; 0x7b4 <Motor_Tick+0x210>
     81e:	4b 81       	ldd	r20, Y+3	; 0x03
     820:	5c 81       	ldd	r21, Y+4	; 0x04
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	72 2d       	mov	r23, r2
     828:	fa 01       	movw	r30, r20
     82a:	49 85       	ldd	r20, Y+9	; 0x09
     82c:	5a 85       	ldd	r21, Y+10	; 0x0a
     82e:	73 2c       	mov	r7, r3
     830:	55 cf       	rjmp	.-342    	; 0x6dc <Motor_Tick+0x138>
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <Motor_Tick+0x296>
     838:	a8 cf       	rjmp	.-176    	; 0x78a <Motor_Tick+0x1e6>
     83a:	81 50       	subi	r24, 0x01	; 1
     83c:	80 83       	st	Z, r24
     83e:	ba cf       	rjmp	.-140    	; 0x7b4 <Motor_Tick+0x210>
     840:	2a 96       	adiw	r28, 0x0a	; 10
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	7f 90       	pop	r7
     866:	6f 90       	pop	r6
     868:	5f 90       	pop	r5
     86a:	4f 90       	pop	r4
     86c:	3f 90       	pop	r3
     86e:	2f 90       	pop	r2
     870:	08 95       	ret

00000872 <Motor_Task>:
     872:	10 92 e9 07 	sts	0x07E9, r1
     876:	96 de       	rcall	.-724    	; 0x5a4 <Motor_Tick>
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <vTaskDelay>
     880:	fa cf       	rjmp	.-12     	; 0x876 <Motor_Task+0x4>

00000882 <Move_Tick>:
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	80 91 ef 07 	lds	r24, 0x07EF
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	19 f0       	breq	.+6      	; 0x894 <Move_Tick+0x12>
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	d9 f0       	breq	.+54     	; 0x8c8 <Move_Tick+0x46>
     892:	34 c0       	rjmp	.+104    	; 0x8fc <Move_Tick+0x7a>
     894:	20 91 06 01 	lds	r18, 0x0106
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	ac 01       	movw	r20, r24
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <Move_Tick+0x24>
     8a2:	44 0f       	add	r20, r20
     8a4:	55 1f       	adc	r21, r21
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <Move_Tick+0x20>
     8aa:	34 2f       	mov	r19, r20
     8ac:	30 95       	com	r19
     8ae:	40 91 47 01 	lds	r20, 0x0147
     8b2:	34 23       	and	r19, r20
     8b4:	2f 5f       	subi	r18, 0xFF	; 255
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <Move_Tick+0x3a>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	2a 95       	dec	r18
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <Move_Tick+0x36>
     8c0:	83 2b       	or	r24, r19
     8c2:	80 93 47 01 	sts	0x0147, r24
     8c6:	2f c0       	rjmp	.+94     	; 0x926 <Move_Tick+0xa4>
     8c8:	40 91 06 01 	lds	r20, 0x0106
     8cc:	21 e0       	ldi	r18, 0x01	; 1
     8ce:	24 0f       	add	r18, r20
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	bc 01       	movw	r22, r24
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <Move_Tick+0x5a>
     8d8:	66 0f       	add	r22, r22
     8da:	77 1f       	adc	r23, r23
     8dc:	2a 95       	dec	r18
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <Move_Tick+0x56>
     8e0:	9b 01       	movw	r18, r22
     8e2:	20 95       	com	r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <Move_Tick+0x68>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	4a 95       	dec	r20
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <Move_Tick+0x64>
     8ee:	90 91 47 01 	lds	r25, 0x0147
     8f2:	89 2b       	or	r24, r25
     8f4:	82 23       	and	r24, r18
     8f6:	80 93 47 01 	sts	0x0147, r24
     8fa:	fe c1       	rjmp	.+1020   	; 0xcf8 <Move_Tick+0x476>
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	09 f4       	brne	.+2      	; 0x902 <Move_Tick+0x80>
     900:	d4 c1       	rjmp	.+936    	; 0xcaa <Move_Tick+0x428>
     902:	30 f4       	brcc	.+12     	; 0x910 <Move_Tick+0x8e>
     904:	88 23       	and	r24, r24
     906:	59 f0       	breq	.+22     	; 0x91e <Move_Tick+0x9c>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	09 f0       	breq	.+2      	; 0x90e <Move_Tick+0x8c>
     90c:	30 c3       	rjmp	.+1632   	; 0xf6e <Move_Tick+0x6ec>
     90e:	0b c0       	rjmp	.+22     	; 0x926 <Move_Tick+0xa4>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	09 f4       	brne	.+2      	; 0x916 <Move_Tick+0x94>
     914:	f1 c1       	rjmp	.+994    	; 0xcf8 <Move_Tick+0x476>
     916:	84 30       	cpi	r24, 0x04	; 4
     918:	09 f4       	brne	.+2      	; 0x91c <Move_Tick+0x9a>
     91a:	12 c3       	rjmp	.+1572   	; 0xf40 <Move_Tick+0x6be>
     91c:	28 c3       	rjmp	.+1616   	; 0xf6e <Move_Tick+0x6ec>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 ef 07 	sts	0x07EF, r24
     924:	26 c3       	rjmp	.+1612   	; 0xf72 <Move_Tick+0x6f0>
     926:	80 91 62 07 	lds	r24, 0x0762
     92a:	81 11       	cpse	r24, r1
     92c:	04 c0       	rjmp	.+8      	; 0x936 <Move_Tick+0xb4>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	80 93 ef 07 	sts	0x07EF, r24
     934:	1e c3       	rjmp	.+1596   	; 0xf72 <Move_Tick+0x6f0>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	80 93 ef 07 	sts	0x07EF, r24
     93c:	80 91 e2 07 	lds	r24, 0x07E2
     940:	90 91 e3 07 	lds	r25, 0x07E3
     944:	bc dd       	rcall	.-1160   	; 0x4be <QueueDequeue>
     946:	80 93 63 07 	sts	0x0763, r24
     94a:	90 91 62 07 	lds	r25, 0x0762
     94e:	91 50       	subi	r25, 0x01	; 1
     950:	90 93 62 07 	sts	0x0762, r25
     954:	81 11       	cpse	r24, r1
     956:	23 c0       	rjmp	.+70     	; 0x99e <Move_Tick+0x11c>
     958:	c5 e7       	ldi	r28, 0x75	; 117
     95a:	d7 e0       	ldi	r29, 0x07	; 7
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	44 eb       	ldi	r20, 0xB4	; 180
     962:	52 e4       	ldi	r21, 0x42	; 66
     964:	6c 81       	ldd	r22, Y+4	; 0x04
     966:	7d 81       	ldd	r23, Y+5	; 0x05
     968:	8e 81       	ldd	r24, Y+6	; 0x06
     96a:	9f 81       	ldd	r25, Y+7	; 0x07
     96c:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     970:	6c 83       	std	Y+4, r22	; 0x04
     972:	7d 83       	std	Y+5, r23	; 0x05
     974:	8e 83       	std	Y+6, r24	; 0x06
     976:	9f 83       	std	Y+7, r25	; 0x07
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	80 93 3c 01 	sts	0x013C, r24
     97e:	89 e7       	ldi	r24, 0x79	; 121
     980:	97 e0       	ldi	r25, 0x07	; 7
     982:	90 93 f2 07 	sts	0x07F2, r25
     986:	80 93 f1 07 	sts	0x07F1, r24
     98a:	89 e6       	ldi	r24, 0x69	; 105
     98c:	97 e0       	ldi	r25, 0x07	; 7
     98e:	90 93 e8 07 	sts	0x07E8, r25
     992:	80 93 e7 07 	sts	0x07E7, r24
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 06 01 	sts	0x0106, r24
     99c:	ea c2       	rjmp	.+1492   	; 0xf72 <Move_Tick+0x6f0>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	11 f5       	brne	.+68     	; 0x9e6 <Move_Tick+0x164>
     9a2:	c5 e7       	ldi	r28, 0x75	; 117
     9a4:	d7 e0       	ldi	r29, 0x07	; 7
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	44 eb       	ldi	r20, 0xB4	; 180
     9ac:	52 e4       	ldi	r21, 0x42	; 66
     9ae:	6c 81       	ldd	r22, Y+4	; 0x04
     9b0:	7d 81       	ldd	r23, Y+5	; 0x05
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	9f 81       	ldd	r25, Y+7	; 0x07
     9b6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__subsf3>
     9ba:	6c 83       	std	Y+4, r22	; 0x04
     9bc:	7d 83       	std	Y+5, r23	; 0x05
     9be:	8e 83       	std	Y+6, r24	; 0x06
     9c0:	9f 83       	std	Y+7, r25	; 0x07
     9c2:	10 92 3c 01 	sts	0x013C, r1
     9c6:	89 e7       	ldi	r24, 0x79	; 121
     9c8:	97 e0       	ldi	r25, 0x07	; 7
     9ca:	90 93 f2 07 	sts	0x07F2, r25
     9ce:	80 93 f1 07 	sts	0x07F1, r24
     9d2:	89 e6       	ldi	r24, 0x69	; 105
     9d4:	97 e0       	ldi	r25, 0x07	; 7
     9d6:	90 93 e8 07 	sts	0x07E8, r25
     9da:	80 93 e7 07 	sts	0x07E7, r24
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	80 93 06 01 	sts	0x0106, r24
     9e4:	c6 c2       	rjmp	.+1420   	; 0xf72 <Move_Tick+0x6f0>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	19 f5       	brne	.+70     	; 0xa30 <Move_Tick+0x1ae>
     9ea:	c5 e7       	ldi	r28, 0x75	; 117
     9ec:	d7 e0       	ldi	r29, 0x07	; 7
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	44 e3       	ldi	r20, 0x34	; 52
     9f4:	53 e4       	ldi	r21, 0x43	; 67
     9f6:	6c 81       	ldd	r22, Y+4	; 0x04
     9f8:	7d 81       	ldd	r23, Y+5	; 0x05
     9fa:	8e 81       	ldd	r24, Y+6	; 0x06
     9fc:	9f 81       	ldd	r25, Y+7	; 0x07
     9fe:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     a02:	6c 83       	std	Y+4, r22	; 0x04
     a04:	7d 83       	std	Y+5, r23	; 0x05
     a06:	8e 83       	std	Y+6, r24	; 0x06
     a08:	9f 83       	std	Y+7, r25	; 0x07
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 3c 01 	sts	0x013C, r24
     a10:	89 e7       	ldi	r24, 0x79	; 121
     a12:	97 e0       	ldi	r25, 0x07	; 7
     a14:	90 93 f2 07 	sts	0x07F2, r25
     a18:	80 93 f1 07 	sts	0x07F1, r24
     a1c:	89 e6       	ldi	r24, 0x69	; 105
     a1e:	97 e0       	ldi	r25, 0x07	; 7
     a20:	90 93 e8 07 	sts	0x07E8, r25
     a24:	80 93 e7 07 	sts	0x07E7, r24
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 06 01 	sts	0x0106, r24
     a2e:	a1 c2       	rjmp	.+1346   	; 0xf72 <Move_Tick+0x6f0>
     a30:	83 30       	cpi	r24, 0x03	; 3
     a32:	01 f5       	brne	.+64     	; 0xa74 <Move_Tick+0x1f2>
     a34:	c5 e7       	ldi	r28, 0x75	; 117
     a36:	d7 e0       	ldi	r29, 0x07	; 7
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	44 eb       	ldi	r20, 0xB4	; 180
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	68 81       	ld	r22, Y
     a42:	79 81       	ldd	r23, Y+1	; 0x01
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	9b 81       	ldd	r25, Y+3	; 0x03
     a48:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     a4c:	68 83       	st	Y, r22
     a4e:	79 83       	std	Y+1, r23	; 0x01
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	80 93 3b 01 	sts	0x013B, r24
     a5a:	d0 93 f2 07 	sts	0x07F2, r29
     a5e:	c0 93 f1 07 	sts	0x07F1, r28
     a62:	85 e6       	ldi	r24, 0x65	; 101
     a64:	97 e0       	ldi	r25, 0x07	; 7
     a66:	90 93 e8 07 	sts	0x07E8, r25
     a6a:	80 93 e7 07 	sts	0x07E7, r24
     a6e:	10 92 06 01 	sts	0x0106, r1
     a72:	7f c2       	rjmp	.+1278   	; 0xf72 <Move_Tick+0x6f0>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	f9 f4       	brne	.+62     	; 0xab6 <Move_Tick+0x234>
     a78:	c5 e7       	ldi	r28, 0x75	; 117
     a7a:	d7 e0       	ldi	r29, 0x07	; 7
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	44 eb       	ldi	r20, 0xB4	; 180
     a82:	52 e4       	ldi	r21, 0x42	; 66
     a84:	68 81       	ld	r22, Y
     a86:	79 81       	ldd	r23, Y+1	; 0x01
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	9b 81       	ldd	r25, Y+3	; 0x03
     a8c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__subsf3>
     a90:	68 83       	st	Y, r22
     a92:	79 83       	std	Y+1, r23	; 0x01
     a94:	8a 83       	std	Y+2, r24	; 0x02
     a96:	9b 83       	std	Y+3, r25	; 0x03
     a98:	10 92 3b 01 	sts	0x013B, r1
     a9c:	d0 93 f2 07 	sts	0x07F2, r29
     aa0:	c0 93 f1 07 	sts	0x07F1, r28
     aa4:	85 e6       	ldi	r24, 0x65	; 101
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	90 93 e8 07 	sts	0x07E8, r25
     aac:	80 93 e7 07 	sts	0x07E7, r24
     ab0:	10 92 06 01 	sts	0x0106, r1
     ab4:	5e c2       	rjmp	.+1212   	; 0xf72 <Move_Tick+0x6f0>
     ab6:	85 30       	cpi	r24, 0x05	; 5
     ab8:	01 f5       	brne	.+64     	; 0xafa <Move_Tick+0x278>
     aba:	c5 e7       	ldi	r28, 0x75	; 117
     abc:	d7 e0       	ldi	r29, 0x07	; 7
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	44 e3       	ldi	r20, 0x34	; 52
     ac4:	53 e4       	ldi	r21, 0x43	; 67
     ac6:	68 81       	ld	r22, Y
     ac8:	79 81       	ldd	r23, Y+1	; 0x01
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     ad2:	68 83       	st	Y, r22
     ad4:	79 83       	std	Y+1, r23	; 0x01
     ad6:	8a 83       	std	Y+2, r24	; 0x02
     ad8:	9b 83       	std	Y+3, r25	; 0x03
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 3b 01 	sts	0x013B, r24
     ae0:	d0 93 f2 07 	sts	0x07F2, r29
     ae4:	c0 93 f1 07 	sts	0x07F1, r28
     ae8:	85 e6       	ldi	r24, 0x65	; 101
     aea:	97 e0       	ldi	r25, 0x07	; 7
     aec:	90 93 e8 07 	sts	0x07E8, r25
     af0:	80 93 e7 07 	sts	0x07E7, r24
     af4:	10 92 06 01 	sts	0x0106, r1
     af8:	3c c2       	rjmp	.+1144   	; 0xf72 <Move_Tick+0x6f0>
     afa:	86 30       	cpi	r24, 0x06	; 6
     afc:	19 f5       	brne	.+70     	; 0xb44 <Move_Tick+0x2c2>
     afe:	c5 e7       	ldi	r28, 0x75	; 117
     b00:	d7 e0       	ldi	r29, 0x07	; 7
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	44 eb       	ldi	r20, 0xB4	; 180
     b08:	52 e4       	ldi	r21, 0x42	; 66
     b0a:	68 85       	ldd	r22, Y+8	; 0x08
     b0c:	79 85       	ldd	r23, Y+9	; 0x09
     b0e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b10:	9b 85       	ldd	r25, Y+11	; 0x0b
     b12:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <__addsf3>
     b16:	68 87       	std	Y+8, r22	; 0x08
     b18:	79 87       	std	Y+9, r23	; 0x09
     b1a:	8a 87       	std	Y+10, r24	; 0x0a
     b1c:	9b 87       	std	Y+11, r25	; 0x0b
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 3d 01 	sts	0x013D, r24
     b24:	8d e7       	ldi	r24, 0x7D	; 125
     b26:	97 e0       	ldi	r25, 0x07	; 7
     b28:	90 93 f2 07 	sts	0x07F2, r25
     b2c:	80 93 f1 07 	sts	0x07F1, r24
     b30:	8d e6       	ldi	r24, 0x6D	; 109
     b32:	97 e0       	ldi	r25, 0x07	; 7
     b34:	90 93 e8 07 	sts	0x07E8, r25
     b38:	80 93 e7 07 	sts	0x07E7, r24
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	80 93 06 01 	sts	0x0106, r24
     b42:	17 c2       	rjmp	.+1070   	; 0xf72 <Move_Tick+0x6f0>
     b44:	87 30       	cpi	r24, 0x07	; 7
     b46:	09 f5       	brne	.+66     	; 0xb8a <Move_Tick+0x308>
     b48:	c5 e7       	ldi	r28, 0x75	; 117
     b4a:	d7 e0       	ldi	r29, 0x07	; 7
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	44 eb       	ldi	r20, 0xB4	; 180
     b52:	52 e4       	ldi	r21, 0x42	; 66
     b54:	68 85       	ldd	r22, Y+8	; 0x08
     b56:	79 85       	ldd	r23, Y+9	; 0x09
     b58:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     b5c:	eb d7       	rcall	.+4054   	; 0x1b34 <__subsf3>
     b5e:	68 87       	std	Y+8, r22	; 0x08
     b60:	79 87       	std	Y+9, r23	; 0x09
     b62:	8a 87       	std	Y+10, r24	; 0x0a
     b64:	9b 87       	std	Y+11, r25	; 0x0b
     b66:	10 92 3d 01 	sts	0x013D, r1
     b6a:	8d e7       	ldi	r24, 0x7D	; 125
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	90 93 f2 07 	sts	0x07F2, r25
     b72:	80 93 f1 07 	sts	0x07F1, r24
     b76:	8d e6       	ldi	r24, 0x6D	; 109
     b78:	97 e0       	ldi	r25, 0x07	; 7
     b7a:	90 93 e8 07 	sts	0x07E8, r25
     b7e:	80 93 e7 07 	sts	0x07E7, r24
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	80 93 06 01 	sts	0x0106, r24
     b88:	f4 c1       	rjmp	.+1000   	; 0xf72 <Move_Tick+0x6f0>
     b8a:	88 30       	cpi	r24, 0x08	; 8
     b8c:	11 f5       	brne	.+68     	; 0xbd2 <Move_Tick+0x350>
     b8e:	c5 e7       	ldi	r28, 0x75	; 117
     b90:	d7 e0       	ldi	r29, 0x07	; 7
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	30 e0       	ldi	r19, 0x00	; 0
     b96:	44 e3       	ldi	r20, 0x34	; 52
     b98:	53 e4       	ldi	r21, 0x43	; 67
     b9a:	68 85       	ldd	r22, Y+8	; 0x08
     b9c:	79 85       	ldd	r23, Y+9	; 0x09
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	c9 d7       	rcall	.+3986   	; 0x1b36 <__addsf3>
     ba4:	68 87       	std	Y+8, r22	; 0x08
     ba6:	79 87       	std	Y+9, r23	; 0x09
     ba8:	8a 87       	std	Y+10, r24	; 0x0a
     baa:	9b 87       	std	Y+11, r25	; 0x0b
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	80 93 3d 01 	sts	0x013D, r24
     bb2:	8d e7       	ldi	r24, 0x7D	; 125
     bb4:	97 e0       	ldi	r25, 0x07	; 7
     bb6:	90 93 f2 07 	sts	0x07F2, r25
     bba:	80 93 f1 07 	sts	0x07F1, r24
     bbe:	8d e6       	ldi	r24, 0x6D	; 109
     bc0:	97 e0       	ldi	r25, 0x07	; 7
     bc2:	90 93 e8 07 	sts	0x07E8, r25
     bc6:	80 93 e7 07 	sts	0x07E7, r24
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	80 93 06 01 	sts	0x0106, r24
     bd0:	d0 c1       	rjmp	.+928    	; 0xf72 <Move_Tick+0x6f0>
     bd2:	89 30       	cpi	r24, 0x09	; 9
     bd4:	11 f5       	brne	.+68     	; 0xc1a <Move_Tick+0x398>
     bd6:	c5 e7       	ldi	r28, 0x75	; 117
     bd8:	d7 e0       	ldi	r29, 0x07	; 7
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	44 eb       	ldi	r20, 0xB4	; 180
     be0:	52 e4       	ldi	r21, 0x42	; 66
     be2:	6c 85       	ldd	r22, Y+12	; 0x0c
     be4:	7d 85       	ldd	r23, Y+13	; 0x0d
     be6:	8e 85       	ldd	r24, Y+14	; 0x0e
     be8:	9f 85       	ldd	r25, Y+15	; 0x0f
     bea:	a5 d7       	rcall	.+3914   	; 0x1b36 <__addsf3>
     bec:	6c 87       	std	Y+12, r22	; 0x0c
     bee:	7d 87       	std	Y+13, r23	; 0x0d
     bf0:	8e 87       	std	Y+14, r24	; 0x0e
     bf2:	9f 87       	std	Y+15, r25	; 0x0f
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 3e 01 	sts	0x013E, r24
     bfa:	81 e8       	ldi	r24, 0x81	; 129
     bfc:	97 e0       	ldi	r25, 0x07	; 7
     bfe:	90 93 f2 07 	sts	0x07F2, r25
     c02:	80 93 f1 07 	sts	0x07F1, r24
     c06:	81 e7       	ldi	r24, 0x71	; 113
     c08:	97 e0       	ldi	r25, 0x07	; 7
     c0a:	90 93 e8 07 	sts	0x07E8, r25
     c0e:	80 93 e7 07 	sts	0x07E7, r24
     c12:	86 e0       	ldi	r24, 0x06	; 6
     c14:	80 93 06 01 	sts	0x0106, r24
     c18:	ac c1       	rjmp	.+856    	; 0xf72 <Move_Tick+0x6f0>
     c1a:	8a 30       	cpi	r24, 0x0A	; 10
     c1c:	09 f5       	brne	.+66     	; 0xc60 <Move_Tick+0x3de>
     c1e:	c5 e7       	ldi	r28, 0x75	; 117
     c20:	d7 e0       	ldi	r29, 0x07	; 7
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	44 eb       	ldi	r20, 0xB4	; 180
     c28:	52 e4       	ldi	r21, 0x42	; 66
     c2a:	6c 85       	ldd	r22, Y+12	; 0x0c
     c2c:	7d 85       	ldd	r23, Y+13	; 0x0d
     c2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c30:	9f 85       	ldd	r25, Y+15	; 0x0f
     c32:	80 d7       	rcall	.+3840   	; 0x1b34 <__subsf3>
     c34:	6c 87       	std	Y+12, r22	; 0x0c
     c36:	7d 87       	std	Y+13, r23	; 0x0d
     c38:	8e 87       	std	Y+14, r24	; 0x0e
     c3a:	9f 87       	std	Y+15, r25	; 0x0f
     c3c:	10 92 3e 01 	sts	0x013E, r1
     c40:	81 e8       	ldi	r24, 0x81	; 129
     c42:	97 e0       	ldi	r25, 0x07	; 7
     c44:	90 93 f2 07 	sts	0x07F2, r25
     c48:	80 93 f1 07 	sts	0x07F1, r24
     c4c:	81 e7       	ldi	r24, 0x71	; 113
     c4e:	97 e0       	ldi	r25, 0x07	; 7
     c50:	90 93 e8 07 	sts	0x07E8, r25
     c54:	80 93 e7 07 	sts	0x07E7, r24
     c58:	86 e0       	ldi	r24, 0x06	; 6
     c5a:	80 93 06 01 	sts	0x0106, r24
     c5e:	89 c1       	rjmp	.+786    	; 0xf72 <Move_Tick+0x6f0>
     c60:	8b 30       	cpi	r24, 0x0B	; 11
     c62:	09 f0       	breq	.+2      	; 0xc66 <Move_Tick+0x3e4>
     c64:	86 c1       	rjmp	.+780    	; 0xf72 <Move_Tick+0x6f0>
     c66:	c5 e7       	ldi	r28, 0x75	; 117
     c68:	d7 e0       	ldi	r29, 0x07	; 7
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	44 e3       	ldi	r20, 0x34	; 52
     c70:	53 e4       	ldi	r21, 0x43	; 67
     c72:	6c 85       	ldd	r22, Y+12	; 0x0c
     c74:	7d 85       	ldd	r23, Y+13	; 0x0d
     c76:	8e 85       	ldd	r24, Y+14	; 0x0e
     c78:	9f 85       	ldd	r25, Y+15	; 0x0f
     c7a:	5d d7       	rcall	.+3770   	; 0x1b36 <__addsf3>
     c7c:	6c 87       	std	Y+12, r22	; 0x0c
     c7e:	7d 87       	std	Y+13, r23	; 0x0d
     c80:	8e 87       	std	Y+14, r24	; 0x0e
     c82:	9f 87       	std	Y+15, r25	; 0x0f
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	80 93 3e 01 	sts	0x013E, r24
     c8a:	81 e8       	ldi	r24, 0x81	; 129
     c8c:	97 e0       	ldi	r25, 0x07	; 7
     c8e:	90 93 f2 07 	sts	0x07F2, r25
     c92:	80 93 f1 07 	sts	0x07F1, r24
     c96:	81 e7       	ldi	r24, 0x71	; 113
     c98:	97 e0       	ldi	r25, 0x07	; 7
     c9a:	90 93 e8 07 	sts	0x07E8, r25
     c9e:	80 93 e7 07 	sts	0x07E7, r24
     ca2:	86 e0       	ldi	r24, 0x06	; 6
     ca4:	80 93 06 01 	sts	0x0106, r24
     ca8:	64 c1       	rjmp	.+712    	; 0xf72 <Move_Tick+0x6f0>
     caa:	e0 91 f1 07 	lds	r30, 0x07F1
     cae:	f0 91 f2 07 	lds	r31, 0x07F2
     cb2:	a0 91 e7 07 	lds	r26, 0x07E7
     cb6:	b0 91 e8 07 	lds	r27, 0x07E8
     cba:	2d 91       	ld	r18, X+
     cbc:	3d 91       	ld	r19, X+
     cbe:	4d 91       	ld	r20, X+
     cc0:	5c 91       	ld	r21, X
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	99 d7       	rcall	.+3890   	; 0x1bfe <__cmpsf2>
     ccc:	81 11       	cpse	r24, r1
     cce:	51 c1       	rjmp	.+674    	; 0xf72 <Move_Tick+0x6f0>
     cd0:	80 91 63 07 	lds	r24, 0x0763
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	31 f0       	breq	.+12     	; 0xce4 <Move_Tick+0x462>
     cd8:	85 30       	cpi	r24, 0x05	; 5
     cda:	21 f0       	breq	.+8      	; 0xce4 <Move_Tick+0x462>
     cdc:	88 30       	cpi	r24, 0x08	; 8
     cde:	11 f0       	breq	.+4      	; 0xce4 <Move_Tick+0x462>
     ce0:	8b 30       	cpi	r24, 0x0B	; 11
     ce2:	21 f4       	brne	.+8      	; 0xcec <Move_Tick+0x46a>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 93 ef 07 	sts	0x07EF, r24
     cea:	43 c1       	rjmp	.+646    	; 0xf72 <Move_Tick+0x6f0>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	80 93 ef 07 	sts	0x07EF, r24
     cf2:	10 92 64 07 	sts	0x0764, r1
     cf6:	3d c1       	rjmp	.+634    	; 0xf72 <Move_Tick+0x6f0>
     cf8:	80 91 64 07 	lds	r24, 0x0764
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	98 0f       	add	r25, r24
     d00:	90 93 64 07 	sts	0x0764, r25
     d04:	83 33       	cpi	r24, 0x33	; 51
     d06:	08 f4       	brcc	.+2      	; 0xd0a <Move_Tick+0x488>
     d08:	34 c1       	rjmp	.+616    	; 0xf72 <Move_Tick+0x6f0>
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	80 93 ef 07 	sts	0x07EF, r24
     d10:	80 91 63 07 	lds	r24, 0x0763
     d14:	81 11       	cpse	r24, r1
     d16:	21 c0       	rjmp	.+66     	; 0xd5a <Move_Tick+0x4d8>
     d18:	c5 e7       	ldi	r28, 0x75	; 117
     d1a:	d7 e0       	ldi	r29, 0x07	; 7
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	44 eb       	ldi	r20, 0xB4	; 180
     d22:	52 e4       	ldi	r21, 0x42	; 66
     d24:	6c 81       	ldd	r22, Y+4	; 0x04
     d26:	7d 81       	ldd	r23, Y+5	; 0x05
     d28:	8e 81       	ldd	r24, Y+6	; 0x06
     d2a:	9f 81       	ldd	r25, Y+7	; 0x07
     d2c:	03 d7       	rcall	.+3590   	; 0x1b34 <__subsf3>
     d2e:	6c 83       	std	Y+4, r22	; 0x04
     d30:	7d 83       	std	Y+5, r23	; 0x05
     d32:	8e 83       	std	Y+6, r24	; 0x06
     d34:	9f 83       	std	Y+7, r25	; 0x07
     d36:	10 92 3c 01 	sts	0x013C, r1
     d3a:	89 e7       	ldi	r24, 0x79	; 121
     d3c:	97 e0       	ldi	r25, 0x07	; 7
     d3e:	90 93 f2 07 	sts	0x07F2, r25
     d42:	80 93 f1 07 	sts	0x07F1, r24
     d46:	89 e6       	ldi	r24, 0x69	; 105
     d48:	97 e0       	ldi	r25, 0x07	; 7
     d4a:	90 93 e8 07 	sts	0x07E8, r25
     d4e:	80 93 e7 07 	sts	0x07E7, r24
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	80 93 06 01 	sts	0x0106, r24
     d58:	0c c1       	rjmp	.+536    	; 0xf72 <Move_Tick+0x6f0>
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	11 f5       	brne	.+68     	; 0xda2 <Move_Tick+0x520>
     d5e:	c5 e7       	ldi	r28, 0x75	; 117
     d60:	d7 e0       	ldi	r29, 0x07	; 7
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	44 eb       	ldi	r20, 0xB4	; 180
     d68:	52 e4       	ldi	r21, 0x42	; 66
     d6a:	6c 81       	ldd	r22, Y+4	; 0x04
     d6c:	7d 81       	ldd	r23, Y+5	; 0x05
     d6e:	8e 81       	ldd	r24, Y+6	; 0x06
     d70:	9f 81       	ldd	r25, Y+7	; 0x07
     d72:	e1 d6       	rcall	.+3522   	; 0x1b36 <__addsf3>
     d74:	6c 83       	std	Y+4, r22	; 0x04
     d76:	7d 83       	std	Y+5, r23	; 0x05
     d78:	8e 83       	std	Y+6, r24	; 0x06
     d7a:	9f 83       	std	Y+7, r25	; 0x07
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	80 93 3c 01 	sts	0x013C, r24
     d82:	89 e7       	ldi	r24, 0x79	; 121
     d84:	97 e0       	ldi	r25, 0x07	; 7
     d86:	90 93 f2 07 	sts	0x07F2, r25
     d8a:	80 93 f1 07 	sts	0x07F1, r24
     d8e:	89 e6       	ldi	r24, 0x69	; 105
     d90:	97 e0       	ldi	r25, 0x07	; 7
     d92:	90 93 e8 07 	sts	0x07E8, r25
     d96:	80 93 e7 07 	sts	0x07E7, r24
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 93 06 01 	sts	0x0106, r24
     da0:	e8 c0       	rjmp	.+464    	; 0xf72 <Move_Tick+0x6f0>
     da2:	83 30       	cpi	r24, 0x03	; 3
     da4:	f1 f4       	brne	.+60     	; 0xde2 <Move_Tick+0x560>
     da6:	c5 e7       	ldi	r28, 0x75	; 117
     da8:	d7 e0       	ldi	r29, 0x07	; 7
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	44 eb       	ldi	r20, 0xB4	; 180
     db0:	52 e4       	ldi	r21, 0x42	; 66
     db2:	68 81       	ld	r22, Y
     db4:	79 81       	ldd	r23, Y+1	; 0x01
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	bc d6       	rcall	.+3448   	; 0x1b34 <__subsf3>
     dbc:	68 83       	st	Y, r22
     dbe:	79 83       	std	Y+1, r23	; 0x01
     dc0:	8a 83       	std	Y+2, r24	; 0x02
     dc2:	9b 83       	std	Y+3, r25	; 0x03
     dc4:	10 92 3b 01 	sts	0x013B, r1
     dc8:	d0 93 f2 07 	sts	0x07F2, r29
     dcc:	c0 93 f1 07 	sts	0x07F1, r28
     dd0:	85 e6       	ldi	r24, 0x65	; 101
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	90 93 e8 07 	sts	0x07E8, r25
     dd8:	80 93 e7 07 	sts	0x07E7, r24
     ddc:	10 92 06 01 	sts	0x0106, r1
     de0:	c8 c0       	rjmp	.+400    	; 0xf72 <Move_Tick+0x6f0>
     de2:	84 30       	cpi	r24, 0x04	; 4
     de4:	f9 f4       	brne	.+62     	; 0xe24 <Move_Tick+0x5a2>
     de6:	c5 e7       	ldi	r28, 0x75	; 117
     de8:	d7 e0       	ldi	r29, 0x07	; 7
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	44 eb       	ldi	r20, 0xB4	; 180
     df0:	52 e4       	ldi	r21, 0x42	; 66
     df2:	68 81       	ld	r22, Y
     df4:	79 81       	ldd	r23, Y+1	; 0x01
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	9b 81       	ldd	r25, Y+3	; 0x03
     dfa:	9d d6       	rcall	.+3386   	; 0x1b36 <__addsf3>
     dfc:	68 83       	st	Y, r22
     dfe:	79 83       	std	Y+1, r23	; 0x01
     e00:	8a 83       	std	Y+2, r24	; 0x02
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	80 93 3b 01 	sts	0x013B, r24
     e0a:	d0 93 f2 07 	sts	0x07F2, r29
     e0e:	c0 93 f1 07 	sts	0x07F1, r28
     e12:	85 e6       	ldi	r24, 0x65	; 101
     e14:	97 e0       	ldi	r25, 0x07	; 7
     e16:	90 93 e8 07 	sts	0x07E8, r25
     e1a:	80 93 e7 07 	sts	0x07E7, r24
     e1e:	10 92 06 01 	sts	0x0106, r1
     e22:	a7 c0       	rjmp	.+334    	; 0xf72 <Move_Tick+0x6f0>
     e24:	86 30       	cpi	r24, 0x06	; 6
     e26:	09 f5       	brne	.+66     	; 0xe6a <Move_Tick+0x5e8>
     e28:	c5 e7       	ldi	r28, 0x75	; 117
     e2a:	d7 e0       	ldi	r29, 0x07	; 7
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	44 eb       	ldi	r20, 0xB4	; 180
     e32:	52 e4       	ldi	r21, 0x42	; 66
     e34:	68 85       	ldd	r22, Y+8	; 0x08
     e36:	79 85       	ldd	r23, Y+9	; 0x09
     e38:	8a 85       	ldd	r24, Y+10	; 0x0a
     e3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3c:	7b d6       	rcall	.+3318   	; 0x1b34 <__subsf3>
     e3e:	68 87       	std	Y+8, r22	; 0x08
     e40:	79 87       	std	Y+9, r23	; 0x09
     e42:	8a 87       	std	Y+10, r24	; 0x0a
     e44:	9b 87       	std	Y+11, r25	; 0x0b
     e46:	10 92 3d 01 	sts	0x013D, r1
     e4a:	8d e7       	ldi	r24, 0x7D	; 125
     e4c:	97 e0       	ldi	r25, 0x07	; 7
     e4e:	90 93 f2 07 	sts	0x07F2, r25
     e52:	80 93 f1 07 	sts	0x07F1, r24
     e56:	8d e6       	ldi	r24, 0x6D	; 109
     e58:	97 e0       	ldi	r25, 0x07	; 7
     e5a:	90 93 e8 07 	sts	0x07E8, r25
     e5e:	80 93 e7 07 	sts	0x07E7, r24
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	80 93 06 01 	sts	0x0106, r24
     e68:	84 c0       	rjmp	.+264    	; 0xf72 <Move_Tick+0x6f0>
     e6a:	87 30       	cpi	r24, 0x07	; 7
     e6c:	11 f5       	brne	.+68     	; 0xeb2 <Move_Tick+0x630>
     e6e:	c5 e7       	ldi	r28, 0x75	; 117
     e70:	d7 e0       	ldi	r29, 0x07	; 7
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	44 eb       	ldi	r20, 0xB4	; 180
     e78:	52 e4       	ldi	r21, 0x42	; 66
     e7a:	68 85       	ldd	r22, Y+8	; 0x08
     e7c:	79 85       	ldd	r23, Y+9	; 0x09
     e7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e80:	9b 85       	ldd	r25, Y+11	; 0x0b
     e82:	59 d6       	rcall	.+3250   	; 0x1b36 <__addsf3>
     e84:	68 87       	std	Y+8, r22	; 0x08
     e86:	79 87       	std	Y+9, r23	; 0x09
     e88:	8a 87       	std	Y+10, r24	; 0x0a
     e8a:	9b 87       	std	Y+11, r25	; 0x0b
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	80 93 3d 01 	sts	0x013D, r24
     e92:	8d e7       	ldi	r24, 0x7D	; 125
     e94:	97 e0       	ldi	r25, 0x07	; 7
     e96:	90 93 f2 07 	sts	0x07F2, r25
     e9a:	80 93 f1 07 	sts	0x07F1, r24
     e9e:	8d e6       	ldi	r24, 0x6D	; 109
     ea0:	97 e0       	ldi	r25, 0x07	; 7
     ea2:	90 93 e8 07 	sts	0x07E8, r25
     ea6:	80 93 e7 07 	sts	0x07E7, r24
     eaa:	84 e0       	ldi	r24, 0x04	; 4
     eac:	80 93 06 01 	sts	0x0106, r24
     eb0:	60 c0       	rjmp	.+192    	; 0xf72 <Move_Tick+0x6f0>
     eb2:	89 30       	cpi	r24, 0x09	; 9
     eb4:	09 f5       	brne	.+66     	; 0xef8 <Move_Tick+0x676>
     eb6:	c5 e7       	ldi	r28, 0x75	; 117
     eb8:	d7 e0       	ldi	r29, 0x07	; 7
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	44 eb       	ldi	r20, 0xB4	; 180
     ec0:	52 e4       	ldi	r21, 0x42	; 66
     ec2:	6c 85       	ldd	r22, Y+12	; 0x0c
     ec4:	7d 85       	ldd	r23, Y+13	; 0x0d
     ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec8:	9f 85       	ldd	r25, Y+15	; 0x0f
     eca:	34 d6       	rcall	.+3176   	; 0x1b34 <__subsf3>
     ecc:	6c 87       	std	Y+12, r22	; 0x0c
     ece:	7d 87       	std	Y+13, r23	; 0x0d
     ed0:	8e 87       	std	Y+14, r24	; 0x0e
     ed2:	9f 87       	std	Y+15, r25	; 0x0f
     ed4:	10 92 3e 01 	sts	0x013E, r1
     ed8:	81 e8       	ldi	r24, 0x81	; 129
     eda:	97 e0       	ldi	r25, 0x07	; 7
     edc:	90 93 f2 07 	sts	0x07F2, r25
     ee0:	80 93 f1 07 	sts	0x07F1, r24
     ee4:	81 e7       	ldi	r24, 0x71	; 113
     ee6:	97 e0       	ldi	r25, 0x07	; 7
     ee8:	90 93 e8 07 	sts	0x07E8, r25
     eec:	80 93 e7 07 	sts	0x07E7, r24
     ef0:	86 e0       	ldi	r24, 0x06	; 6
     ef2:	80 93 06 01 	sts	0x0106, r24
     ef6:	3d c0       	rjmp	.+122    	; 0xf72 <Move_Tick+0x6f0>
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	d9 f5       	brne	.+118    	; 0xf72 <Move_Tick+0x6f0>
     efc:	c5 e7       	ldi	r28, 0x75	; 117
     efe:	d7 e0       	ldi	r29, 0x07	; 7
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	44 eb       	ldi	r20, 0xB4	; 180
     f06:	52 e4       	ldi	r21, 0x42	; 66
     f08:	6c 85       	ldd	r22, Y+12	; 0x0c
     f0a:	7d 85       	ldd	r23, Y+13	; 0x0d
     f0c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f0e:	9f 85       	ldd	r25, Y+15	; 0x0f
     f10:	12 d6       	rcall	.+3108   	; 0x1b36 <__addsf3>
     f12:	6c 87       	std	Y+12, r22	; 0x0c
     f14:	7d 87       	std	Y+13, r23	; 0x0d
     f16:	8e 87       	std	Y+14, r24	; 0x0e
     f18:	9f 87       	std	Y+15, r25	; 0x0f
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	80 93 3e 01 	sts	0x013E, r24
     f20:	81 e8       	ldi	r24, 0x81	; 129
     f22:	97 e0       	ldi	r25, 0x07	; 7
     f24:	90 93 f2 07 	sts	0x07F2, r25
     f28:	80 93 f1 07 	sts	0x07F1, r24
     f2c:	81 e7       	ldi	r24, 0x71	; 113
     f2e:	97 e0       	ldi	r25, 0x07	; 7
     f30:	90 93 e8 07 	sts	0x07E8, r25
     f34:	80 93 e7 07 	sts	0x07E7, r24
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	80 93 06 01 	sts	0x0106, r24
     f3e:	19 c0       	rjmp	.+50     	; 0xf72 <Move_Tick+0x6f0>
     f40:	e0 91 f1 07 	lds	r30, 0x07F1
     f44:	f0 91 f2 07 	lds	r31, 0x07F2
     f48:	a0 91 e7 07 	lds	r26, 0x07E7
     f4c:	b0 91 e8 07 	lds	r27, 0x07E8
     f50:	2d 91       	ld	r18, X+
     f52:	3d 91       	ld	r19, X+
     f54:	4d 91       	ld	r20, X+
     f56:	5c 91       	ld	r21, X
     f58:	60 81       	ld	r22, Z
     f5a:	71 81       	ldd	r23, Z+1	; 0x01
     f5c:	82 81       	ldd	r24, Z+2	; 0x02
     f5e:	93 81       	ldd	r25, Z+3	; 0x03
     f60:	4e d6       	rcall	.+3228   	; 0x1bfe <__cmpsf2>
     f62:	81 11       	cpse	r24, r1
     f64:	06 c0       	rjmp	.+12     	; 0xf72 <Move_Tick+0x6f0>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 ef 07 	sts	0x07EF, r24
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <Move_Tick+0x6f0>
     f6e:	10 92 ef 07 	sts	0x07EF, r1
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	08 95       	ret

00000f78 <Move_Task>:
     f78:	10 92 ef 07 	sts	0x07EF, r1
     f7c:	82 dc       	rcall	.-1788   	; 0x882 <Move_Tick>
     f7e:	8a e0       	ldi	r24, 0x0A	; 10
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	17 d5       	rcall	.+2606   	; 0x19b2 <vTaskDelay>
     f84:	fb cf       	rjmp	.-10     	; 0xf7c <Move_Task+0x4>

00000f86 <Joy_Tick>:
     f86:	80 91 ed 07 	lds	r24, 0x07ED
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	41 f0       	breq	.+16     	; 0xf9e <Joy_Tick+0x18>
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <Joy_Tick+0x10>
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	b9 f1       	breq	.+110    	; 0x1002 <Joy_Tick+0x7c>
     f94:	43 c0       	rjmp	.+134    	; 0x101c <Joy_Tick+0x96>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	80 93 ed 07 	sts	0x07ED, r24
     f9c:	08 95       	ret
     f9e:	65 d9       	rcall	.-3382   	; 0x26a <joystickSample>
     fa0:	80 91 f0 07 	lds	r24, 0x07F0
     fa4:	81 11       	cpse	r24, r1
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <Joy_Tick+0x2a>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 ed 07 	sts	0x07ED, r24
     fae:	08 95       	ret
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	49 f4       	brne	.+18     	; 0xfc6 <Joy_Tick+0x40>
     fb4:	8b b1       	in	r24, 0x0b	; 11
     fb6:	8b b9       	out	0x0b, r24	; 11
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	80 91 e2 07 	lds	r24, 0x07E2
     fbe:	90 91 e3 07 	lds	r25, 0x07E3
     fc2:	65 da       	rcall	.-2870   	; 0x48e <QueueEnqueue>
     fc4:	1a c0       	rjmp	.+52     	; 0xffa <Joy_Tick+0x74>
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	39 f4       	brne	.+14     	; 0xfd8 <Joy_Tick+0x52>
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	80 91 e2 07 	lds	r24, 0x07E2
     fd0:	90 91 e3 07 	lds	r25, 0x07E3
     fd4:	5c da       	rcall	.-2888   	; 0x48e <QueueEnqueue>
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <Joy_Tick+0x74>
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	39 f4       	brne	.+14     	; 0xfea <Joy_Tick+0x64>
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	80 91 e2 07 	lds	r24, 0x07E2
     fe2:	90 91 e3 07 	lds	r25, 0x07E3
     fe6:	53 da       	rcall	.-2906   	; 0x48e <QueueEnqueue>
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <Joy_Tick+0x74>
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	31 f4       	brne	.+12     	; 0xffa <Joy_Tick+0x74>
     fee:	62 e0       	ldi	r22, 0x02	; 2
     ff0:	80 91 e2 07 	lds	r24, 0x07E2
     ff4:	90 91 e3 07 	lds	r25, 0x07E3
     ff8:	4a da       	rcall	.-2924   	; 0x48e <QueueEnqueue>
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	80 93 ed 07 	sts	0x07ED, r24
    1000:	08 95       	ret
    1002:	33 d9       	rcall	.-3482   	; 0x26a <joystickSample>
    1004:	80 91 f0 07 	lds	r24, 0x07F0
    1008:	81 11       	cpse	r24, r1
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <Joy_Tick+0x8e>
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 ed 07 	sts	0x07ED, r24
    1012:	08 95       	ret
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	80 93 ed 07 	sts	0x07ED, r24
    101a:	08 95       	ret
    101c:	10 92 ed 07 	sts	0x07ED, r1
    1020:	08 95       	ret

00001022 <Joy_Task>:
    1022:	10 92 ed 07 	sts	0x07ED, r1
    1026:	af df       	rcall	.-162    	; 0xf86 <Joy_Tick>
    1028:	84 e1       	ldi	r24, 0x14	; 20
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	c2 d4       	rcall	.+2436   	; 0x19b2 <vTaskDelay>
    102e:	fb cf       	rjmp	.-10     	; 0x1026 <Joy_Task+0x4>

00001030 <Receive_Init>:
    1030:	5c da       	rcall	.-2888   	; 0x4ea <SPI_ServantInit>
    1032:	10 92 ee 07 	sts	0x07EE, r1
    1036:	08 95       	ret

00001038 <Reveiced_Tick>:
    1038:	80 91 ee 07 	lds	r24, 0x07EE
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	61 f4       	brne	.+24     	; 0x1058 <Reveiced_Tick+0x20>
    1040:	60 91 48 01 	lds	r22, 0x0148
    1044:	6c 30       	cpi	r22, 0x0C	; 12
    1046:	28 f4       	brcc	.+10     	; 0x1052 <Reveiced_Tick+0x1a>
    1048:	80 91 e2 07 	lds	r24, 0x07E2
    104c:	90 91 e3 07 	lds	r25, 0x07E3
    1050:	1e da       	rcall	.-3012   	; 0x48e <QueueEnqueue>
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	80 93 48 01 	sts	0x0148, r24
    1058:	80 91 ee 07 	lds	r24, 0x07EE
    105c:	88 23       	and	r24, r24
    105e:	19 f0       	breq	.+6      	; 0x1066 <Reveiced_Tick+0x2e>
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	29 f4       	brne	.+10     	; 0x106e <Reveiced_Tick+0x36>
    1064:	08 95       	ret
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 ee 07 	sts	0x07EE, r24
    106c:	08 95       	ret
    106e:	10 92 ee 07 	sts	0x07EE, r1
    1072:	08 95       	ret

00001074 <Receive_Task>:
    1074:	dd df       	rcall	.-70     	; 0x1030 <Receive_Init>
    1076:	e0 df       	rcall	.-64     	; 0x1038 <Reveiced_Tick>
    1078:	8a e0       	ldi	r24, 0x0A	; 10
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9a d4       	rcall	.+2356   	; 0x19b2 <vTaskDelay>
    107e:	fb cf       	rjmp	.-10     	; 0x1076 <Receive_Task+0x2>

00001080 <But_Tick>:
}

//If the button is pressed, execute all moves currently in the queue
void But_Tick() {
	switch(but_state) {
    1080:	80 91 e6 07 	lds	r24, 0x07E6
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	41 f4       	brne	.+16     	; 0x1098 <But_Tick+0x18>
		case BINIT:
			break;
		case BWAIT:
			break;
		case BPRESSED:
			num_to_execute = moves->num_objects;
    1088:	e0 91 e2 07 	lds	r30, 0x07E2
    108c:	f0 91 e3 07 	lds	r31, 0x07E3
    1090:	84 81       	ldd	r24, Z+4	; 0x04
    1092:	80 93 62 07 	sts	0x0762, r24
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <But_Tick+0x3c>
			break;
		case BPWAIT:
			break;
	}
	
	switch(but_state) {
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	51 f0       	breq	.+20     	; 0x10b0 <But_Tick+0x30>
    109c:	28 f0       	brcs	.+10     	; 0x10a8 <But_Tick+0x28>
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	69 f0       	breq	.+26     	; 0x10bc <But_Tick+0x3c>
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <But_Tick+0x44>
    10a6:	08 95       	ret
		case BINIT:
			but_state = BWAIT;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 e6 07 	sts	0x07E6, r24
			break;
    10ae:	08 95       	ret
		case BWAIT:
			if(~BUTBUS & (1 << BUTPIN)) but_state = BPRESSED;
    10b0:	05 99       	sbic	0x00, 5	; 0
    10b2:	0d c0       	rjmp	.+26     	; 0x10ce <But_Tick+0x4e>
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	80 93 e6 07 	sts	0x07E6, r24
    10ba:	08 95       	ret
			break;
		case BPRESSED:
			but_state = BPWAIT;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	80 93 e6 07 	sts	0x07E6, r24
			break;
    10c2:	08 95       	ret
		case BPWAIT:
			if(!(~BUTBUS & (1 << BUTPIN))) but_state = BWAIT;
    10c4:	05 9b       	sbis	0x00, 5	; 0
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <But_Tick+0x4e>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	80 93 e6 07 	sts	0x07E6, r24
    10ce:	08 95       	ret

000010d0 <But_Task>:
#define BUTBUS PINA
#define BUTPIN 5
enum ButState {BINIT, BWAIT, BPRESSED, BPWAIT} but_state;

void But_Init() {
	but_state = BINIT;
    10d0:	10 92 e6 07 	sts	0x07E6, r1
}

void But_Task() {
	But_Init();
	for(;;) {
		But_Tick();
    10d4:	d5 df       	rcall	.-86     	; 0x1080 <But_Tick>
		vTaskDelay(50);
    10d6:	82 e3       	ldi	r24, 0x32	; 50
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	6b d4       	rcall	.+2262   	; 0x19b2 <vTaskDelay>
	}
    10dc:	fb cf       	rjmp	.-10     	; 0x10d4 <But_Task+0x4>

000010de <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	cf 93       	push	r28
	xTaskCreate(Motor_Task, (signed portCHAR *)"Motorer", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    10ee:	a1 2c       	mov	r10, r1
    10f0:	b1 2c       	mov	r11, r1
    10f2:	c1 2c       	mov	r12, r1
    10f4:	d1 2c       	mov	r13, r1
    10f6:	e1 2c       	mov	r14, r1
    10f8:	f1 2c       	mov	r15, r1
    10fa:	08 2f       	mov	r16, r24
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	45 e5       	ldi	r20, 0x55	; 85
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	6b e4       	ldi	r22, 0x4B	; 75
    1106:	71 e0       	ldi	r23, 0x01	; 1
    1108:	89 e3       	ldi	r24, 0x39	; 57
    110a:	94 e0       	ldi	r25, 0x04	; 4
    110c:	da d1       	rcall	.+948    	; 0x14c2 <xTaskGenericCreate>
	xTaskCreate(Move_Task, (signed portCHAR *)"Mover", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	45 e5       	ldi	r20, 0x55	; 85
    1114:	50 e0       	ldi	r21, 0x00	; 0
    1116:	63 e5       	ldi	r22, 0x53	; 83
    1118:	71 e0       	ldi	r23, 0x01	; 1
    111a:	8c eb       	ldi	r24, 0xBC	; 188
    111c:	97 e0       	ldi	r25, 0x07	; 7
    111e:	d1 d1       	rcall	.+930    	; 0x14c2 <xTaskGenericCreate>
	xTaskCreate(Shift_Task, (signed portCHAR *)"Shifter", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	45 e5       	ldi	r20, 0x55	; 85
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	69 e5       	ldi	r22, 0x59	; 89
    112a:	71 e0       	ldi	r23, 0x01	; 1
    112c:	8a ec       	ldi	r24, 0xCA	; 202
    112e:	92 e0       	ldi	r25, 0x02	; 2
    1130:	c8 d1       	rcall	.+912    	; 0x14c2 <xTaskGenericCreate>
	xTaskCreate(Joy_Task, (signed portCHAR *)"JoySticker", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	45 e5       	ldi	r20, 0x55	; 85
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	61 e6       	ldi	r22, 0x61	; 97
    113c:	71 e0       	ldi	r23, 0x01	; 1
    113e:	81 e1       	ldi	r24, 0x11	; 17
    1140:	98 e0       	ldi	r25, 0x08	; 8
    1142:	bf d1       	rcall	.+894    	; 0x14c2 <xTaskGenericCreate>
	xTaskCreate(Receive_Task, (signed portCHAR *)"Receiver", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	45 e5       	ldi	r20, 0x55	; 85
    114a:	50 e0       	ldi	r21, 0x00	; 0
    114c:	6c e6       	ldi	r22, 0x6C	; 108
    114e:	71 e0       	ldi	r23, 0x01	; 1
    1150:	8a e3       	ldi	r24, 0x3A	; 58
    1152:	98 e0       	ldi	r25, 0x08	; 8
    1154:	b6 d1       	rcall	.+876    	; 0x14c2 <xTaskGenericCreate>
	xTaskCreate(But_Task, (signed portCHAR *)"Buttoner", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	45 e5       	ldi	r20, 0x55	; 85
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	65 e7       	ldi	r22, 0x75	; 117
    1160:	71 e0       	ldi	r23, 0x01	; 1
    1162:	88 e6       	ldi	r24, 0x68	; 104
    1164:	98 e0       	ldi	r25, 0x08	; 8
    1166:	ad d1       	rcall	.+858    	; 0x14c2 <xTaskGenericCreate>
}
    1168:	cf 91       	pop	r28
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	bf 90       	pop	r11
    1176:	af 90       	pop	r10
    1178:	08 95       	ret

0000117a <main>:



int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
    117a:	11 b8       	out	0x01, r1	; 1
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
    1180:	87 b9       	out	0x07, r24	; 7
    1182:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
    1184:	8a b9       	out	0x0a, r24	; 10
    1186:	1b b8       	out	0x0b, r1	; 11
	
	
	moves = QueueInit(30);
    1188:	8e e1       	ldi	r24, 0x1E	; 30
    118a:	69 d9       	rcall	.-3374   	; 0x45e <QueueInit>
    118c:	90 93 e3 07 	sts	0x07E3, r25
    1190:	80 93 e2 07 	sts	0x07E2, r24
	
	joystickInit();
    1194:	5c d8       	rcall	.-3912   	; 0x24e <joystickInit>
	StartSecPulse(1);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	a2 df       	rcall	.-188    	; 0x10de <StartSecPulse>
	vTaskStartScheduler();
    119a:	94 d2       	rcall	.+1320   	; 0x16c4 <vTaskStartScheduler>
	
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	08 95       	ret

000011a2 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    11a2:	31 e1       	ldi	r19, 0x11	; 17
    11a4:	fc 01       	movw	r30, r24
    11a6:	30 83       	st	Z, r19
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	22 e2       	ldi	r18, 0x22	; 34
    11ac:	20 83       	st	Z, r18
    11ae:	31 97       	sbiw	r30, 0x01	; 1
    11b0:	a3 e3       	ldi	r26, 0x33	; 51
    11b2:	a0 83       	st	Z, r26
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	60 83       	st	Z, r22
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	70 83       	st	Z, r23
    11bc:	31 97       	sbiw	r30, 0x01	; 1
    11be:	10 82       	st	Z, r1
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	60 e8       	ldi	r22, 0x80	; 128
    11c4:	60 83       	st	Z, r22
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	10 82       	st	Z, r1
    11ca:	31 97       	sbiw	r30, 0x01	; 1
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	60 83       	st	Z, r22
    11d0:	31 97       	sbiw	r30, 0x01	; 1
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	60 83       	st	Z, r22
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	64 e0       	ldi	r22, 0x04	; 4
    11da:	60 83       	st	Z, r22
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	65 e0       	ldi	r22, 0x05	; 5
    11e0:	60 83       	st	Z, r22
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	66 e0       	ldi	r22, 0x06	; 6
    11e6:	60 83       	st	Z, r22
    11e8:	31 97       	sbiw	r30, 0x01	; 1
    11ea:	67 e0       	ldi	r22, 0x07	; 7
    11ec:	60 83       	st	Z, r22
    11ee:	31 97       	sbiw	r30, 0x01	; 1
    11f0:	68 e0       	ldi	r22, 0x08	; 8
    11f2:	60 83       	st	Z, r22
    11f4:	31 97       	sbiw	r30, 0x01	; 1
    11f6:	69 e0       	ldi	r22, 0x09	; 9
    11f8:	60 83       	st	Z, r22
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	60 e1       	ldi	r22, 0x10	; 16
    11fe:	60 83       	st	Z, r22
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	30 83       	st	Z, r19
    1204:	31 97       	sbiw	r30, 0x01	; 1
    1206:	32 e1       	ldi	r19, 0x12	; 18
    1208:	30 83       	st	Z, r19
    120a:	31 97       	sbiw	r30, 0x01	; 1
    120c:	33 e1       	ldi	r19, 0x13	; 19
    120e:	30 83       	st	Z, r19
    1210:	31 97       	sbiw	r30, 0x01	; 1
    1212:	34 e1       	ldi	r19, 0x14	; 20
    1214:	30 83       	st	Z, r19
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	35 e1       	ldi	r19, 0x15	; 21
    121a:	30 83       	st	Z, r19
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	36 e1       	ldi	r19, 0x16	; 22
    1220:	30 83       	st	Z, r19
    1222:	31 97       	sbiw	r30, 0x01	; 1
    1224:	37 e1       	ldi	r19, 0x17	; 23
    1226:	30 83       	st	Z, r19
    1228:	31 97       	sbiw	r30, 0x01	; 1
    122a:	38 e1       	ldi	r19, 0x18	; 24
    122c:	30 83       	st	Z, r19
    122e:	31 97       	sbiw	r30, 0x01	; 1
    1230:	39 e1       	ldi	r19, 0x19	; 25
    1232:	30 83       	st	Z, r19
    1234:	31 97       	sbiw	r30, 0x01	; 1
    1236:	30 e2       	ldi	r19, 0x20	; 32
    1238:	30 83       	st	Z, r19
    123a:	31 97       	sbiw	r30, 0x01	; 1
    123c:	31 e2       	ldi	r19, 0x21	; 33
    123e:	30 83       	st	Z, r19
    1240:	31 97       	sbiw	r30, 0x01	; 1
    1242:	20 83       	st	Z, r18
    1244:	31 97       	sbiw	r30, 0x01	; 1
    1246:	23 e2       	ldi	r18, 0x23	; 35
    1248:	20 83       	st	Z, r18
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	40 83       	st	Z, r20
    124e:	31 97       	sbiw	r30, 0x01	; 1
    1250:	50 83       	st	Z, r21
    1252:	31 97       	sbiw	r30, 0x01	; 1
    1254:	26 e2       	ldi	r18, 0x26	; 38
    1256:	20 83       	st	Z, r18
    1258:	31 97       	sbiw	r30, 0x01	; 1
    125a:	27 e2       	ldi	r18, 0x27	; 39
    125c:	20 83       	st	Z, r18
    125e:	31 97       	sbiw	r30, 0x01	; 1
    1260:	28 e2       	ldi	r18, 0x28	; 40
    1262:	20 83       	st	Z, r18
    1264:	31 97       	sbiw	r30, 0x01	; 1
    1266:	29 e2       	ldi	r18, 0x29	; 41
    1268:	20 83       	st	Z, r18
    126a:	31 97       	sbiw	r30, 0x01	; 1
    126c:	20 e3       	ldi	r18, 0x30	; 48
    126e:	20 83       	st	Z, r18
    1270:	31 97       	sbiw	r30, 0x01	; 1
    1272:	21 e3       	ldi	r18, 0x31	; 49
    1274:	20 83       	st	Z, r18
    1276:	86 97       	sbiw	r24, 0x26	; 38
    1278:	08 95       	ret

0000127a <xPortStartScheduler>:
    127a:	10 92 89 00 	sts	0x0089, r1
    127e:	8c e7       	ldi	r24, 0x7C	; 124
    1280:	80 93 88 00 	sts	0x0088, r24
    1284:	8b e0       	ldi	r24, 0x0B	; 11
    1286:	80 93 81 00 	sts	0x0081, r24
    128a:	ef e6       	ldi	r30, 0x6F	; 111
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	80 83       	st	Z, r24
    1294:	a0 91 e0 07 	lds	r26, 0x07E0
    1298:	b0 91 e1 07 	lds	r27, 0x07E1
    129c:	cd 91       	ld	r28, X+
    129e:	cd bf       	out	0x3d, r28	; 61
    12a0:	dd 91       	ld	r29, X+
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	ff 91       	pop	r31
    12a6:	ef 91       	pop	r30
    12a8:	df 91       	pop	r29
    12aa:	cf 91       	pop	r28
    12ac:	bf 91       	pop	r27
    12ae:	af 91       	pop	r26
    12b0:	9f 91       	pop	r25
    12b2:	8f 91       	pop	r24
    12b4:	7f 91       	pop	r23
    12b6:	6f 91       	pop	r22
    12b8:	5f 91       	pop	r21
    12ba:	4f 91       	pop	r20
    12bc:	3f 91       	pop	r19
    12be:	2f 91       	pop	r18
    12c0:	1f 91       	pop	r17
    12c2:	0f 91       	pop	r16
    12c4:	ff 90       	pop	r15
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	bf 90       	pop	r11
    12ce:	af 90       	pop	r10
    12d0:	9f 90       	pop	r9
    12d2:	8f 90       	pop	r8
    12d4:	7f 90       	pop	r7
    12d6:	6f 90       	pop	r6
    12d8:	5f 90       	pop	r5
    12da:	4f 90       	pop	r4
    12dc:	3f 90       	pop	r3
    12de:	2f 90       	pop	r2
    12e0:	1f 90       	pop	r1
    12e2:	0f 90       	pop	r0
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	0f 90       	pop	r0
    12e8:	08 95       	ret
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	08 95       	ret

000012ee <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	0f 92       	push	r0
    12f6:	1f 92       	push	r1
    12f8:	11 24       	eor	r1, r1
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	a0 91 e0 07 	lds	r26, 0x07E0
    133a:	b0 91 e1 07 	lds	r27, 0x07E1
    133e:	0d b6       	in	r0, 0x3d	; 61
    1340:	0d 92       	st	X+, r0
    1342:	0e b6       	in	r0, 0x3e	; 62
    1344:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1346:	8a d3       	rcall	.+1812   	; 0x1a5c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1348:	a0 91 e0 07 	lds	r26, 0x07E0
    134c:	b0 91 e1 07 	lds	r27, 0x07E1
    1350:	cd 91       	ld	r28, X+
    1352:	cd bf       	out	0x3d, r28	; 61
    1354:	dd 91       	ld	r29, X+
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	ff 91       	pop	r31
    135a:	ef 91       	pop	r30
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	bf 91       	pop	r27
    1362:	af 91       	pop	r26
    1364:	9f 91       	pop	r25
    1366:	8f 91       	pop	r24
    1368:	7f 91       	pop	r23
    136a:	6f 91       	pop	r22
    136c:	5f 91       	pop	r21
    136e:	4f 91       	pop	r20
    1370:	3f 91       	pop	r19
    1372:	2f 91       	pop	r18
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	ff 90       	pop	r15
    137a:	ef 90       	pop	r14
    137c:	df 90       	pop	r13
    137e:	cf 90       	pop	r12
    1380:	bf 90       	pop	r11
    1382:	af 90       	pop	r10
    1384:	9f 90       	pop	r9
    1386:	8f 90       	pop	r8
    1388:	7f 90       	pop	r7
    138a:	6f 90       	pop	r6
    138c:	5f 90       	pop	r5
    138e:	4f 90       	pop	r4
    1390:	3f 90       	pop	r3
    1392:	2f 90       	pop	r2
    1394:	1f 90       	pop	r1
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    139c:	08 95       	ret

0000139e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    139e:	0f 92       	push	r0
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	0f 92       	push	r0
    13a6:	1f 92       	push	r1
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 92       	push	r2
    13ac:	3f 92       	push	r3
    13ae:	4f 92       	push	r4
    13b0:	5f 92       	push	r5
    13b2:	6f 92       	push	r6
    13b4:	7f 92       	push	r7
    13b6:	8f 92       	push	r8
    13b8:	9f 92       	push	r9
    13ba:	af 92       	push	r10
    13bc:	bf 92       	push	r11
    13be:	cf 92       	push	r12
    13c0:	df 92       	push	r13
    13c2:	ef 92       	push	r14
    13c4:	ff 92       	push	r15
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	a0 91 e0 07 	lds	r26, 0x07E0
    13ea:	b0 91 e1 07 	lds	r27, 0x07E1
    13ee:	0d b6       	in	r0, 0x3d	; 61
    13f0:	0d 92       	st	X+, r0
    13f2:	0e b6       	in	r0, 0x3e	; 62
    13f4:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    13f6:	95 d1       	rcall	.+810    	; 0x1722 <vTaskIncrementTick>
	vTaskSwitchContext();
    13f8:	31 d3       	rcall	.+1634   	; 0x1a5c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13fa:	a0 91 e0 07 	lds	r26, 0x07E0
    13fe:	b0 91 e1 07 	lds	r27, 0x07E1
    1402:	cd 91       	ld	r28, X+
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	dd 91       	ld	r29, X+
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	bf 91       	pop	r27
    1414:	af 91       	pop	r26
    1416:	9f 91       	pop	r25
    1418:	8f 91       	pop	r24
    141a:	7f 91       	pop	r23
    141c:	6f 91       	pop	r22
    141e:	5f 91       	pop	r21
    1420:	4f 91       	pop	r20
    1422:	3f 91       	pop	r19
    1424:	2f 91       	pop	r18
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	ff 90       	pop	r15
    142c:	ef 90       	pop	r14
    142e:	df 90       	pop	r13
    1430:	cf 90       	pop	r12
    1432:	bf 90       	pop	r11
    1434:	af 90       	pop	r10
    1436:	9f 90       	pop	r9
    1438:	8f 90       	pop	r8
    143a:	7f 90       	pop	r7
    143c:	6f 90       	pop	r6
    143e:	5f 90       	pop	r5
    1440:	4f 90       	pop	r4
    1442:	3f 90       	pop	r3
    1444:	2f 90       	pop	r2
    1446:	1f 90       	pop	r1
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    144e:	08 95       	ret

00001450 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1450:	a6 df       	rcall	.-180    	; 0x139e <vPortYieldFromTick>
		asm volatile ( "reti" );
    1452:	18 95       	reti

00001454 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	ec 01       	movw	r28, r24
    145a:	e0 91 e0 07 	lds	r30, 0x07E0
    145e:	f0 91 e1 07 	lds	r31, 0x07E1
    1462:	93 83       	std	Z+3, r25	; 0x03
    1464:	82 83       	std	Z+2, r24	; 0x02
    1466:	80 91 90 07 	lds	r24, 0x0790
    146a:	90 91 91 07 	lds	r25, 0x0791
    146e:	c8 17       	cp	r28, r24
    1470:	d9 07       	cpc	r29, r25
    1472:	68 f4       	brcc	.+26     	; 0x148e <prvAddCurrentTaskToDelayedList+0x3a>
    1474:	60 91 e0 07 	lds	r22, 0x07E0
    1478:	70 91 e1 07 	lds	r23, 0x07E1
    147c:	80 91 a6 07 	lds	r24, 0x07A6
    1480:	90 91 a7 07 	lds	r25, 0x07A7
    1484:	6e 5f       	subi	r22, 0xFE	; 254
    1486:	7f 4f       	sbci	r23, 0xFF	; 255
    1488:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    148c:	17 c0       	rjmp	.+46     	; 0x14bc <prvAddCurrentTaskToDelayedList+0x68>
    148e:	60 91 e0 07 	lds	r22, 0x07E0
    1492:	70 91 e1 07 	lds	r23, 0x07E1
    1496:	80 91 a8 07 	lds	r24, 0x07A8
    149a:	90 91 a9 07 	lds	r25, 0x07A9
    149e:	6e 5f       	subi	r22, 0xFE	; 254
    14a0:	7f 4f       	sbci	r23, 0xFF	; 255
    14a2:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    14a6:	80 91 49 01 	lds	r24, 0x0149
    14aa:	90 91 4a 01 	lds	r25, 0x014A
    14ae:	c8 17       	cp	r28, r24
    14b0:	d9 07       	cpc	r29, r25
    14b2:	20 f4       	brcc	.+8      	; 0x14bc <prvAddCurrentTaskToDelayedList+0x68>
    14b4:	d0 93 4a 01 	sts	0x014A, r29
    14b8:	c0 93 49 01 	sts	0x0149, r28
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <xTaskGenericCreate>:
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	5c 01       	movw	r10, r24
    14e4:	4b 01       	movw	r8, r22
    14e6:	3a 01       	movw	r6, r20
    14e8:	29 01       	movw	r4, r18
    14ea:	81 e2       	ldi	r24, 0x21	; 33
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    14f2:	ec 01       	movw	r28, r24
    14f4:	89 2b       	or	r24, r25
    14f6:	09 f4       	brne	.+2      	; 0x14fa <xTaskGenericCreate+0x38>
    14f8:	d3 c0       	rjmp	.+422    	; 0x16a0 <xTaskGenericCreate+0x1de>
    14fa:	c1 14       	cp	r12, r1
    14fc:	d1 04       	cpc	r13, r1
    14fe:	09 f0       	breq	.+2      	; 0x1502 <xTaskGenericCreate+0x40>
    1500:	cb c0       	rjmp	.+406    	; 0x1698 <xTaskGenericCreate+0x1d6>
    1502:	c3 01       	movw	r24, r6
    1504:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    1508:	98 8f       	std	Y+24, r25	; 0x18
    150a:	8f 8b       	std	Y+23, r24	; 0x17
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	21 f4       	brne	.+8      	; 0x1518 <xTaskGenericCreate+0x56>
    1510:	ce 01       	movw	r24, r28
    1512:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    1516:	c4 c0       	rjmp	.+392    	; 0x16a0 <xTaskGenericCreate+0x1de>
    1518:	a3 01       	movw	r20, r6
    151a:	65 ea       	ldi	r22, 0xA5	; 165
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	e6 d5       	rcall	.+3020   	; 0x20ec <memset>
    1520:	93 01       	movw	r18, r6
    1522:	21 50       	subi	r18, 0x01	; 1
    1524:	31 09       	sbc	r19, r1
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	3c 01       	movw	r6, r24
    152c:	62 0e       	add	r6, r18
    152e:	73 1e       	adc	r7, r19
    1530:	48 e0       	ldi	r20, 0x08	; 8
    1532:	50 e0       	ldi	r21, 0x00	; 0
    1534:	b4 01       	movw	r22, r8
    1536:	ce 01       	movw	r24, r28
    1538:	49 96       	adiw	r24, 0x19	; 25
    153a:	df d5       	rcall	.+3006   	; 0x20fa <strncpy>
    153c:	18 a2       	std	Y+32, r1	; 0x20
    153e:	10 2f       	mov	r17, r16
    1540:	04 30       	cpi	r16, 0x04	; 4
    1542:	08 f0       	brcs	.+2      	; 0x1546 <xTaskGenericCreate+0x84>
    1544:	13 e0       	ldi	r17, 0x03	; 3
    1546:	1e 8b       	std	Y+22, r17	; 0x16
    1548:	6e 01       	movw	r12, r28
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	c8 0e       	add	r12, r24
    154e:	d1 1c       	adc	r13, r1
    1550:	c6 01       	movw	r24, r12
    1552:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    1556:	ce 01       	movw	r24, r28
    1558:	0c 96       	adiw	r24, 0x0c	; 12
    155a:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    155e:	d9 87       	std	Y+9, r29	; 0x09
    1560:	c8 87       	std	Y+8, r28	; 0x08
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	81 1b       	sub	r24, r17
    1568:	91 09       	sbc	r25, r1
    156a:	9d 87       	std	Y+13, r25	; 0x0d
    156c:	8c 87       	std	Y+12, r24	; 0x0c
    156e:	db 8b       	std	Y+19, r29	; 0x13
    1570:	ca 8b       	std	Y+18, r28	; 0x12
    1572:	a2 01       	movw	r20, r4
    1574:	b5 01       	movw	r22, r10
    1576:	c3 01       	movw	r24, r6
    1578:	14 de       	rcall	.-984    	; 0x11a2 <pxPortInitialiseStack>
    157a:	99 83       	std	Y+1, r25	; 0x01
    157c:	88 83       	st	Y, r24
    157e:	e1 14       	cp	r14, r1
    1580:	f1 04       	cpc	r15, r1
    1582:	19 f0       	breq	.+6      	; 0x158a <xTaskGenericCreate+0xc8>
    1584:	f7 01       	movw	r30, r14
    1586:	d1 83       	std	Z+1, r29	; 0x01
    1588:	c0 83       	st	Z, r28
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	0f 92       	push	r0
    1590:	80 91 92 07 	lds	r24, 0x0792
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	80 93 92 07 	sts	0x0792, r24
    159a:	80 91 e0 07 	lds	r24, 0x07E0
    159e:	90 91 e1 07 	lds	r25, 0x07E1
    15a2:	89 2b       	or	r24, r25
    15a4:	a9 f5       	brne	.+106    	; 0x1610 <xTaskGenericCreate+0x14e>
    15a6:	d0 93 e1 07 	sts	0x07E1, r29
    15aa:	c0 93 e0 07 	sts	0x07E0, r28
    15ae:	80 91 92 07 	lds	r24, 0x0792
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	e1 f5       	brne	.+120    	; 0x162e <xTaskGenericCreate+0x16c>
    15b6:	8c eb       	ldi	r24, 0xBC	; 188
    15b8:	97 e0       	ldi	r25, 0x07	; 7
    15ba:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15be:	85 ec       	ldi	r24, 0xC5	; 197
    15c0:	97 e0       	ldi	r25, 0x07	; 7
    15c2:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15c6:	8e ec       	ldi	r24, 0xCE	; 206
    15c8:	97 e0       	ldi	r25, 0x07	; 7
    15ca:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15ce:	87 ed       	ldi	r24, 0xD7	; 215
    15d0:	97 e0       	ldi	r25, 0x07	; 7
    15d2:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15d6:	83 eb       	ldi	r24, 0xB3	; 179
    15d8:	97 e0       	ldi	r25, 0x07	; 7
    15da:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15de:	8a ea       	ldi	r24, 0xAA	; 170
    15e0:	97 e0       	ldi	r25, 0x07	; 7
    15e2:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15e6:	8d e9       	ldi	r24, 0x9D	; 157
    15e8:	97 e0       	ldi	r25, 0x07	; 7
    15ea:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15ee:	84 e9       	ldi	r24, 0x94	; 148
    15f0:	97 e0       	ldi	r25, 0x07	; 7
    15f2:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15f6:	83 eb       	ldi	r24, 0xB3	; 179
    15f8:	97 e0       	ldi	r25, 0x07	; 7
    15fa:	90 93 a9 07 	sts	0x07A9, r25
    15fe:	80 93 a8 07 	sts	0x07A8, r24
    1602:	8a ea       	ldi	r24, 0xAA	; 170
    1604:	97 e0       	ldi	r25, 0x07	; 7
    1606:	90 93 a7 07 	sts	0x07A7, r25
    160a:	80 93 a6 07 	sts	0x07A6, r24
    160e:	0f c0       	rjmp	.+30     	; 0x162e <xTaskGenericCreate+0x16c>
    1610:	80 91 8d 07 	lds	r24, 0x078D
    1614:	81 11       	cpse	r24, r1
    1616:	0b c0       	rjmp	.+22     	; 0x162e <xTaskGenericCreate+0x16c>
    1618:	e0 91 e0 07 	lds	r30, 0x07E0
    161c:	f0 91 e1 07 	lds	r31, 0x07E1
    1620:	86 89       	ldd	r24, Z+22	; 0x16
    1622:	08 17       	cp	r16, r24
    1624:	20 f0       	brcs	.+8      	; 0x162e <xTaskGenericCreate+0x16c>
    1626:	d0 93 e1 07 	sts	0x07E1, r29
    162a:	c0 93 e0 07 	sts	0x07E0, r28
    162e:	8e 89       	ldd	r24, Y+22	; 0x16
    1630:	90 91 8f 07 	lds	r25, 0x078F
    1634:	98 17       	cp	r25, r24
    1636:	10 f4       	brcc	.+4      	; 0x163c <xTaskGenericCreate+0x17a>
    1638:	80 93 8f 07 	sts	0x078F, r24
    163c:	90 91 88 07 	lds	r25, 0x0788
    1640:	9f 5f       	subi	r25, 0xFF	; 255
    1642:	90 93 88 07 	sts	0x0788, r25
    1646:	90 91 8e 07 	lds	r25, 0x078E
    164a:	98 17       	cp	r25, r24
    164c:	10 f4       	brcc	.+4      	; 0x1652 <xTaskGenericCreate+0x190>
    164e:	80 93 8e 07 	sts	0x078E, r24
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c 01       	movw	r18, r24
    1656:	22 0f       	add	r18, r18
    1658:	33 1f       	adc	r19, r19
    165a:	22 0f       	add	r18, r18
    165c:	33 1f       	adc	r19, r19
    165e:	22 0f       	add	r18, r18
    1660:	33 1f       	adc	r19, r19
    1662:	82 0f       	add	r24, r18
    1664:	93 1f       	adc	r25, r19
    1666:	b6 01       	movw	r22, r12
    1668:	84 54       	subi	r24, 0x44	; 68
    166a:	98 4f       	sbci	r25, 0xF8	; 248
    166c:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	80 91 8d 07 	lds	r24, 0x078D
    1678:	88 23       	and	r24, r24
    167a:	51 f0       	breq	.+20     	; 0x1690 <xTaskGenericCreate+0x1ce>
    167c:	e0 91 e0 07 	lds	r30, 0x07E0
    1680:	f0 91 e1 07 	lds	r31, 0x07E1
    1684:	86 89       	ldd	r24, Z+22	; 0x16
    1686:	80 17       	cp	r24, r16
    1688:	28 f4       	brcc	.+10     	; 0x1694 <xTaskGenericCreate+0x1d2>
    168a:	31 de       	rcall	.-926    	; 0x12ee <vPortYield>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <xTaskGenericCreate+0x1e0>
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	07 c0       	rjmp	.+14     	; 0x16a2 <xTaskGenericCreate+0x1e0>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	05 c0       	rjmp	.+10     	; 0x16a2 <xTaskGenericCreate+0x1e0>
    1698:	d8 8e       	std	Y+24, r13	; 0x18
    169a:	cf 8a       	std	Y+23, r12	; 0x17
    169c:	c6 01       	movw	r24, r12
    169e:	3c cf       	rjmp	.-392    	; 0x1518 <xTaskGenericCreate+0x56>
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
    16c2:	08 95       	ret

000016c4 <vTaskStartScheduler>:
    16c4:	af 92       	push	r10
    16c6:	bf 92       	push	r11
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	a1 2c       	mov	r10, r1
    16d4:	b1 2c       	mov	r11, r1
    16d6:	c1 2c       	mov	r12, r1
    16d8:	d1 2c       	mov	r13, r1
    16da:	e1 2c       	mov	r14, r1
    16dc:	f1 2c       	mov	r15, r1
    16de:	00 e0       	ldi	r16, 0x00	; 0
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	45 e5       	ldi	r20, 0x55	; 85
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	6e e7       	ldi	r22, 0x7E	; 126
    16ea:	71 e0       	ldi	r23, 0x01	; 1
    16ec:	85 ef       	ldi	r24, 0xF5	; 245
    16ee:	9c e0       	ldi	r25, 0x0C	; 12
    16f0:	e8 de       	rcall	.-560    	; 0x14c2 <xTaskGenericCreate>
    16f2:	81 30       	cpi	r24, 0x01	; 1
    16f4:	41 f4       	brne	.+16     	; 0x1706 <vTaskStartScheduler+0x42>
    16f6:	f8 94       	cli
    16f8:	80 93 8d 07 	sts	0x078D, r24
    16fc:	10 92 91 07 	sts	0x0791, r1
    1700:	10 92 90 07 	sts	0x0790, r1
    1704:	ba dd       	rcall	.-1164   	; 0x127a <xPortStartScheduler>
    1706:	0f 91       	pop	r16
    1708:	ff 90       	pop	r15
    170a:	ef 90       	pop	r14
    170c:	df 90       	pop	r13
    170e:	cf 90       	pop	r12
    1710:	bf 90       	pop	r11
    1712:	af 90       	pop	r10
    1714:	08 95       	ret

00001716 <vTaskSuspendAll>:
    1716:	80 91 8c 07 	lds	r24, 0x078C
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	80 93 8c 07 	sts	0x078C, r24
    1720:	08 95       	ret

00001722 <vTaskIncrementTick>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	df 93       	push	r29
    172a:	80 91 8c 07 	lds	r24, 0x078C
    172e:	81 11       	cpse	r24, r1
    1730:	b2 c0       	rjmp	.+356    	; 0x1896 <vTaskIncrementTick+0x174>
    1732:	80 91 90 07 	lds	r24, 0x0790
    1736:	90 91 91 07 	lds	r25, 0x0791
    173a:	01 96       	adiw	r24, 0x01	; 1
    173c:	90 93 91 07 	sts	0x0791, r25
    1740:	80 93 90 07 	sts	0x0790, r24
    1744:	80 91 90 07 	lds	r24, 0x0790
    1748:	90 91 91 07 	lds	r25, 0x0791
    174c:	89 2b       	or	r24, r25
    174e:	99 f5       	brne	.+102    	; 0x17b6 <vTaskIncrementTick+0x94>
    1750:	80 91 a8 07 	lds	r24, 0x07A8
    1754:	90 91 a9 07 	lds	r25, 0x07A9
    1758:	20 91 a6 07 	lds	r18, 0x07A6
    175c:	30 91 a7 07 	lds	r19, 0x07A7
    1760:	30 93 a9 07 	sts	0x07A9, r19
    1764:	20 93 a8 07 	sts	0x07A8, r18
    1768:	90 93 a7 07 	sts	0x07A7, r25
    176c:	80 93 a6 07 	sts	0x07A6, r24
    1770:	80 91 89 07 	lds	r24, 0x0789
    1774:	8f 5f       	subi	r24, 0xFF	; 255
    1776:	80 93 89 07 	sts	0x0789, r24
    177a:	e0 91 a8 07 	lds	r30, 0x07A8
    177e:	f0 91 a9 07 	lds	r31, 0x07A9
    1782:	80 81       	ld	r24, Z
    1784:	81 11       	cpse	r24, r1
    1786:	07 c0       	rjmp	.+14     	; 0x1796 <vTaskIncrementTick+0x74>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	9f ef       	ldi	r25, 0xFF	; 255
    178c:	90 93 4a 01 	sts	0x014A, r25
    1790:	80 93 49 01 	sts	0x0149, r24
    1794:	10 c0       	rjmp	.+32     	; 0x17b6 <vTaskIncrementTick+0x94>
    1796:	e0 91 a8 07 	lds	r30, 0x07A8
    179a:	f0 91 a9 07 	lds	r31, 0x07A9
    179e:	05 80       	ldd	r0, Z+5	; 0x05
    17a0:	f6 81       	ldd	r31, Z+6	; 0x06
    17a2:	e0 2d       	mov	r30, r0
    17a4:	06 80       	ldd	r0, Z+6	; 0x06
    17a6:	f7 81       	ldd	r31, Z+7	; 0x07
    17a8:	e0 2d       	mov	r30, r0
    17aa:	82 81       	ldd	r24, Z+2	; 0x02
    17ac:	93 81       	ldd	r25, Z+3	; 0x03
    17ae:	90 93 4a 01 	sts	0x014A, r25
    17b2:	80 93 49 01 	sts	0x0149, r24
    17b6:	20 91 90 07 	lds	r18, 0x0790
    17ba:	30 91 91 07 	lds	r19, 0x0791
    17be:	80 91 49 01 	lds	r24, 0x0149
    17c2:	90 91 4a 01 	lds	r25, 0x014A
    17c6:	28 17       	cp	r18, r24
    17c8:	39 07       	cpc	r19, r25
    17ca:	08 f4       	brcc	.+2      	; 0x17ce <vTaskIncrementTick+0xac>
    17cc:	69 c0       	rjmp	.+210    	; 0x18a0 <vTaskIncrementTick+0x17e>
    17ce:	e0 91 a8 07 	lds	r30, 0x07A8
    17d2:	f0 91 a9 07 	lds	r31, 0x07A9
    17d6:	80 81       	ld	r24, Z
    17d8:	88 23       	and	r24, r24
    17da:	99 f0       	breq	.+38     	; 0x1802 <vTaskIncrementTick+0xe0>
    17dc:	e0 91 a8 07 	lds	r30, 0x07A8
    17e0:	f0 91 a9 07 	lds	r31, 0x07A9
    17e4:	05 80       	ldd	r0, Z+5	; 0x05
    17e6:	f6 81       	ldd	r31, Z+6	; 0x06
    17e8:	e0 2d       	mov	r30, r0
    17ea:	c6 81       	ldd	r28, Z+6	; 0x06
    17ec:	d7 81       	ldd	r29, Z+7	; 0x07
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	20 91 90 07 	lds	r18, 0x0790
    17f6:	30 91 91 07 	lds	r19, 0x0791
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	f8 f4       	brcc	.+62     	; 0x183e <vTaskIncrementTick+0x11c>
    1800:	19 c0       	rjmp	.+50     	; 0x1834 <vTaskIncrementTick+0x112>
    1802:	8f ef       	ldi	r24, 0xFF	; 255
    1804:	9f ef       	ldi	r25, 0xFF	; 255
    1806:	90 93 4a 01 	sts	0x014A, r25
    180a:	80 93 49 01 	sts	0x0149, r24
    180e:	48 c0       	rjmp	.+144    	; 0x18a0 <vTaskIncrementTick+0x17e>
    1810:	e0 91 a8 07 	lds	r30, 0x07A8
    1814:	f0 91 a9 07 	lds	r31, 0x07A9
    1818:	05 80       	ldd	r0, Z+5	; 0x05
    181a:	f6 81       	ldd	r31, Z+6	; 0x06
    181c:	e0 2d       	mov	r30, r0
    181e:	c6 81       	ldd	r28, Z+6	; 0x06
    1820:	d7 81       	ldd	r29, Z+7	; 0x07
    1822:	8a 81       	ldd	r24, Y+2	; 0x02
    1824:	9b 81       	ldd	r25, Y+3	; 0x03
    1826:	20 91 90 07 	lds	r18, 0x0790
    182a:	30 91 91 07 	lds	r19, 0x0791
    182e:	28 17       	cp	r18, r24
    1830:	39 07       	cpc	r19, r25
    1832:	28 f4       	brcc	.+10     	; 0x183e <vTaskIncrementTick+0x11c>
    1834:	90 93 4a 01 	sts	0x014A, r25
    1838:	80 93 49 01 	sts	0x0149, r24
    183c:	31 c0       	rjmp	.+98     	; 0x18a0 <vTaskIncrementTick+0x17e>
    183e:	8e 01       	movw	r16, r28
    1840:	0e 5f       	subi	r16, 0xFE	; 254
    1842:	1f 4f       	sbci	r17, 0xFF	; 255
    1844:	c8 01       	movw	r24, r16
    1846:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    184a:	8c 89       	ldd	r24, Y+20	; 0x14
    184c:	9d 89       	ldd	r25, Y+21	; 0x15
    184e:	89 2b       	or	r24, r25
    1850:	21 f0       	breq	.+8      	; 0x185a <vTaskIncrementTick+0x138>
    1852:	ce 01       	movw	r24, r28
    1854:	0c 96       	adiw	r24, 0x0c	; 12
    1856:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    185a:	2e 89       	ldd	r18, Y+22	; 0x16
    185c:	80 91 8e 07 	lds	r24, 0x078E
    1860:	82 17       	cp	r24, r18
    1862:	10 f4       	brcc	.+4      	; 0x1868 <vTaskIncrementTick+0x146>
    1864:	20 93 8e 07 	sts	0x078E, r18
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	c9 01       	movw	r24, r18
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	82 0f       	add	r24, r18
    187a:	93 1f       	adc	r25, r19
    187c:	b8 01       	movw	r22, r16
    187e:	84 54       	subi	r24, 0x44	; 68
    1880:	98 4f       	sbci	r25, 0xF8	; 248
    1882:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    1886:	e0 91 a8 07 	lds	r30, 0x07A8
    188a:	f0 91 a9 07 	lds	r31, 0x07A9
    188e:	80 81       	ld	r24, Z
    1890:	81 11       	cpse	r24, r1
    1892:	be cf       	rjmp	.-132    	; 0x1810 <vTaskIncrementTick+0xee>
    1894:	b6 cf       	rjmp	.-148    	; 0x1802 <vTaskIncrementTick+0xe0>
    1896:	80 91 8b 07 	lds	r24, 0x078B
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	80 93 8b 07 	sts	0x078B, r24
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <xTaskResumeAll>:
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	0f 92       	push	r0
    18c0:	80 91 8c 07 	lds	r24, 0x078C
    18c4:	81 50       	subi	r24, 0x01	; 1
    18c6:	80 93 8c 07 	sts	0x078C, r24
    18ca:	80 91 8c 07 	lds	r24, 0x078C
    18ce:	81 11       	cpse	r24, r1
    18d0:	62 c0       	rjmp	.+196    	; 0x1996 <xTaskResumeAll+0xec>
    18d2:	80 91 92 07 	lds	r24, 0x0792
    18d6:	81 11       	cpse	r24, r1
    18d8:	32 c0       	rjmp	.+100    	; 0x193e <xTaskResumeAll+0x94>
    18da:	60 c0       	rjmp	.+192    	; 0x199c <xTaskResumeAll+0xf2>
    18dc:	d7 01       	movw	r26, r14
    18de:	15 96       	adiw	r26, 0x05	; 5
    18e0:	ed 91       	ld	r30, X+
    18e2:	fc 91       	ld	r31, X
    18e4:	16 97       	sbiw	r26, 0x06	; 6
    18e6:	c6 81       	ldd	r28, Z+6	; 0x06
    18e8:	d7 81       	ldd	r29, Z+7	; 0x07
    18ea:	ce 01       	movw	r24, r28
    18ec:	0c 96       	adiw	r24, 0x0c	; 12
    18ee:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18f2:	8e 01       	movw	r16, r28
    18f4:	0e 5f       	subi	r16, 0xFE	; 254
    18f6:	1f 4f       	sbci	r17, 0xFF	; 255
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18fe:	2e 89       	ldd	r18, Y+22	; 0x16
    1900:	80 91 8e 07 	lds	r24, 0x078E
    1904:	82 17       	cp	r24, r18
    1906:	10 f4       	brcc	.+4      	; 0x190c <xTaskResumeAll+0x62>
    1908:	20 93 8e 07 	sts	0x078E, r18
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	c9 01       	movw	r24, r18
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	88 0f       	add	r24, r24
    191a:	99 1f       	adc	r25, r25
    191c:	82 0f       	add	r24, r18
    191e:	93 1f       	adc	r25, r19
    1920:	b8 01       	movw	r22, r16
    1922:	84 54       	subi	r24, 0x44	; 68
    1924:	98 4f       	sbci	r25, 0xF8	; 248
    1926:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    192a:	e0 91 e0 07 	lds	r30, 0x07E0
    192e:	f0 91 e1 07 	lds	r31, 0x07E1
    1932:	9e 89       	ldd	r25, Y+22	; 0x16
    1934:	86 89       	ldd	r24, Z+22	; 0x16
    1936:	98 17       	cp	r25, r24
    1938:	58 f0       	brcs	.+22     	; 0x1950 <xTaskResumeAll+0xa6>
    193a:	dc 2c       	mov	r13, r12
    193c:	09 c0       	rjmp	.+18     	; 0x1950 <xTaskResumeAll+0xa6>
    193e:	d1 2c       	mov	r13, r1
    1940:	0f 2e       	mov	r0, r31
    1942:	fd e9       	ldi	r31, 0x9D	; 157
    1944:	ef 2e       	mov	r14, r31
    1946:	f7 e0       	ldi	r31, 0x07	; 7
    1948:	ff 2e       	mov	r15, r31
    194a:	f0 2d       	mov	r31, r0
    194c:	cc 24       	eor	r12, r12
    194e:	c3 94       	inc	r12
    1950:	f7 01       	movw	r30, r14
    1952:	80 81       	ld	r24, Z
    1954:	81 11       	cpse	r24, r1
    1956:	c2 cf       	rjmp	.-124    	; 0x18dc <xTaskResumeAll+0x32>
    1958:	80 91 8b 07 	lds	r24, 0x078B
    195c:	88 23       	and	r24, r24
    195e:	79 f0       	breq	.+30     	; 0x197e <xTaskResumeAll+0xd4>
    1960:	80 91 8b 07 	lds	r24, 0x078B
    1964:	88 23       	and	r24, r24
    1966:	91 f0       	breq	.+36     	; 0x198c <xTaskResumeAll+0xe2>
    1968:	dc de       	rcall	.-584    	; 0x1722 <vTaskIncrementTick>
    196a:	80 91 8b 07 	lds	r24, 0x078B
    196e:	81 50       	subi	r24, 0x01	; 1
    1970:	80 93 8b 07 	sts	0x078B, r24
    1974:	80 91 8b 07 	lds	r24, 0x078B
    1978:	81 11       	cpse	r24, r1
    197a:	f6 cf       	rjmp	.-20     	; 0x1968 <xTaskResumeAll+0xbe>
    197c:	07 c0       	rjmp	.+14     	; 0x198c <xTaskResumeAll+0xe2>
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	df 16       	cp	r13, r31
    1982:	21 f0       	breq	.+8      	; 0x198c <xTaskResumeAll+0xe2>
    1984:	80 91 8a 07 	lds	r24, 0x078A
    1988:	81 30       	cpi	r24, 0x01	; 1
    198a:	39 f4       	brne	.+14     	; 0x199a <xTaskResumeAll+0xf0>
    198c:	10 92 8a 07 	sts	0x078A, r1
    1990:	ae dc       	rcall	.-1700   	; 0x12ee <vPortYield>
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	03 c0       	rjmp	.+6      	; 0x199c <xTaskResumeAll+0xf2>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	01 c0       	rjmp	.+2      	; 0x199c <xTaskResumeAll+0xf2>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	ff 90       	pop	r15
    19aa:	ef 90       	pop	r14
    19ac:	df 90       	pop	r13
    19ae:	cf 90       	pop	r12
    19b0:	08 95       	ret

000019b2 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    19b8:	89 2b       	or	r24, r25
    19ba:	99 f0       	breq	.+38     	; 0x19e2 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    19bc:	ac de       	rcall	.-680    	; 0x1716 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    19be:	80 91 90 07 	lds	r24, 0x0790
    19c2:	90 91 91 07 	lds	r25, 0x0791
    19c6:	c8 0f       	add	r28, r24
    19c8:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    19ca:	80 91 e0 07 	lds	r24, 0x07E0
    19ce:	90 91 e1 07 	lds	r25, 0x07E1
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    19d8:	ce 01       	movw	r24, r28
    19da:	3c dd       	rcall	.-1416   	; 0x1454 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    19dc:	66 df       	rcall	.-308    	; 0x18aa <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    19de:	81 11       	cpse	r24, r1
    19e0:	01 c0       	rjmp	.+2      	; 0x19e4 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    19e2:	85 dc       	rcall	.-1782   	; 0x12ee <vPortYield>
		}
	}
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	08 95       	ret

000019ea <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    19ea:	0f 2e       	mov	r0, r31
    19ec:	f4 e9       	ldi	r31, 0x94	; 148
    19ee:	ef 2e       	mov	r14, r31
    19f0:	f7 e0       	ldi	r31, 0x07	; 7
    19f2:	ff 2e       	mov	r15, r31
    19f4:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    19f6:	cc eb       	ldi	r28, 0xBC	; 188
    19f8:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    19fa:	80 91 93 07 	lds	r24, 0x0793
    19fe:	88 23       	and	r24, r24
    1a00:	41 f1       	breq	.+80     	; 0x1a52 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1a02:	89 de       	rcall	.-750    	; 0x1716 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1a04:	d7 01       	movw	r26, r14
    1a06:	1c 91       	ld	r17, X
			xTaskResumeAll();
    1a08:	50 df       	rcall	.-352    	; 0x18aa <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    1a0a:	11 23       	and	r17, r17
    1a0c:	11 f1       	breq	.+68     	; 0x1a52 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    1a0e:	0f b6       	in	r0, 0x3f	; 63
    1a10:	f8 94       	cli
    1a12:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1a14:	d7 01       	movw	r26, r14
    1a16:	15 96       	adiw	r26, 0x05	; 5
    1a18:	ed 91       	ld	r30, X+
    1a1a:	fc 91       	ld	r31, X
    1a1c:	16 97       	sbiw	r26, 0x06	; 6
    1a1e:	06 81       	ldd	r16, Z+6	; 0x06
    1a20:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1a22:	c8 01       	movw	r24, r16
    1a24:	02 96       	adiw	r24, 0x02	; 2
    1a26:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
					--uxCurrentNumberOfTasks;
    1a2a:	80 91 92 07 	lds	r24, 0x0792
    1a2e:	81 50       	subi	r24, 0x01	; 1
    1a30:	80 93 92 07 	sts	0x0792, r24
					--uxTasksDeleted;
    1a34:	80 91 93 07 	lds	r24, 0x0793
    1a38:	81 50       	subi	r24, 0x01	; 1
    1a3a:	80 93 93 07 	sts	0x0793, r24
				}
				taskEXIT_CRITICAL();
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1a42:	f8 01       	movw	r30, r16
    1a44:	87 89       	ldd	r24, Z+23	; 0x17
    1a46:	90 8d       	ldd	r25, Z+24	; 0x18
    1a48:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
		vPortFree( pxTCB );
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1a52:	88 81       	ld	r24, Y
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	88 f2       	brcs	.-94     	; 0x19fa <prvIdleTask+0x10>
			{
				taskYIELD();
    1a58:	4a dc       	rcall	.-1900   	; 0x12ee <vPortYield>
    1a5a:	cf cf       	rjmp	.-98     	; 0x19fa <prvIdleTask+0x10>

00001a5c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1a5c:	80 91 8c 07 	lds	r24, 0x078C
    1a60:	81 11       	cpse	r24, r1
    1a62:	13 c0       	rjmp	.+38     	; 0x1a8a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1a64:	80 91 8e 07 	lds	r24, 0x078E
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	ff 1f       	adc	r31, r31
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	ee 0f       	add	r30, r30
    1a76:	ff 1f       	adc	r31, r31
    1a78:	8e 0f       	add	r24, r30
    1a7a:	9f 1f       	adc	r25, r31
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	e4 54       	subi	r30, 0x44	; 68
    1a80:	f8 4f       	sbci	r31, 0xF8	; 248
    1a82:	80 81       	ld	r24, Z
    1a84:	88 23       	and	r24, r24
    1a86:	29 f0       	breq	.+10     	; 0x1a92 <vTaskSwitchContext+0x36>
    1a88:	1b c0       	rjmp	.+54     	; 0x1ac0 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 93 8a 07 	sts	0x078A, r24
    1a90:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1a92:	80 91 8e 07 	lds	r24, 0x078E
    1a96:	81 50       	subi	r24, 0x01	; 1
    1a98:	80 93 8e 07 	sts	0x078E, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1a9c:	80 91 8e 07 	lds	r24, 0x078E
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	ee 0f       	add	r30, r30
    1aa6:	ff 1f       	adc	r31, r31
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	8e 0f       	add	r24, r30
    1ab2:	9f 1f       	adc	r25, r31
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	e4 54       	subi	r30, 0x44	; 68
    1ab8:	f8 4f       	sbci	r31, 0xF8	; 248
    1aba:	80 81       	ld	r24, Z
    1abc:	88 23       	and	r24, r24
    1abe:	49 f3       	breq	.-46     	; 0x1a92 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1ac0:	80 91 8e 07 	lds	r24, 0x078E
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	22 0f       	add	r18, r18
    1ace:	33 1f       	adc	r19, r19
    1ad0:	22 0f       	add	r18, r18
    1ad2:	33 1f       	adc	r19, r19
    1ad4:	28 0f       	add	r18, r24
    1ad6:	39 1f       	adc	r19, r25
    1ad8:	d9 01       	movw	r26, r18
    1ada:	a4 54       	subi	r26, 0x44	; 68
    1adc:	b8 4f       	sbci	r27, 0xF8	; 248
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	ed 91       	ld	r30, X+
    1ae2:	fc 91       	ld	r31, X
    1ae4:	12 97       	sbiw	r26, 0x02	; 2
    1ae6:	02 80       	ldd	r0, Z+2	; 0x02
    1ae8:	f3 81       	ldd	r31, Z+3	; 0x03
    1aea:	e0 2d       	mov	r30, r0
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	fc 93       	st	X, r31
    1af0:	ee 93       	st	-X, r30
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	21 54       	subi	r18, 0x41	; 65
    1af6:	38 4f       	sbci	r19, 0xF8	; 248
    1af8:	e2 17       	cp	r30, r18
    1afa:	f3 07       	cpc	r31, r19
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <vTaskSwitchContext+0xac>
    1afe:	22 81       	ldd	r18, Z+2	; 0x02
    1b00:	33 81       	ldd	r19, Z+3	; 0x03
    1b02:	fd 01       	movw	r30, r26
    1b04:	32 83       	std	Z+2, r19	; 0x02
    1b06:	21 83       	std	Z+1, r18	; 0x01
    1b08:	fc 01       	movw	r30, r24
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	ee 0f       	add	r30, r30
    1b10:	ff 1f       	adc	r31, r31
    1b12:	ee 0f       	add	r30, r30
    1b14:	ff 1f       	adc	r31, r31
    1b16:	8e 0f       	add	r24, r30
    1b18:	9f 1f       	adc	r25, r31
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	e4 54       	subi	r30, 0x44	; 68
    1b1e:	f8 4f       	sbci	r31, 0xF8	; 248
    1b20:	01 80       	ldd	r0, Z+1	; 0x01
    1b22:	f2 81       	ldd	r31, Z+2	; 0x02
    1b24:	e0 2d       	mov	r30, r0
    1b26:	86 81       	ldd	r24, Z+6	; 0x06
    1b28:	97 81       	ldd	r25, Z+7	; 0x07
    1b2a:	90 93 e1 07 	sts	0x07E1, r25
    1b2e:	80 93 e0 07 	sts	0x07E0, r24
    1b32:	08 95       	ret

00001b34 <__subsf3>:
    1b34:	50 58       	subi	r21, 0x80	; 128

00001b36 <__addsf3>:
    1b36:	bb 27       	eor	r27, r27
    1b38:	aa 27       	eor	r26, r26
    1b3a:	0e d0       	rcall	.+28     	; 0x1b58 <__addsf3x>
    1b3c:	fb c0       	rjmp	.+502    	; 0x1d34 <__fp_round>
    1b3e:	ec d0       	rcall	.+472    	; 0x1d18 <__fp_pscA>
    1b40:	30 f0       	brcs	.+12     	; 0x1b4e <__addsf3+0x18>
    1b42:	f1 d0       	rcall	.+482    	; 0x1d26 <__fp_pscB>
    1b44:	20 f0       	brcs	.+8      	; 0x1b4e <__addsf3+0x18>
    1b46:	31 f4       	brne	.+12     	; 0x1b54 <__addsf3+0x1e>
    1b48:	9f 3f       	cpi	r25, 0xFF	; 255
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <__addsf3+0x1a>
    1b4c:	1e f4       	brtc	.+6      	; 0x1b54 <__addsf3+0x1e>
    1b4e:	e1 c0       	rjmp	.+450    	; 0x1d12 <__fp_nan>
    1b50:	0e f4       	brtc	.+2      	; 0x1b54 <__addsf3+0x1e>
    1b52:	e0 95       	com	r30
    1b54:	e7 fb       	bst	r30, 7
    1b56:	c9 c0       	rjmp	.+402    	; 0x1cea <__fp_inf>

00001b58 <__addsf3x>:
    1b58:	e9 2f       	mov	r30, r25
    1b5a:	fd d0       	rcall	.+506    	; 0x1d56 <__fp_split3>
    1b5c:	80 f3       	brcs	.-32     	; 0x1b3e <__addsf3+0x8>
    1b5e:	ba 17       	cp	r27, r26
    1b60:	62 07       	cpc	r22, r18
    1b62:	73 07       	cpc	r23, r19
    1b64:	84 07       	cpc	r24, r20
    1b66:	95 07       	cpc	r25, r21
    1b68:	18 f0       	brcs	.+6      	; 0x1b70 <__addsf3x+0x18>
    1b6a:	71 f4       	brne	.+28     	; 0x1b88 <__addsf3x+0x30>
    1b6c:	9e f5       	brtc	.+102    	; 0x1bd4 <__addsf3x+0x7c>
    1b6e:	15 c1       	rjmp	.+554    	; 0x1d9a <__fp_zero>
    1b70:	0e f4       	brtc	.+2      	; 0x1b74 <__addsf3x+0x1c>
    1b72:	e0 95       	com	r30
    1b74:	0b 2e       	mov	r0, r27
    1b76:	ba 2f       	mov	r27, r26
    1b78:	a0 2d       	mov	r26, r0
    1b7a:	0b 01       	movw	r0, r22
    1b7c:	b9 01       	movw	r22, r18
    1b7e:	90 01       	movw	r18, r0
    1b80:	0c 01       	movw	r0, r24
    1b82:	ca 01       	movw	r24, r20
    1b84:	a0 01       	movw	r20, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	ff 27       	eor	r31, r31
    1b8a:	59 1b       	sub	r21, r25
    1b8c:	99 f0       	breq	.+38     	; 0x1bb4 <__addsf3x+0x5c>
    1b8e:	59 3f       	cpi	r21, 0xF9	; 249
    1b90:	50 f4       	brcc	.+20     	; 0x1ba6 <__addsf3x+0x4e>
    1b92:	50 3e       	cpi	r21, 0xE0	; 224
    1b94:	68 f1       	brcs	.+90     	; 0x1bf0 <__addsf3x+0x98>
    1b96:	1a 16       	cp	r1, r26
    1b98:	f0 40       	sbci	r31, 0x00	; 0
    1b9a:	a2 2f       	mov	r26, r18
    1b9c:	23 2f       	mov	r18, r19
    1b9e:	34 2f       	mov	r19, r20
    1ba0:	44 27       	eor	r20, r20
    1ba2:	58 5f       	subi	r21, 0xF8	; 248
    1ba4:	f3 cf       	rjmp	.-26     	; 0x1b8c <__addsf3x+0x34>
    1ba6:	46 95       	lsr	r20
    1ba8:	37 95       	ror	r19
    1baa:	27 95       	ror	r18
    1bac:	a7 95       	ror	r26
    1bae:	f0 40       	sbci	r31, 0x00	; 0
    1bb0:	53 95       	inc	r21
    1bb2:	c9 f7       	brne	.-14     	; 0x1ba6 <__addsf3x+0x4e>
    1bb4:	7e f4       	brtc	.+30     	; 0x1bd4 <__addsf3x+0x7c>
    1bb6:	1f 16       	cp	r1, r31
    1bb8:	ba 0b       	sbc	r27, r26
    1bba:	62 0b       	sbc	r22, r18
    1bbc:	73 0b       	sbc	r23, r19
    1bbe:	84 0b       	sbc	r24, r20
    1bc0:	ba f0       	brmi	.+46     	; 0x1bf0 <__addsf3x+0x98>
    1bc2:	91 50       	subi	r25, 0x01	; 1
    1bc4:	a1 f0       	breq	.+40     	; 0x1bee <__addsf3x+0x96>
    1bc6:	ff 0f       	add	r31, r31
    1bc8:	bb 1f       	adc	r27, r27
    1bca:	66 1f       	adc	r22, r22
    1bcc:	77 1f       	adc	r23, r23
    1bce:	88 1f       	adc	r24, r24
    1bd0:	c2 f7       	brpl	.-16     	; 0x1bc2 <__addsf3x+0x6a>
    1bd2:	0e c0       	rjmp	.+28     	; 0x1bf0 <__addsf3x+0x98>
    1bd4:	ba 0f       	add	r27, r26
    1bd6:	62 1f       	adc	r22, r18
    1bd8:	73 1f       	adc	r23, r19
    1bda:	84 1f       	adc	r24, r20
    1bdc:	48 f4       	brcc	.+18     	; 0x1bf0 <__addsf3x+0x98>
    1bde:	87 95       	ror	r24
    1be0:	77 95       	ror	r23
    1be2:	67 95       	ror	r22
    1be4:	b7 95       	ror	r27
    1be6:	f7 95       	ror	r31
    1be8:	9e 3f       	cpi	r25, 0xFE	; 254
    1bea:	08 f0       	brcs	.+2      	; 0x1bee <__addsf3x+0x96>
    1bec:	b3 cf       	rjmp	.-154    	; 0x1b54 <__addsf3+0x1e>
    1bee:	93 95       	inc	r25
    1bf0:	88 0f       	add	r24, r24
    1bf2:	08 f0       	brcs	.+2      	; 0x1bf6 <__addsf3x+0x9e>
    1bf4:	99 27       	eor	r25, r25
    1bf6:	ee 0f       	add	r30, r30
    1bf8:	97 95       	ror	r25
    1bfa:	87 95       	ror	r24
    1bfc:	08 95       	ret

00001bfe <__cmpsf2>:
    1bfe:	51 d0       	rcall	.+162    	; 0x1ca2 <__fp_cmp>
    1c00:	08 f4       	brcc	.+2      	; 0x1c04 <__cmpsf2+0x6>
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	08 95       	ret
    1c06:	88 d0       	rcall	.+272    	; 0x1d18 <__fp_pscA>
    1c08:	18 f0       	brcs	.+6      	; 0x1c10 <__cmpsf2+0x12>
    1c0a:	11 f0       	breq	.+4      	; 0x1c10 <__cmpsf2+0x12>
    1c0c:	8c d0       	rcall	.+280    	; 0x1d26 <__fp_pscB>
    1c0e:	38 f4       	brcc	.+14     	; 0x1c1e <fmod+0xa>
    1c10:	80 c0       	rjmp	.+256    	; 0x1d12 <__fp_nan>
    1c12:	c4 c0       	rjmp	.+392    	; 0x1d9c <__fp_szero>

00001c14 <fmod>:
    1c14:	e9 2f       	mov	r30, r25
    1c16:	9f d0       	rcall	.+318    	; 0x1d56 <__fp_split3>
    1c18:	b0 f3       	brcs	.-20     	; 0x1c06 <__cmpsf2+0x8>
    1c1a:	55 23       	and	r21, r21
    1c1c:	c9 f3       	breq	.-14     	; 0x1c10 <__cmpsf2+0x12>
    1c1e:	e7 fb       	bst	r30, 7
    1c20:	62 17       	cp	r22, r18
    1c22:	73 07       	cpc	r23, r19
    1c24:	84 07       	cpc	r24, r20
    1c26:	95 07       	cpc	r25, r21
    1c28:	a8 f1       	brcs	.+106    	; 0x1c94 <fmod+0x80>
    1c2a:	99 f3       	breq	.-26     	; 0x1c12 <__cmpsf2+0x14>
    1c2c:	e9 2f       	mov	r30, r25
    1c2e:	ff 27       	eor	r31, r31
    1c30:	88 23       	and	r24, r24
    1c32:	2a f0       	brmi	.+10     	; 0x1c3e <fmod+0x2a>
    1c34:	31 97       	sbiw	r30, 0x01	; 1
    1c36:	66 0f       	add	r22, r22
    1c38:	77 1f       	adc	r23, r23
    1c3a:	88 1f       	adc	r24, r24
    1c3c:	da f7       	brpl	.-10     	; 0x1c34 <fmod+0x20>
    1c3e:	95 2f       	mov	r25, r21
    1c40:	55 27       	eor	r21, r21
    1c42:	44 23       	and	r20, r20
    1c44:	32 f0       	brmi	.+12     	; 0x1c52 <fmod+0x3e>
    1c46:	91 50       	subi	r25, 0x01	; 1
    1c48:	50 40       	sbci	r21, 0x00	; 0
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	44 1f       	adc	r20, r20
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <fmod+0x32>
    1c52:	bb 27       	eor	r27, r27
    1c54:	e9 1b       	sub	r30, r25
    1c56:	f5 0b       	sbc	r31, r21
    1c58:	62 1b       	sub	r22, r18
    1c5a:	73 0b       	sbc	r23, r19
    1c5c:	84 0b       	sbc	r24, r20
    1c5e:	b1 09       	sbc	r27, r1
    1c60:	c1 f2       	breq	.-80     	; 0x1c12 <__cmpsf2+0x14>
    1c62:	22 f4       	brpl	.+8      	; 0x1c6c <fmod+0x58>
    1c64:	62 0f       	add	r22, r18
    1c66:	73 1f       	adc	r23, r19
    1c68:	84 1f       	adc	r24, r20
    1c6a:	b1 1d       	adc	r27, r1
    1c6c:	31 97       	sbiw	r30, 0x01	; 1
    1c6e:	2a f0       	brmi	.+10     	; 0x1c7a <fmod+0x66>
    1c70:	66 0f       	add	r22, r22
    1c72:	77 1f       	adc	r23, r23
    1c74:	88 1f       	adc	r24, r24
    1c76:	bb 1f       	adc	r27, r27
    1c78:	ef cf       	rjmp	.-34     	; 0x1c58 <fmod+0x44>
    1c7a:	91 50       	subi	r25, 0x01	; 1
    1c7c:	50 40       	sbci	r21, 0x00	; 0
    1c7e:	5a f0       	brmi	.+22     	; 0x1c96 <fmod+0x82>
    1c80:	41 f0       	breq	.+16     	; 0x1c92 <fmod+0x7e>
    1c82:	88 23       	and	r24, r24
    1c84:	32 f0       	brmi	.+12     	; 0x1c92 <fmod+0x7e>
    1c86:	66 0f       	add	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	91 50       	subi	r25, 0x01	; 1
    1c8e:	50 40       	sbci	r21, 0x00	; 0
    1c90:	c1 f7       	brne	.-16     	; 0x1c82 <fmod+0x6e>
    1c92:	93 95       	inc	r25
    1c94:	30 c0       	rjmp	.+96     	; 0x1cf6 <__fp_mpack>
    1c96:	86 95       	lsr	r24
    1c98:	77 95       	ror	r23
    1c9a:	67 95       	ror	r22
    1c9c:	9f 5f       	subi	r25, 0xFF	; 255
    1c9e:	d9 f7       	brne	.-10     	; 0x1c96 <fmod+0x82>
    1ca0:	f8 cf       	rjmp	.-16     	; 0x1c92 <fmod+0x7e>

00001ca2 <__fp_cmp>:
    1ca2:	99 0f       	add	r25, r25
    1ca4:	00 08       	sbc	r0, r0
    1ca6:	55 0f       	add	r21, r21
    1ca8:	aa 0b       	sbc	r26, r26
    1caa:	e0 e8       	ldi	r30, 0x80	; 128
    1cac:	fe ef       	ldi	r31, 0xFE	; 254
    1cae:	16 16       	cp	r1, r22
    1cb0:	17 06       	cpc	r1, r23
    1cb2:	e8 07       	cpc	r30, r24
    1cb4:	f9 07       	cpc	r31, r25
    1cb6:	c0 f0       	brcs	.+48     	; 0x1ce8 <__fp_cmp+0x46>
    1cb8:	12 16       	cp	r1, r18
    1cba:	13 06       	cpc	r1, r19
    1cbc:	e4 07       	cpc	r30, r20
    1cbe:	f5 07       	cpc	r31, r21
    1cc0:	98 f0       	brcs	.+38     	; 0x1ce8 <__fp_cmp+0x46>
    1cc2:	62 1b       	sub	r22, r18
    1cc4:	73 0b       	sbc	r23, r19
    1cc6:	84 0b       	sbc	r24, r20
    1cc8:	95 0b       	sbc	r25, r21
    1cca:	39 f4       	brne	.+14     	; 0x1cda <__fp_cmp+0x38>
    1ccc:	0a 26       	eor	r0, r26
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <__fp_cmp+0x46>
    1cd0:	23 2b       	or	r18, r19
    1cd2:	24 2b       	or	r18, r20
    1cd4:	25 2b       	or	r18, r21
    1cd6:	21 f4       	brne	.+8      	; 0x1ce0 <__fp_cmp+0x3e>
    1cd8:	08 95       	ret
    1cda:	0a 26       	eor	r0, r26
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <__fp_cmp+0x3e>
    1cde:	a1 40       	sbci	r26, 0x01	; 1
    1ce0:	a6 95       	lsr	r26
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	81 1d       	adc	r24, r1
    1ce6:	81 1d       	adc	r24, r1
    1ce8:	08 95       	ret

00001cea <__fp_inf>:
    1cea:	97 f9       	bld	r25, 7
    1cec:	9f 67       	ori	r25, 0x7F	; 127
    1cee:	80 e8       	ldi	r24, 0x80	; 128
    1cf0:	70 e0       	ldi	r23, 0x00	; 0
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	08 95       	ret

00001cf6 <__fp_mpack>:
    1cf6:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <__fp_mpack_finite+0xc>

00001cfa <__fp_mpack_finite>:
    1cfa:	91 50       	subi	r25, 0x01	; 1
    1cfc:	20 f4       	brcc	.+8      	; 0x1d06 <__fp_mpack_finite+0xc>
    1cfe:	87 95       	ror	r24
    1d00:	77 95       	ror	r23
    1d02:	67 95       	ror	r22
    1d04:	b7 95       	ror	r27
    1d06:	88 0f       	add	r24, r24
    1d08:	91 1d       	adc	r25, r1
    1d0a:	96 95       	lsr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	97 f9       	bld	r25, 7
    1d10:	08 95       	ret

00001d12 <__fp_nan>:
    1d12:	9f ef       	ldi	r25, 0xFF	; 255
    1d14:	80 ec       	ldi	r24, 0xC0	; 192
    1d16:	08 95       	ret

00001d18 <__fp_pscA>:
    1d18:	00 24       	eor	r0, r0
    1d1a:	0a 94       	dec	r0
    1d1c:	16 16       	cp	r1, r22
    1d1e:	17 06       	cpc	r1, r23
    1d20:	18 06       	cpc	r1, r24
    1d22:	09 06       	cpc	r0, r25
    1d24:	08 95       	ret

00001d26 <__fp_pscB>:
    1d26:	00 24       	eor	r0, r0
    1d28:	0a 94       	dec	r0
    1d2a:	12 16       	cp	r1, r18
    1d2c:	13 06       	cpc	r1, r19
    1d2e:	14 06       	cpc	r1, r20
    1d30:	05 06       	cpc	r0, r21
    1d32:	08 95       	ret

00001d34 <__fp_round>:
    1d34:	09 2e       	mov	r0, r25
    1d36:	03 94       	inc	r0
    1d38:	00 0c       	add	r0, r0
    1d3a:	11 f4       	brne	.+4      	; 0x1d40 <__fp_round+0xc>
    1d3c:	88 23       	and	r24, r24
    1d3e:	52 f0       	brmi	.+20     	; 0x1d54 <__fp_round+0x20>
    1d40:	bb 0f       	add	r27, r27
    1d42:	40 f4       	brcc	.+16     	; 0x1d54 <__fp_round+0x20>
    1d44:	bf 2b       	or	r27, r31
    1d46:	11 f4       	brne	.+4      	; 0x1d4c <__fp_round+0x18>
    1d48:	60 ff       	sbrs	r22, 0
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <__fp_round+0x20>
    1d4c:	6f 5f       	subi	r22, 0xFF	; 255
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	8f 4f       	sbci	r24, 0xFF	; 255
    1d52:	9f 4f       	sbci	r25, 0xFF	; 255
    1d54:	08 95       	ret

00001d56 <__fp_split3>:
    1d56:	57 fd       	sbrc	r21, 7
    1d58:	90 58       	subi	r25, 0x80	; 128
    1d5a:	44 0f       	add	r20, r20
    1d5c:	55 1f       	adc	r21, r21
    1d5e:	59 f0       	breq	.+22     	; 0x1d76 <__fp_splitA+0x10>
    1d60:	5f 3f       	cpi	r21, 0xFF	; 255
    1d62:	71 f0       	breq	.+28     	; 0x1d80 <__fp_splitA+0x1a>
    1d64:	47 95       	ror	r20

00001d66 <__fp_splitA>:
    1d66:	88 0f       	add	r24, r24
    1d68:	97 fb       	bst	r25, 7
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	61 f0       	breq	.+24     	; 0x1d86 <__fp_splitA+0x20>
    1d6e:	9f 3f       	cpi	r25, 0xFF	; 255
    1d70:	79 f0       	breq	.+30     	; 0x1d90 <__fp_splitA+0x2a>
    1d72:	87 95       	ror	r24
    1d74:	08 95       	ret
    1d76:	12 16       	cp	r1, r18
    1d78:	13 06       	cpc	r1, r19
    1d7a:	14 06       	cpc	r1, r20
    1d7c:	55 1f       	adc	r21, r21
    1d7e:	f2 cf       	rjmp	.-28     	; 0x1d64 <__fp_split3+0xe>
    1d80:	46 95       	lsr	r20
    1d82:	f1 df       	rcall	.-30     	; 0x1d66 <__fp_splitA>
    1d84:	08 c0       	rjmp	.+16     	; 0x1d96 <__fp_splitA+0x30>
    1d86:	16 16       	cp	r1, r22
    1d88:	17 06       	cpc	r1, r23
    1d8a:	18 06       	cpc	r1, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	f1 cf       	rjmp	.-30     	; 0x1d72 <__fp_splitA+0xc>
    1d90:	86 95       	lsr	r24
    1d92:	71 05       	cpc	r23, r1
    1d94:	61 05       	cpc	r22, r1
    1d96:	08 94       	sec
    1d98:	08 95       	ret

00001d9a <__fp_zero>:
    1d9a:	e8 94       	clt

00001d9c <__fp_szero>:
    1d9c:	bb 27       	eor	r27, r27
    1d9e:	66 27       	eor	r22, r22
    1da0:	77 27       	eor	r23, r23
    1da2:	cb 01       	movw	r24, r22
    1da4:	97 f9       	bld	r25, 7
    1da6:	08 95       	ret

00001da8 <__udivmodqi4>:
    1da8:	99 1b       	sub	r25, r25
    1daa:	79 e0       	ldi	r23, 0x09	; 9
    1dac:	04 c0       	rjmp	.+8      	; 0x1db6 <__udivmodqi4_ep>

00001dae <__udivmodqi4_loop>:
    1dae:	99 1f       	adc	r25, r25
    1db0:	96 17       	cp	r25, r22
    1db2:	08 f0       	brcs	.+2      	; 0x1db6 <__udivmodqi4_ep>
    1db4:	96 1b       	sub	r25, r22

00001db6 <__udivmodqi4_ep>:
    1db6:	88 1f       	adc	r24, r24
    1db8:	7a 95       	dec	r23
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__udivmodqi4_loop>
    1dbc:	80 95       	com	r24
    1dbe:	08 95       	ret

00001dc0 <__muldi3>:
    1dc0:	df 93       	push	r29
    1dc2:	cf 93       	push	r28
    1dc4:	1f 93       	push	r17
    1dc6:	0f 93       	push	r16
    1dc8:	9a 9d       	mul	r25, r10
    1dca:	f0 2d       	mov	r31, r0
    1dcc:	21 9f       	mul	r18, r17
    1dce:	f0 0d       	add	r31, r0
    1dd0:	8b 9d       	mul	r24, r11
    1dd2:	f0 0d       	add	r31, r0
    1dd4:	8a 9d       	mul	r24, r10
    1dd6:	e0 2d       	mov	r30, r0
    1dd8:	f1 0d       	add	r31, r1
    1dda:	03 9f       	mul	r16, r19
    1ddc:	f0 0d       	add	r31, r0
    1dde:	02 9f       	mul	r16, r18
    1de0:	e0 0d       	add	r30, r0
    1de2:	f1 1d       	adc	r31, r1
    1de4:	4e 9d       	mul	r20, r14
    1de6:	e0 0d       	add	r30, r0
    1de8:	f1 1d       	adc	r31, r1
    1dea:	5e 9d       	mul	r21, r14
    1dec:	f0 0d       	add	r31, r0
    1dee:	4f 9d       	mul	r20, r15
    1df0:	f0 0d       	add	r31, r0
    1df2:	7f 93       	push	r23
    1df4:	6f 93       	push	r22
    1df6:	bf 92       	push	r11
    1df8:	af 92       	push	r10
    1dfa:	5f 93       	push	r21
    1dfc:	4f 93       	push	r20
    1dfe:	d5 01       	movw	r26, r10
    1e00:	39 d0       	rcall	.+114    	; 0x1e74 <__umulhisi3>
    1e02:	8b 01       	movw	r16, r22
    1e04:	ac 01       	movw	r20, r24
    1e06:	d7 01       	movw	r26, r14
    1e08:	35 d0       	rcall	.+106    	; 0x1e74 <__umulhisi3>
    1e0a:	eb 01       	movw	r28, r22
    1e0c:	e8 0f       	add	r30, r24
    1e0e:	f9 1f       	adc	r31, r25
    1e10:	d6 01       	movw	r26, r12
    1e12:	1f d0       	rcall	.+62     	; 0x1e52 <__muldi3_6>
    1e14:	2f 91       	pop	r18
    1e16:	3f 91       	pop	r19
    1e18:	d6 01       	movw	r26, r12
    1e1a:	2c d0       	rcall	.+88     	; 0x1e74 <__umulhisi3>
    1e1c:	c6 0f       	add	r28, r22
    1e1e:	d7 1f       	adc	r29, r23
    1e20:	e8 1f       	adc	r30, r24
    1e22:	f9 1f       	adc	r31, r25
    1e24:	af 91       	pop	r26
    1e26:	bf 91       	pop	r27
    1e28:	14 d0       	rcall	.+40     	; 0x1e52 <__muldi3_6>
    1e2a:	2f 91       	pop	r18
    1e2c:	3f 91       	pop	r19
    1e2e:	22 d0       	rcall	.+68     	; 0x1e74 <__umulhisi3>
    1e30:	c6 0f       	add	r28, r22
    1e32:	d7 1f       	adc	r29, r23
    1e34:	e8 1f       	adc	r30, r24
    1e36:	f9 1f       	adc	r31, r25
    1e38:	d6 01       	movw	r26, r12
    1e3a:	1c d0       	rcall	.+56     	; 0x1e74 <__umulhisi3>
    1e3c:	e6 0f       	add	r30, r22
    1e3e:	f7 1f       	adc	r31, r23
    1e40:	98 01       	movw	r18, r16
    1e42:	be 01       	movw	r22, r28
    1e44:	cf 01       	movw	r24, r30
    1e46:	11 24       	eor	r1, r1
    1e48:	0f 91       	pop	r16
    1e4a:	1f 91       	pop	r17
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <__muldi3_6>:
    1e52:	10 d0       	rcall	.+32     	; 0x1e74 <__umulhisi3>
    1e54:	46 0f       	add	r20, r22
    1e56:	57 1f       	adc	r21, r23
    1e58:	c8 1f       	adc	r28, r24
    1e5a:	d9 1f       	adc	r29, r25
    1e5c:	08 f4       	brcc	.+2      	; 0x1e60 <__muldi3_6+0xe>
    1e5e:	31 96       	adiw	r30, 0x01	; 1
    1e60:	08 95       	ret

00001e62 <__adddi3>:
    1e62:	2a 0d       	add	r18, r10
    1e64:	3b 1d       	adc	r19, r11
    1e66:	4c 1d       	adc	r20, r12
    1e68:	5d 1d       	adc	r21, r13
    1e6a:	6e 1d       	adc	r22, r14
    1e6c:	7f 1d       	adc	r23, r15
    1e6e:	80 1f       	adc	r24, r16
    1e70:	91 1f       	adc	r25, r17
    1e72:	08 95       	ret

00001e74 <__umulhisi3>:
    1e74:	a2 9f       	mul	r26, r18
    1e76:	b0 01       	movw	r22, r0
    1e78:	b3 9f       	mul	r27, r19
    1e7a:	c0 01       	movw	r24, r0
    1e7c:	a3 9f       	mul	r26, r19
    1e7e:	70 0d       	add	r23, r0
    1e80:	81 1d       	adc	r24, r1
    1e82:	11 24       	eor	r1, r1
    1e84:	91 1d       	adc	r25, r1
    1e86:	b2 9f       	mul	r27, r18
    1e88:	70 0d       	add	r23, r0
    1e8a:	81 1d       	adc	r24, r1
    1e8c:	11 24       	eor	r1, r1
    1e8e:	91 1d       	adc	r25, r1
    1e90:	08 95       	ret

00001e92 <malloc>:
    1e92:	cf 93       	push	r28
    1e94:	df 93       	push	r29
    1e96:	82 30       	cpi	r24, 0x02	; 2
    1e98:	91 05       	cpc	r25, r1
    1e9a:	10 f4       	brcc	.+4      	; 0x1ea0 <malloc+0xe>
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	e0 91 f5 07 	lds	r30, 0x07F5
    1ea4:	f0 91 f6 07 	lds	r31, 0x07F6
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	c0 e0       	ldi	r28, 0x00	; 0
    1eae:	d0 e0       	ldi	r29, 0x00	; 0
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	11 f1       	breq	.+68     	; 0x1ef8 <malloc+0x66>
    1eb4:	40 81       	ld	r20, Z
    1eb6:	51 81       	ldd	r21, Z+1	; 0x01
    1eb8:	48 17       	cp	r20, r24
    1eba:	59 07       	cpc	r21, r25
    1ebc:	c0 f0       	brcs	.+48     	; 0x1eee <malloc+0x5c>
    1ebe:	48 17       	cp	r20, r24
    1ec0:	59 07       	cpc	r21, r25
    1ec2:	61 f4       	brne	.+24     	; 0x1edc <malloc+0x4a>
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	20 97       	sbiw	r28, 0x00	; 0
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <malloc+0x40>
    1ecc:	9b 83       	std	Y+3, r25	; 0x03
    1ece:	8a 83       	std	Y+2, r24	; 0x02
    1ed0:	2b c0       	rjmp	.+86     	; 0x1f28 <malloc+0x96>
    1ed2:	90 93 f6 07 	sts	0x07F6, r25
    1ed6:	80 93 f5 07 	sts	0x07F5, r24
    1eda:	26 c0       	rjmp	.+76     	; 0x1f28 <malloc+0x96>
    1edc:	21 15       	cp	r18, r1
    1ede:	31 05       	cpc	r19, r1
    1ee0:	19 f0       	breq	.+6      	; 0x1ee8 <malloc+0x56>
    1ee2:	42 17       	cp	r20, r18
    1ee4:	53 07       	cpc	r21, r19
    1ee6:	18 f4       	brcc	.+6      	; 0x1eee <malloc+0x5c>
    1ee8:	9a 01       	movw	r18, r20
    1eea:	be 01       	movw	r22, r28
    1eec:	df 01       	movw	r26, r30
    1eee:	ef 01       	movw	r28, r30
    1ef0:	02 80       	ldd	r0, Z+2	; 0x02
    1ef2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ef4:	e0 2d       	mov	r30, r0
    1ef6:	dc cf       	rjmp	.-72     	; 0x1eb0 <malloc+0x1e>
    1ef8:	21 15       	cp	r18, r1
    1efa:	31 05       	cpc	r19, r1
    1efc:	09 f1       	breq	.+66     	; 0x1f40 <malloc+0xae>
    1efe:	28 1b       	sub	r18, r24
    1f00:	39 0b       	sbc	r19, r25
    1f02:	24 30       	cpi	r18, 0x04	; 4
    1f04:	31 05       	cpc	r19, r1
    1f06:	90 f4       	brcc	.+36     	; 0x1f2c <malloc+0x9a>
    1f08:	12 96       	adiw	r26, 0x02	; 2
    1f0a:	8d 91       	ld	r24, X+
    1f0c:	9c 91       	ld	r25, X
    1f0e:	13 97       	sbiw	r26, 0x03	; 3
    1f10:	61 15       	cp	r22, r1
    1f12:	71 05       	cpc	r23, r1
    1f14:	21 f0       	breq	.+8      	; 0x1f1e <malloc+0x8c>
    1f16:	fb 01       	movw	r30, r22
    1f18:	93 83       	std	Z+3, r25	; 0x03
    1f1a:	82 83       	std	Z+2, r24	; 0x02
    1f1c:	04 c0       	rjmp	.+8      	; 0x1f26 <malloc+0x94>
    1f1e:	90 93 f6 07 	sts	0x07F6, r25
    1f22:	80 93 f5 07 	sts	0x07F5, r24
    1f26:	fd 01       	movw	r30, r26
    1f28:	32 96       	adiw	r30, 0x02	; 2
    1f2a:	44 c0       	rjmp	.+136    	; 0x1fb4 <malloc+0x122>
    1f2c:	fd 01       	movw	r30, r26
    1f2e:	e2 0f       	add	r30, r18
    1f30:	f3 1f       	adc	r31, r19
    1f32:	81 93       	st	Z+, r24
    1f34:	91 93       	st	Z+, r25
    1f36:	22 50       	subi	r18, 0x02	; 2
    1f38:	31 09       	sbc	r19, r1
    1f3a:	2d 93       	st	X+, r18
    1f3c:	3c 93       	st	X, r19
    1f3e:	3a c0       	rjmp	.+116    	; 0x1fb4 <malloc+0x122>
    1f40:	20 91 f3 07 	lds	r18, 0x07F3
    1f44:	30 91 f4 07 	lds	r19, 0x07F4
    1f48:	23 2b       	or	r18, r19
    1f4a:	41 f4       	brne	.+16     	; 0x1f5c <malloc+0xca>
    1f4c:	20 91 02 01 	lds	r18, 0x0102
    1f50:	30 91 03 01 	lds	r19, 0x0103
    1f54:	30 93 f4 07 	sts	0x07F4, r19
    1f58:	20 93 f3 07 	sts	0x07F3, r18
    1f5c:	20 91 00 01 	lds	r18, 0x0100
    1f60:	30 91 01 01 	lds	r19, 0x0101
    1f64:	21 15       	cp	r18, r1
    1f66:	31 05       	cpc	r19, r1
    1f68:	41 f4       	brne	.+16     	; 0x1f7a <malloc+0xe8>
    1f6a:	2d b7       	in	r18, 0x3d	; 61
    1f6c:	3e b7       	in	r19, 0x3e	; 62
    1f6e:	40 91 04 01 	lds	r20, 0x0104
    1f72:	50 91 05 01 	lds	r21, 0x0105
    1f76:	24 1b       	sub	r18, r20
    1f78:	35 0b       	sbc	r19, r21
    1f7a:	e0 91 f3 07 	lds	r30, 0x07F3
    1f7e:	f0 91 f4 07 	lds	r31, 0x07F4
    1f82:	e2 17       	cp	r30, r18
    1f84:	f3 07       	cpc	r31, r19
    1f86:	a0 f4       	brcc	.+40     	; 0x1fb0 <malloc+0x11e>
    1f88:	2e 1b       	sub	r18, r30
    1f8a:	3f 0b       	sbc	r19, r31
    1f8c:	28 17       	cp	r18, r24
    1f8e:	39 07       	cpc	r19, r25
    1f90:	78 f0       	brcs	.+30     	; 0x1fb0 <malloc+0x11e>
    1f92:	ac 01       	movw	r20, r24
    1f94:	4e 5f       	subi	r20, 0xFE	; 254
    1f96:	5f 4f       	sbci	r21, 0xFF	; 255
    1f98:	24 17       	cp	r18, r20
    1f9a:	35 07       	cpc	r19, r21
    1f9c:	48 f0       	brcs	.+18     	; 0x1fb0 <malloc+0x11e>
    1f9e:	4e 0f       	add	r20, r30
    1fa0:	5f 1f       	adc	r21, r31
    1fa2:	50 93 f4 07 	sts	0x07F4, r21
    1fa6:	40 93 f3 07 	sts	0x07F3, r20
    1faa:	81 93       	st	Z+, r24
    1fac:	91 93       	st	Z+, r25
    1fae:	02 c0       	rjmp	.+4      	; 0x1fb4 <malloc+0x122>
    1fb0:	e0 e0       	ldi	r30, 0x00	; 0
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	cf 01       	movw	r24, r30
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <free>:
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <free+0xe>
    1fc8:	8c c0       	rjmp	.+280    	; 0x20e2 <free+0x126>
    1fca:	fc 01       	movw	r30, r24
    1fcc:	32 97       	sbiw	r30, 0x02	; 2
    1fce:	13 82       	std	Z+3, r1	; 0x03
    1fd0:	12 82       	std	Z+2, r1	; 0x02
    1fd2:	00 91 f5 07 	lds	r16, 0x07F5
    1fd6:	10 91 f6 07 	lds	r17, 0x07F6
    1fda:	01 15       	cp	r16, r1
    1fdc:	11 05       	cpc	r17, r1
    1fde:	81 f4       	brne	.+32     	; 0x2000 <free+0x44>
    1fe0:	20 81       	ld	r18, Z
    1fe2:	31 81       	ldd	r19, Z+1	; 0x01
    1fe4:	82 0f       	add	r24, r18
    1fe6:	93 1f       	adc	r25, r19
    1fe8:	20 91 f3 07 	lds	r18, 0x07F3
    1fec:	30 91 f4 07 	lds	r19, 0x07F4
    1ff0:	28 17       	cp	r18, r24
    1ff2:	39 07       	cpc	r19, r25
    1ff4:	79 f5       	brne	.+94     	; 0x2054 <free+0x98>
    1ff6:	f0 93 f4 07 	sts	0x07F4, r31
    1ffa:	e0 93 f3 07 	sts	0x07F3, r30
    1ffe:	71 c0       	rjmp	.+226    	; 0x20e2 <free+0x126>
    2000:	d8 01       	movw	r26, r16
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	ae 17       	cp	r26, r30
    2008:	bf 07       	cpc	r27, r31
    200a:	50 f4       	brcc	.+20     	; 0x2020 <free+0x64>
    200c:	12 96       	adiw	r26, 0x02	; 2
    200e:	2d 91       	ld	r18, X+
    2010:	3c 91       	ld	r19, X
    2012:	13 97       	sbiw	r26, 0x03	; 3
    2014:	ad 01       	movw	r20, r26
    2016:	21 15       	cp	r18, r1
    2018:	31 05       	cpc	r19, r1
    201a:	09 f1       	breq	.+66     	; 0x205e <free+0xa2>
    201c:	d9 01       	movw	r26, r18
    201e:	f3 cf       	rjmp	.-26     	; 0x2006 <free+0x4a>
    2020:	9d 01       	movw	r18, r26
    2022:	da 01       	movw	r26, r20
    2024:	33 83       	std	Z+3, r19	; 0x03
    2026:	22 83       	std	Z+2, r18	; 0x02
    2028:	60 81       	ld	r22, Z
    202a:	71 81       	ldd	r23, Z+1	; 0x01
    202c:	86 0f       	add	r24, r22
    202e:	97 1f       	adc	r25, r23
    2030:	82 17       	cp	r24, r18
    2032:	93 07       	cpc	r25, r19
    2034:	69 f4       	brne	.+26     	; 0x2050 <free+0x94>
    2036:	ec 01       	movw	r28, r24
    2038:	28 81       	ld	r18, Y
    203a:	39 81       	ldd	r19, Y+1	; 0x01
    203c:	26 0f       	add	r18, r22
    203e:	37 1f       	adc	r19, r23
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	31 83       	std	Z+1, r19	; 0x01
    2046:	20 83       	st	Z, r18
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	93 83       	std	Z+3, r25	; 0x03
    204e:	82 83       	std	Z+2, r24	; 0x02
    2050:	45 2b       	or	r20, r21
    2052:	29 f4       	brne	.+10     	; 0x205e <free+0xa2>
    2054:	f0 93 f6 07 	sts	0x07F6, r31
    2058:	e0 93 f5 07 	sts	0x07F5, r30
    205c:	42 c0       	rjmp	.+132    	; 0x20e2 <free+0x126>
    205e:	13 96       	adiw	r26, 0x03	; 3
    2060:	fc 93       	st	X, r31
    2062:	ee 93       	st	-X, r30
    2064:	12 97       	sbiw	r26, 0x02	; 2
    2066:	ed 01       	movw	r28, r26
    2068:	49 91       	ld	r20, Y+
    206a:	59 91       	ld	r21, Y+
    206c:	9e 01       	movw	r18, r28
    206e:	24 0f       	add	r18, r20
    2070:	35 1f       	adc	r19, r21
    2072:	e2 17       	cp	r30, r18
    2074:	f3 07       	cpc	r31, r19
    2076:	71 f4       	brne	.+28     	; 0x2094 <free+0xd8>
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	84 0f       	add	r24, r20
    207e:	95 1f       	adc	r25, r21
    2080:	02 96       	adiw	r24, 0x02	; 2
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	9c 93       	st	X, r25
    2086:	8e 93       	st	-X, r24
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	13 96       	adiw	r26, 0x03	; 3
    208e:	9c 93       	st	X, r25
    2090:	8e 93       	st	-X, r24
    2092:	12 97       	sbiw	r26, 0x02	; 2
    2094:	e0 e0       	ldi	r30, 0x00	; 0
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	d8 01       	movw	r26, r16
    209a:	12 96       	adiw	r26, 0x02	; 2
    209c:	8d 91       	ld	r24, X+
    209e:	9c 91       	ld	r25, X
    20a0:	13 97       	sbiw	r26, 0x03	; 3
    20a2:	00 97       	sbiw	r24, 0x00	; 0
    20a4:	19 f0       	breq	.+6      	; 0x20ac <free+0xf0>
    20a6:	f8 01       	movw	r30, r16
    20a8:	8c 01       	movw	r16, r24
    20aa:	f6 cf       	rjmp	.-20     	; 0x2098 <free+0xdc>
    20ac:	8d 91       	ld	r24, X+
    20ae:	9c 91       	ld	r25, X
    20b0:	98 01       	movw	r18, r16
    20b2:	2e 5f       	subi	r18, 0xFE	; 254
    20b4:	3f 4f       	sbci	r19, 0xFF	; 255
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	20 91 f3 07 	lds	r18, 0x07F3
    20be:	30 91 f4 07 	lds	r19, 0x07F4
    20c2:	28 17       	cp	r18, r24
    20c4:	39 07       	cpc	r19, r25
    20c6:	69 f4       	brne	.+26     	; 0x20e2 <free+0x126>
    20c8:	30 97       	sbiw	r30, 0x00	; 0
    20ca:	29 f4       	brne	.+10     	; 0x20d6 <free+0x11a>
    20cc:	10 92 f6 07 	sts	0x07F6, r1
    20d0:	10 92 f5 07 	sts	0x07F5, r1
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <free+0x11e>
    20d6:	13 82       	std	Z+3, r1	; 0x03
    20d8:	12 82       	std	Z+2, r1	; 0x02
    20da:	10 93 f4 07 	sts	0x07F4, r17
    20de:	00 93 f3 07 	sts	0x07F3, r16
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	08 95       	ret

000020ec <memset>:
    20ec:	dc 01       	movw	r26, r24
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <memset+0x6>
    20f0:	6d 93       	st	X+, r22
    20f2:	41 50       	subi	r20, 0x01	; 1
    20f4:	50 40       	sbci	r21, 0x00	; 0
    20f6:	e0 f7       	brcc	.-8      	; 0x20f0 <memset+0x4>
    20f8:	08 95       	ret

000020fa <strncpy>:
    20fa:	fb 01       	movw	r30, r22
    20fc:	dc 01       	movw	r26, r24
    20fe:	41 50       	subi	r20, 0x01	; 1
    2100:	50 40       	sbci	r21, 0x00	; 0
    2102:	48 f0       	brcs	.+18     	; 0x2116 <strncpy+0x1c>
    2104:	01 90       	ld	r0, Z+
    2106:	0d 92       	st	X+, r0
    2108:	00 20       	and	r0, r0
    210a:	c9 f7       	brne	.-14     	; 0x20fe <strncpy+0x4>
    210c:	01 c0       	rjmp	.+2      	; 0x2110 <strncpy+0x16>
    210e:	1d 92       	st	X+, r1
    2110:	41 50       	subi	r20, 0x01	; 1
    2112:	50 40       	sbci	r21, 0x00	; 0
    2114:	e0 f7       	brcc	.-8      	; 0x210e <strncpy+0x14>
    2116:	08 95       	ret

00002118 <_exit>:
    2118:	f8 94       	cli

0000211a <__stop_program>:
    211a:	ff cf       	rjmp	.-2      	; 0x211a <__stop_program>
