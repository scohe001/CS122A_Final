
122a_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001cde  00001d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000065f  0080016a  0080016a  00001ddc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00001e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277b  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  0000483f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001997  00000000  00000000  000052b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  00006c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cef  00000000  00000000  00007304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a6  00000000  00000000  00007ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00009899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c7       	rjmp	.+4072   	; 0x101e <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	56 c2       	rjmp	.+1196   	; 0x4fa <__vector_19>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ed       	ldi	r30, 0xDE	; 222
      a0:	fc e1       	ldi	r31, 0x1C	; 28
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 36       	cpi	r26, 0x6A	; 106
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	aa e6       	ldi	r26, 0x6A	; 106
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a9 3c       	cpi	r26, 0xC9	; 201
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	42 d6       	rcall	.+3204   	; 0xd48 <main>
      c4:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d4:	20 91 6a 01 	lds	r18, 0x016A
      d8:	30 91 6b 01 	lds	r19, 0x016B
      dc:	ce 01       	movw	r24, r28
      de:	82 0f       	add	r24, r18
      e0:	93 1f       	adc	r25, r19
      e2:	8c 3d       	cpi	r24, 0xDC	; 220
      e4:	45 e0       	ldi	r20, 0x05	; 5
      e6:	94 07       	cpc	r25, r20
      e8:	58 f4       	brcc	.+22     	; 0x100 <pvPortMalloc+0x36>
      ea:	28 17       	cp	r18, r24
      ec:	39 07       	cpc	r19, r25
      ee:	58 f4       	brcc	.+22     	; 0x106 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f0:	e9 01       	movw	r28, r18
      f2:	c4 59       	subi	r28, 0x94	; 148
      f4:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f6:	90 93 6b 01 	sts	0x016B, r25
      fa:	80 93 6a 01 	sts	0x016A, r24
      fe:	05 c0       	rjmp	.+10     	; 0x10a <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     100:	c0 e0       	ldi	r28, 0x00	; 0
     102:	d0 e0       	ldi	r29, 0x00	; 0
     104:	02 c0       	rjmp	.+4      	; 0x10a <pvPortMalloc+0x40>
     106:	c0 e0       	ldi	r28, 0x00	; 0
     108:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10a:	0e 94 36 0a 	call	0x146c	; 0x146c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10e:	ce 01       	movw	r24, r28
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     116:	08 95       	ret

00000118 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     118:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11a:	03 96       	adiw	r24, 0x03	; 3
     11c:	92 83       	std	Z+2, r25	; 0x02
     11e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     120:	2f ef       	ldi	r18, 0xFF	; 255
     122:	3f ef       	ldi	r19, 0xFF	; 255
     124:	34 83       	std	Z+4, r19	; 0x04
     126:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     128:	96 83       	std	Z+6, r25	; 0x06
     12a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12c:	90 87       	std	Z+8, r25	; 0x08
     12e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     130:	10 82       	st	Z, r1
     132:	08 95       	ret

00000134 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     134:	fc 01       	movw	r30, r24
     136:	11 86       	std	Z+9, r1	; 0x09
     138:	10 86       	std	Z+8, r1	; 0x08
     13a:	08 95       	ret

0000013c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	fc 01       	movw	r30, r24
     142:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     144:	21 81       	ldd	r18, Z+1	; 0x01
     146:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     148:	e9 01       	movw	r28, r18
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	13 96       	adiw	r26, 0x03	; 3
     150:	9c 93       	st	X, r25
     152:	8e 93       	st	-X, r24
     154:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     156:	81 81       	ldd	r24, Z+1	; 0x01
     158:	92 81       	ldd	r25, Z+2	; 0x02
     15a:	15 96       	adiw	r26, 0x05	; 5
     15c:	9c 93       	st	X, r25
     15e:	8e 93       	st	-X, r24
     160:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     162:	8a 81       	ldd	r24, Y+2	; 0x02
     164:	9b 81       	ldd	r25, Y+3	; 0x03
     166:	ec 01       	movw	r28, r24
     168:	7d 83       	std	Y+5, r23	; 0x05
     16a:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16c:	e9 01       	movw	r28, r18
     16e:	7b 83       	std	Y+3, r23	; 0x03
     170:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     172:	72 83       	std	Z+2, r23	; 0x02
     174:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     176:	19 96       	adiw	r26, 0x09	; 9
     178:	fc 93       	st	X, r31
     17a:	ee 93       	st	-X, r30
     17c:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17e:	80 81       	ld	r24, Z
     180:	8f 5f       	subi	r24, 0xFF	; 255
     182:	80 83       	st	Z, r24
}
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     190:	48 81       	ld	r20, Y
     192:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     194:	4f 3f       	cpi	r20, 0xFF	; 255
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	52 07       	cpc	r21, r18
     19a:	31 f4       	brne	.+12     	; 0x1a8 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19c:	dc 01       	movw	r26, r24
     19e:	17 96       	adiw	r26, 0x07	; 7
     1a0:	ed 91       	ld	r30, X+
     1a2:	fc 91       	ld	r31, X
     1a4:	18 97       	sbiw	r26, 0x08	; 8
     1a6:	17 c0       	rjmp	.+46     	; 0x1d6 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a8:	fc 01       	movw	r30, r24
     1aa:	33 96       	adiw	r30, 0x03	; 3
     1ac:	dc 01       	movw	r26, r24
     1ae:	15 96       	adiw	r26, 0x05	; 5
     1b0:	2d 91       	ld	r18, X+
     1b2:	3c 91       	ld	r19, X
     1b4:	16 97       	sbiw	r26, 0x06	; 6
     1b6:	d9 01       	movw	r26, r18
     1b8:	2d 91       	ld	r18, X+
     1ba:	3c 91       	ld	r19, X
     1bc:	42 17       	cp	r20, r18
     1be:	53 07       	cpc	r21, r19
     1c0:	50 f0       	brcs	.+20     	; 0x1d6 <vListInsert+0x4c>
     1c2:	02 80       	ldd	r0, Z+2	; 0x02
     1c4:	f3 81       	ldd	r31, Z+3	; 0x03
     1c6:	e0 2d       	mov	r30, r0
     1c8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ca:	b3 81       	ldd	r27, Z+3	; 0x03
     1cc:	2d 91       	ld	r18, X+
     1ce:	3c 91       	ld	r19, X
     1d0:	42 17       	cp	r20, r18
     1d2:	53 07       	cpc	r21, r19
     1d4:	b0 f7       	brcc	.-20     	; 0x1c2 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d6:	a2 81       	ldd	r26, Z+2	; 0x02
     1d8:	b3 81       	ldd	r27, Z+3	; 0x03
     1da:	bb 83       	std	Y+3, r27	; 0x03
     1dc:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1de:	15 96       	adiw	r26, 0x05	; 5
     1e0:	dc 93       	st	X, r29
     1e2:	ce 93       	st	-X, r28
     1e4:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e6:	fd 83       	std	Y+5, r31	; 0x05
     1e8:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ea:	d3 83       	std	Z+3, r29	; 0x03
     1ec:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ee:	99 87       	std	Y+9, r25	; 0x09
     1f0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f2:	fc 01       	movw	r30, r24
     1f4:	20 81       	ld	r18, Z
     1f6:	2f 5f       	subi	r18, 0xFF	; 255
     1f8:	20 83       	st	Z, r18
}
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	08 95       	ret

00000200 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     200:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     202:	a2 81       	ldd	r26, Z+2	; 0x02
     204:	b3 81       	ldd	r27, Z+3	; 0x03
     206:	84 81       	ldd	r24, Z+4	; 0x04
     208:	95 81       	ldd	r25, Z+5	; 0x05
     20a:	15 96       	adiw	r26, 0x05	; 5
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     212:	a4 81       	ldd	r26, Z+4	; 0x04
     214:	b5 81       	ldd	r27, Z+5	; 0x05
     216:	82 81       	ldd	r24, Z+2	; 0x02
     218:	93 81       	ldd	r25, Z+3	; 0x03
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	9c 93       	st	X, r25
     21e:	8e 93       	st	-X, r24
     220:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     222:	a0 85       	ldd	r26, Z+8	; 0x08
     224:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     226:	11 96       	adiw	r26, 0x01	; 1
     228:	8d 91       	ld	r24, X+
     22a:	9c 91       	ld	r25, X
     22c:	12 97       	sbiw	r26, 0x02	; 2
     22e:	8e 17       	cp	r24, r30
     230:	9f 07       	cpc	r25, r31
     232:	31 f4       	brne	.+12     	; 0x240 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	95 81       	ldd	r25, Z+5	; 0x05
     238:	12 96       	adiw	r26, 0x02	; 2
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     240:	11 86       	std	Z+9, r1	; 0x09
     242:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     244:	8c 91       	ld	r24, X
     246:	81 50       	subi	r24, 0x01	; 1
     248:	8c 93       	st	X, r24
     24a:	08 95       	ret

0000024c <joystickInit>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     24c:	ea e7       	ldi	r30, 0x7A	; 122
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	80 6c       	ori	r24, 0xC0	; 192
     254:	80 83       	st	Z, r24
     256:	10 92 bd 07 	sts	0x07BD, r1
     25a:	10 92 bc 07 	sts	0x07BC, r1
     25e:	10 92 b8 07 	sts	0x07B8, r1
     262:	10 92 b7 07 	sts	0x07B7, r1
     266:	08 95       	ret

00000268 <joystickSample>:
     268:	2f 92       	push	r2
     26a:	3f 92       	push	r3
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
     290:	61 97       	sbiw	r28, 0x11	; 17
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	de bf       	out	0x3e, r29	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	ea e7       	ldi	r30, 0x7A	; 122
     29e:	f0 e0       	ldi	r31, 0x00	; 0
     2a0:	80 81       	ld	r24, Z
     2a2:	80 64       	ori	r24, 0x40	; 64
     2a4:	80 83       	st	Z, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	86 fd       	sbrc	r24, 6
     2aa:	fd cf       	rjmp	.-6      	; 0x2a6 <joystickSample+0x3e>
     2ac:	80 91 78 00 	lds	r24, 0x0078
     2b0:	90 91 79 00 	lds	r25, 0x0079
     2b4:	90 93 bd 07 	sts	0x07BD, r25
     2b8:	80 93 bc 07 	sts	0x07BC, r24
     2bc:	ec e7       	ldi	r30, 0x7C	; 124
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
     2c6:	ea e7       	ldi	r30, 0x7A	; 122
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	80 83       	st	Z, r24
     2d0:	80 81       	ld	r24, Z
     2d2:	86 fd       	sbrc	r24, 6
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <joystickSample+0x68>
     2d6:	80 91 78 00 	lds	r24, 0x0078
     2da:	90 91 79 00 	lds	r25, 0x0079
     2de:	90 93 b8 07 	sts	0x07B8, r25
     2e2:	80 93 b7 07 	sts	0x07B7, r24
     2e6:	ec e7       	ldi	r30, 0x7C	; 124
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	80 83       	st	Z, r24
     2f0:	40 90 bc 07 	lds	r4, 0x07BC
     2f4:	50 90 bd 07 	lds	r5, 0x07BD
     2f8:	20 ef       	ldi	r18, 0xF0	; 240
     2fa:	42 1a       	sub	r4, r18
     2fc:	21 e0       	ldi	r18, 0x01	; 1
     2fe:	52 0a       	sbc	r5, r18
     300:	50 92 bd 07 	sts	0x07BD, r5
     304:	40 92 bc 07 	sts	0x07BC, r4
     308:	60 90 b7 07 	lds	r6, 0x07B7
     30c:	70 90 b8 07 	lds	r7, 0x07B8
     310:	3c e0       	ldi	r19, 0x0C	; 12
     312:	63 1a       	sub	r6, r19
     314:	32 e0       	ldi	r19, 0x02	; 2
     316:	73 0a       	sbc	r7, r19
     318:	70 92 b8 07 	sts	0x07B8, r7
     31c:	60 92 b7 07 	sts	0x07B7, r6
     320:	95 2d       	mov	r25, r5
     322:	99 0f       	add	r25, r25
     324:	99 0b       	sbc	r25, r25
     326:	97 2c       	mov	r9, r7
     328:	99 0c       	add	r9, r9
     32a:	99 08       	sbc	r9, r9
     32c:	a4 2c       	mov	r10, r4
     32e:	b5 2c       	mov	r11, r5
     330:	c9 2e       	mov	r12, r25
     332:	d9 2e       	mov	r13, r25
     334:	e9 2e       	mov	r14, r25
     336:	f9 2e       	mov	r15, r25
     338:	09 2f       	mov	r16, r25
     33a:	19 2f       	mov	r17, r25
     33c:	24 2d       	mov	r18, r4
     33e:	35 2d       	mov	r19, r5
     340:	49 2f       	mov	r20, r25
     342:	59 2f       	mov	r21, r25
     344:	69 2f       	mov	r22, r25
     346:	79 2f       	mov	r23, r25
     348:	89 2f       	mov	r24, r25
     34a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__muldi3>
     34e:	22 2e       	mov	r2, r18
     350:	33 2e       	mov	r3, r19
     352:	84 2e       	mov	r8, r20
     354:	5d 87       	std	Y+13, r21	; 0x0d
     356:	6e 87       	std	Y+14, r22	; 0x0e
     358:	7f 87       	std	Y+15, r23	; 0x0f
     35a:	88 8b       	std	Y+16, r24	; 0x10
     35c:	99 8b       	std	Y+17, r25	; 0x11
     35e:	a6 2c       	mov	r10, r6
     360:	b7 2c       	mov	r11, r7
     362:	c9 2c       	mov	r12, r9
     364:	d9 2c       	mov	r13, r9
     366:	e9 2c       	mov	r14, r9
     368:	f9 2c       	mov	r15, r9
     36a:	09 2d       	mov	r16, r9
     36c:	19 2d       	mov	r17, r9
     36e:	26 2d       	mov	r18, r6
     370:	37 2d       	mov	r19, r7
     372:	49 2d       	mov	r20, r9
     374:	59 2d       	mov	r21, r9
     376:	69 2d       	mov	r22, r9
     378:	79 2d       	mov	r23, r9
     37a:	89 2d       	mov	r24, r9
     37c:	99 2d       	mov	r25, r9
     37e:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__muldi3>
     382:	a2 2e       	mov	r10, r18
     384:	b3 2e       	mov	r11, r19
     386:	c4 2e       	mov	r12, r20
     388:	d5 2e       	mov	r13, r21
     38a:	e6 2e       	mov	r14, r22
     38c:	f7 2e       	mov	r15, r23
     38e:	08 2f       	mov	r16, r24
     390:	19 2f       	mov	r17, r25
     392:	22 2d       	mov	r18, r2
     394:	33 2d       	mov	r19, r3
     396:	48 2d       	mov	r20, r8
     398:	5d 85       	ldd	r21, Y+13	; 0x0d
     39a:	6e 85       	ldd	r22, Y+14	; 0x0e
     39c:	7f 85       	ldd	r23, Y+15	; 0x0f
     39e:	88 89       	ldd	r24, Y+16	; 0x10
     3a0:	99 89       	ldd	r25, Y+17	; 0x11
     3a2:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__adddi3>
     3a6:	2f 3f       	cpi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	41 05       	cpc	r20, r1
     3ac:	51 05       	cpc	r21, r1
     3ae:	61 05       	cpc	r22, r1
     3b0:	71 05       	cpc	r23, r1
     3b2:	81 05       	cpc	r24, r1
     3b4:	91 05       	cpc	r25, r1
     3b6:	09 f0       	breq	.+2      	; 0x3ba <joystickSample+0x152>
     3b8:	1c f4       	brge	.+6      	; 0x3c0 <joystickSample+0x158>
     3ba:	10 92 c2 07 	sts	0x07C2, r1
     3be:	35 c0       	rjmp	.+106    	; 0x42a <joystickSample+0x1c2>
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	89 83       	std	Y+1, r24	; 0x01
     3c4:	82 e0       	ldi	r24, 0x02	; 2
     3c6:	8a 83       	std	Y+2, r24	; 0x02
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	8b 83       	std	Y+3, r24	; 0x03
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	8c 83       	std	Y+4, r24	; 0x04
     3d0:	5e 82       	std	Y+6, r5	; 0x06
     3d2:	4d 82       	std	Y+5, r4	; 0x05
     3d4:	51 94       	neg	r5
     3d6:	41 94       	neg	r4
     3d8:	51 08       	sbc	r5, r1
     3da:	58 86       	std	Y+8, r5	; 0x08
     3dc:	4f 82       	std	Y+7, r4	; 0x07
     3de:	7a 86       	std	Y+10, r7	; 0x0a
     3e0:	69 86       	std	Y+9, r6	; 0x09
     3e2:	71 94       	neg	r7
     3e4:	61 94       	neg	r6
     3e6:	71 08       	sbc	r7, r1
     3e8:	7c 86       	std	Y+12, r7	; 0x0c
     3ea:	6b 86       	std	Y+11, r6	; 0x0b
     3ec:	de 01       	movw	r26, r28
     3ee:	17 96       	adiw	r26, 0x07	; 7
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	4d 91       	ld	r20, X+
     3f6:	5d 91       	ld	r21, X+
     3f8:	e9 2f       	mov	r30, r25
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ee 0f       	add	r30, r30
     3fe:	ff 1f       	adc	r31, r31
     400:	21 e0       	ldi	r18, 0x01	; 1
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	2c 0f       	add	r18, r28
     406:	3d 1f       	adc	r19, r29
     408:	e2 0f       	add	r30, r18
     40a:	f3 1f       	adc	r31, r19
     40c:	24 81       	ldd	r18, Z+4	; 0x04
     40e:	35 81       	ldd	r19, Z+5	; 0x05
     410:	24 17       	cp	r18, r20
     412:	35 07       	cpc	r19, r21
     414:	0c f4       	brge	.+2      	; 0x418 <joystickSample+0x1b0>
     416:	98 2f       	mov	r25, r24
     418:	8f 5f       	subi	r24, 0xFF	; 255
     41a:	84 30       	cpi	r24, 0x04	; 4
     41c:	59 f7       	brne	.-42     	; 0x3f4 <joystickSample+0x18c>
     41e:	fe 01       	movw	r30, r28
     420:	e9 0f       	add	r30, r25
     422:	f1 1d       	adc	r31, r1
     424:	81 81       	ldd	r24, Z+1	; 0x01
     426:	80 93 c2 07 	sts	0x07C2, r24
     42a:	61 96       	adiw	r28, 0x11	; 17
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	9f 90       	pop	r9
     44c:	8f 90       	pop	r8
     44e:	7f 90       	pop	r7
     450:	6f 90       	pop	r6
     452:	5f 90       	pop	r5
     454:	4f 90       	pop	r4
     456:	3f 90       	pop	r3
     458:	2f 90       	pop	r2
     45a:	08 95       	ret

0000045c <QueueInit>:
     45c:	1f 93       	push	r17
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	18 2f       	mov	r17, r24
     464:	86 e0       	ldi	r24, 0x06	; 6
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <malloc>
     46c:	ec 01       	movw	r28, r24
     46e:	81 2f       	mov	r24, r17
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <malloc>
     476:	99 83       	std	Y+1, r25	; 0x01
     478:	88 83       	st	Y, r24
     47a:	1a 82       	std	Y+2, r1	; 0x02
     47c:	1b 82       	std	Y+3, r1	; 0x03
     47e:	1c 82       	std	Y+4, r1	; 0x04
     480:	1d 83       	std	Y+5, r17	; 0x05
     482:	ce 01       	movw	r24, r28
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	08 95       	ret

0000048c <QueueEnqueue>:
     48c:	fc 01       	movw	r30, r24
     48e:	94 81       	ldd	r25, Z+4	; 0x04
     490:	85 81       	ldd	r24, Z+5	; 0x05
     492:	98 17       	cp	r25, r24
     494:	88 f4       	brcc	.+34     	; 0x4b8 <QueueEnqueue+0x2c>
     496:	83 81       	ldd	r24, Z+3	; 0x03
     498:	a0 81       	ld	r26, Z
     49a:	b1 81       	ldd	r27, Z+1	; 0x01
     49c:	a8 0f       	add	r26, r24
     49e:	b1 1d       	adc	r27, r1
     4a0:	6c 93       	st	X, r22
     4a2:	83 81       	ldd	r24, Z+3	; 0x03
     4a4:	8f 5f       	subi	r24, 0xFF	; 255
     4a6:	65 81       	ldd	r22, Z+5	; 0x05
     4a8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__udivmodqi4>
     4ac:	93 83       	std	Z+3, r25	; 0x03
     4ae:	84 81       	ldd	r24, Z+4	; 0x04
     4b0:	8f 5f       	subi	r24, 0xFF	; 255
     4b2:	84 83       	std	Z+4, r24	; 0x04
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	08 95       	ret

000004bc <QueueDequeue>:
     4bc:	fc 01       	movw	r30, r24
     4be:	84 81       	ldd	r24, Z+4	; 0x04
     4c0:	88 23       	and	r24, r24
     4c2:	89 f0       	breq	.+34     	; 0x4e6 <QueueDequeue+0x2a>
     4c4:	82 81       	ldd	r24, Z+2	; 0x02
     4c6:	a0 81       	ld	r26, Z
     4c8:	b1 81       	ldd	r27, Z+1	; 0x01
     4ca:	a8 0f       	add	r26, r24
     4cc:	b1 1d       	adc	r27, r1
     4ce:	2c 91       	ld	r18, X
     4d0:	1c 92       	st	X, r1
     4d2:	82 81       	ldd	r24, Z+2	; 0x02
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	65 81       	ldd	r22, Z+5	; 0x05
     4d8:	0e 94 b5 0c 	call	0x196a	; 0x196a <__udivmodqi4>
     4dc:	92 83       	std	Z+2, r25	; 0x02
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	81 50       	subi	r24, 0x01	; 1
     4e2:	84 83       	std	Z+4, r24	; 0x04
     4e4:	82 2f       	mov	r24, r18
     4e6:	08 95       	ret

000004e8 <SPI_ServantInit>:
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	84 b9       	out	0x04, r24	; 4
     4ec:	8c b5       	in	r24, 0x2c	; 44
     4ee:	80 6c       	ori	r24, 0xC0	; 192
     4f0:	8c bd       	out	0x2c, r24	; 44
     4f2:	8f b7       	in	r24, 0x3f	; 63
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8f bf       	out	0x3f, r24	; 63
     4f8:	08 95       	ret

000004fa <__vector_19>:
     4fa:	1f 92       	push	r1
     4fc:	0f 92       	push	r0
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	0f 92       	push	r0
     502:	11 24       	eor	r1, r1
     504:	8f 93       	push	r24
     506:	8e b5       	in	r24, 0x2e	; 46
     508:	80 93 37 01 	sts	0x0137, r24
     50c:	8f 91       	pop	r24
     50e:	0f 90       	pop	r0
     510:	0f be       	out	0x3f, r0	; 63
     512:	0f 90       	pop	r0
     514:	1f 90       	pop	r1
     516:	18 95       	reti

00000518 <transmit_data>:
     518:	43 9a       	sbi	0x08, 3	; 8
     51a:	41 98       	cbi	0x08, 1	; 8
     51c:	38 e0       	ldi	r19, 0x08	; 8
     51e:	43 9a       	sbi	0x08, 3	; 8
     520:	42 98       	cbi	0x08, 2	; 8
     522:	98 b1       	in	r25, 0x08	; 8
     524:	88 23       	and	r24, r24
     526:	14 f4       	brge	.+4      	; 0x52c <transmit_data+0x14>
     528:	91 60       	ori	r25, 0x01	; 1
     52a:	01 c0       	rjmp	.+2      	; 0x52e <transmit_data+0x16>
     52c:	9e 7f       	andi	r25, 0xFE	; 254
     52e:	98 b9       	out	0x08, r25	; 8
     530:	98 b1       	in	r25, 0x08	; 8
     532:	66 23       	and	r22, r22
     534:	14 f4       	brge	.+4      	; 0x53a <transmit_data+0x22>
     536:	90 61       	ori	r25, 0x10	; 16
     538:	01 c0       	rjmp	.+2      	; 0x53c <transmit_data+0x24>
     53a:	9f 7e       	andi	r25, 0xEF	; 239
     53c:	98 b9       	out	0x08, r25	; 8
     53e:	98 b1       	in	r25, 0x08	; 8
     540:	44 23       	and	r20, r20
     542:	14 f4       	brge	.+4      	; 0x548 <transmit_data+0x30>
     544:	90 62       	ori	r25, 0x20	; 32
     546:	01 c0       	rjmp	.+2      	; 0x54a <transmit_data+0x32>
     548:	9f 7d       	andi	r25, 0xDF	; 223
     54a:	98 b9       	out	0x08, r25	; 8
     54c:	98 b1       	in	r25, 0x08	; 8
     54e:	22 23       	and	r18, r18
     550:	14 f4       	brge	.+4      	; 0x556 <transmit_data+0x3e>
     552:	90 64       	ori	r25, 0x40	; 64
     554:	01 c0       	rjmp	.+2      	; 0x558 <transmit_data+0x40>
     556:	9f 7b       	andi	r25, 0xBF	; 191
     558:	98 b9       	out	0x08, r25	; 8
     55a:	88 0f       	add	r24, r24
     55c:	66 0f       	add	r22, r22
     55e:	44 0f       	add	r20, r20
     560:	22 0f       	add	r18, r18
     562:	42 9a       	sbi	0x08, 2	; 8
     564:	31 50       	subi	r19, 0x01	; 1
     566:	d9 f6       	brne	.-74     	; 0x51e <transmit_data+0x6>
     568:	41 9a       	sbi	0x08, 1	; 8
     56a:	08 95       	ret

0000056c <Shift_Tick>:
     56c:	80 91 be 07 	lds	r24, 0x07BE
     570:	81 11       	cpse	r24, r1
     572:	05 c0       	rjmp	.+10     	; 0x57e <Shift_Tick+0x12>
     574:	20 91 5a 07 	lds	r18, 0x075A
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	cd df       	rcall	.-102    	; 0x518 <transmit_data>
     57e:	80 91 be 07 	lds	r24, 0x07BE
     582:	81 11       	cpse	r24, r1
     584:	10 92 be 07 	sts	0x07BE, r1
     588:	08 95       	ret

0000058a <Shift_Task>:
     58a:	10 92 be 07 	sts	0x07BE, r1
     58e:	ee df       	rcall	.-36     	; 0x56c <Shift_Tick>
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	ef d7       	rcall	.+4062   	; 0x1574 <vTaskDelay>
     596:	fb cf       	rjmp	.-10     	; 0x58e <Shift_Task+0x4>

00000598 <Motor_Tick>:
     598:	2f 92       	push	r2
     59a:	3f 92       	push	r3
     59c:	4f 92       	push	r4
     59e:	5f 92       	push	r5
     5a0:	6f 92       	push	r6
     5a2:	7f 92       	push	r7
     5a4:	8f 92       	push	r8
     5a6:	9f 92       	push	r9
     5a8:	af 92       	push	r10
     5aa:	bf 92       	push	r11
     5ac:	cf 92       	push	r12
     5ae:	df 92       	push	r13
     5b0:	ef 92       	push	r14
     5b2:	ff 92       	push	r15
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	2a 97       	sbiw	r28, 0x0a	; 10
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	80 91 bb 07 	lds	r24, 0x07BB
     5d0:	88 23       	and	r24, r24
     5d2:	19 f0       	breq	.+6      	; 0x5da <Motor_Tick+0x42>
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	19 f0       	breq	.+6      	; 0x5de <Motor_Tick+0x46>
     5d8:	03 c1       	rjmp	.+518    	; 0x7e0 <Motor_Tick+0x248>
     5da:	15 b8       	out	0x05, r1	; 5
     5dc:	01 c1       	rjmp	.+514    	; 0x7e0 <Motor_Tick+0x248>
     5de:	0f 2e       	mov	r0, r31
     5e0:	fa e4       	ldi	r31, 0x4A	; 74
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f7 e0       	ldi	r31, 0x07	; 7
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f2 e5       	ldi	r31, 0x52	; 82
     5ee:	8f 2e       	mov	r8, r31
     5f0:	f7 e0       	ldi	r31, 0x07	; 7
     5f2:	9f 2e       	mov	r9, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	0f 2e       	mov	r0, r31
     5f8:	ff e2       	ldi	r31, 0x2F	; 47
     5fa:	2f 2e       	mov	r2, r31
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	3f 2e       	mov	r3, r31
     600:	f0 2d       	mov	r31, r0
     602:	81 e3       	ldi	r24, 0x31	; 49
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9a 83       	std	Y+2, r25	; 0x02
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	03 e3       	ldi	r16, 0x33	; 51
     60c:	11 e0       	ldi	r17, 0x01	; 1
     60e:	a7 e2       	ldi	r26, 0x27	; 39
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	bc 83       	std	Y+4, r27	; 0x04
     614:	ab 83       	std	Y+3, r26	; 0x03
     616:	aa 24       	eor	r10, r10
     618:	a3 94       	inc	r10
     61a:	b1 2c       	mov	r11, r1
     61c:	fa 86       	std	Y+10, r15	; 0x0a
     61e:	e9 86       	std	Y+9, r14	; 0x09
     620:	98 86       	std	Y+8, r9	; 0x08
     622:	8f 82       	std	Y+7, r8	; 0x07
     624:	f4 01       	movw	r30, r8
     626:	60 81       	ld	r22, Z
     628:	71 81       	ldd	r23, Z+1	; 0x01
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	44 e3       	ldi	r20, 0x34	; 52
     634:	54 e4       	ldi	r21, 0x44	; 68
     636:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <fmod>
     63a:	2b 01       	movw	r4, r22
     63c:	3c 01       	movw	r6, r24
     63e:	d4 01       	movw	r26, r8
     640:	6d 93       	st	X+, r22
     642:	7d 93       	st	X+, r23
     644:	8d 93       	st	X+, r24
     646:	9c 93       	st	X, r25
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	e9 84       	ldd	r14, Y+9	; 0x09
     64c:	fa 84       	ldd	r15, Y+10	; 0x0a
     64e:	fe 82       	std	Y+6, r15	; 0x06
     650:	ed 82       	std	Y+5, r14	; 0x05
     652:	d7 01       	movw	r26, r14
     654:	6d 91       	ld	r22, X+
     656:	7d 91       	ld	r23, X+
     658:	8d 91       	ld	r24, X+
     65a:	9c 91       	ld	r25, X
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	44 e3       	ldi	r20, 0x34	; 52
     662:	54 e4       	ldi	r21, 0x44	; 68
     664:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <fmod>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	e9 85       	ldd	r30, Y+9	; 0x09
     66e:	fa 85       	ldd	r31, Y+10	; 0x0a
     670:	60 83       	st	Z, r22
     672:	71 83       	std	Z+1, r23	; 0x01
     674:	82 83       	std	Z+2, r24	; 0x02
     676:	93 83       	std	Z+3, r25	; 0x03
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	c3 01       	movw	r24, r6
     680:	b2 01       	movw	r22, r4
     682:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     686:	88 23       	and	r24, r24
     688:	74 f4       	brge	.+28     	; 0x6a6 <Motor_Tick+0x10e>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	44 e3       	ldi	r20, 0x34	; 52
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     69a:	d4 01       	movw	r26, r8
     69c:	6d 93       	st	X+, r22
     69e:	7d 93       	st	X+, r23
     6a0:	8d 93       	st	X+, r24
     6a2:	9c 93       	st	X, r25
     6a4:	13 97       	sbiw	r26, 0x03	; 3
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	a9 01       	movw	r20, r18
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	0c f0       	brlt	.+2      	; 0x6ba <Motor_Tick+0x122>
     6b8:	9b c0       	rjmp	.+310    	; 0x7f0 <Motor_Tick+0x258>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	44 e3       	ldi	r20, 0x34	; 52
     6c0:	54 e4       	ldi	r21, 0x44	; 68
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <__addsf3>
     6ca:	ed 81       	ldd	r30, Y+5	; 0x05
     6cc:	fe 81       	ldd	r31, Y+6	; 0x06
     6ce:	60 83       	st	Z, r22
     6d0:	71 83       	std	Z+1, r23	; 0x01
     6d2:	82 83       	std	Z+2, r24	; 0x02
     6d4:	93 83       	std	Z+3, r25	; 0x03
     6d6:	8c c0       	rjmp	.+280    	; 0x7f0 <Motor_Tick+0x258>
     6d8:	27 2f       	mov	r18, r23
     6da:	37 2d       	mov	r19, r7
     6dc:	d1 01       	movw	r26, r2
     6de:	dc 90       	ld	r13, X
     6e0:	dc 01       	movw	r26, r24
     6e2:	64 e0       	ldi	r22, 0x04	; 4
     6e4:	d6 9e       	mul	r13, r22
     6e6:	a0 0d       	add	r26, r0
     6e8:	b1 1d       	adc	r27, r1
     6ea:	11 24       	eor	r1, r1
     6ec:	a9 5f       	subi	r26, 0xF9	; 249
     6ee:	be 4f       	sbci	r27, 0xFE	; 254
     6f0:	ac 91       	ld	r26, X
     6f2:	aa 23       	and	r26, r26
     6f4:	79 f0       	breq	.+30     	; 0x714 <Motor_Tick+0x17c>
     6f6:	d8 01       	movw	r26, r16
     6f8:	ed 90       	ld	r14, X+
     6fa:	fc 90       	ld	r15, X
     6fc:	65 01       	movw	r12, r10
     6fe:	00 80       	ld	r0, Z
     700:	02 c0       	rjmp	.+4      	; 0x706 <Motor_Tick+0x16e>
     702:	cc 0c       	add	r12, r12
     704:	dd 1c       	adc	r13, r13
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <Motor_Tick+0x16a>
     70a:	d7 01       	movw	r26, r14
     70c:	6c 91       	ld	r22, X
     70e:	c6 2a       	or	r12, r22
     710:	cc 92       	st	X, r12
     712:	10 c0       	rjmp	.+32     	; 0x734 <Motor_Tick+0x19c>
     714:	d8 01       	movw	r26, r16
     716:	ed 90       	ld	r14, X+
     718:	fc 90       	ld	r15, X
     71a:	d5 01       	movw	r26, r10
     71c:	00 80       	ld	r0, Z
     71e:	02 c0       	rjmp	.+4      	; 0x724 <Motor_Tick+0x18c>
     720:	aa 0f       	add	r26, r26
     722:	bb 1f       	adc	r27, r27
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <Motor_Tick+0x188>
     728:	6a 2f       	mov	r22, r26
     72a:	60 95       	com	r22
     72c:	d7 01       	movw	r26, r14
     72e:	dc 90       	ld	r13, X
     730:	6d 21       	and	r22, r13
     732:	6c 93       	st	X, r22
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	91 05       	cpc	r25, r1
     73c:	69 f6       	brne	.-102    	; 0x6d8 <Motor_Tick+0x140>
     73e:	5a 87       	std	Y+10, r21	; 0x0a
     740:	49 87       	std	Y+9, r20	; 0x09
     742:	f9 01       	movw	r30, r18
     744:	a9 81       	ldd	r26, Y+1	; 0x01
     746:	ba 81       	ldd	r27, Y+2	; 0x02
     748:	8c 91       	ld	r24, X
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <Motor_Tick+0x1b8>
     74e:	6c c0       	rjmp	.+216    	; 0x828 <Motor_Tick+0x290>
     750:	80 81       	ld	r24, Z
     752:	8f 5f       	subi	r24, 0xFF	; 255
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	10 f4       	brcc	.+4      	; 0x75c <Motor_Tick+0x1c4>
     758:	80 83       	st	Z, r24
     75a:	28 c0       	rjmp	.+80     	; 0x7ac <Motor_Tick+0x214>
     75c:	10 82       	st	Z, r1
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	44 e3       	ldi	r20, 0x34	; 52
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	ed 81       	ldd	r30, Y+5	; 0x05
     768:	fe 81       	ldd	r31, Y+6	; 0x06
     76a:	60 81       	ld	r22, Z
     76c:	71 81       	ldd	r23, Z+1	; 0x01
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	c2 d7       	rcall	.+3972   	; 0x16f8 <__addsf3>
     774:	ad 81       	ldd	r26, Y+5	; 0x05
     776:	be 81       	ldd	r27, Y+6	; 0x06
     778:	6d 93       	st	X+, r22
     77a:	7d 93       	st	X+, r23
     77c:	8d 93       	st	X+, r24
     77e:	9c 93       	st	X, r25
     780:	13 97       	sbiw	r26, 0x03	; 3
     782:	14 c0       	rjmp	.+40     	; 0x7ac <Motor_Tick+0x214>
     784:	b7 e0       	ldi	r27, 0x07	; 7
     786:	b0 83       	st	Z, r27
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	44 e3       	ldi	r20, 0x34	; 52
     78e:	5f e3       	ldi	r21, 0x3F	; 63
     790:	ed 81       	ldd	r30, Y+5	; 0x05
     792:	fe 81       	ldd	r31, Y+6	; 0x06
     794:	60 81       	ld	r22, Z
     796:	71 81       	ldd	r23, Z+1	; 0x01
     798:	82 81       	ldd	r24, Z+2	; 0x02
     79a:	93 81       	ldd	r25, Z+3	; 0x03
     79c:	ac d7       	rcall	.+3928   	; 0x16f6 <__subsf3>
     79e:	ad 81       	ldd	r26, Y+5	; 0x05
     7a0:	be 81       	ldd	r27, Y+6	; 0x06
     7a2:	6d 93       	st	X+, r22
     7a4:	7d 93       	st	X+, r23
     7a6:	8d 93       	st	X+, r24
     7a8:	9c 93       	st	X, r25
     7aa:	13 97       	sbiw	r26, 0x03	; 3
     7ac:	e9 85       	ldd	r30, Y+9	; 0x09
     7ae:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b0:	34 96       	adiw	r30, 0x04	; 4
     7b2:	fa 87       	std	Y+10, r31	; 0x0a
     7b4:	e9 87       	std	Y+9, r30	; 0x09
     7b6:	ff ef       	ldi	r31, 0xFF	; 255
     7b8:	2f 1a       	sub	r2, r31
     7ba:	3f 0a       	sbc	r3, r31
     7bc:	89 81       	ldd	r24, Y+1	; 0x01
     7be:	9a 81       	ldd	r25, Y+2	; 0x02
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	9a 83       	std	Y+2, r25	; 0x02
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	0e 5f       	subi	r16, 0xFE	; 254
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	ab 81       	ldd	r26, Y+3	; 0x03
     7cc:	bc 81       	ldd	r27, Y+4	; 0x04
     7ce:	14 96       	adiw	r26, 0x04	; 4
     7d0:	bc 83       	std	Y+4, r27	; 0x04
     7d2:	ab 83       	std	Y+3, r26	; 0x03
     7d4:	e9 85       	ldd	r30, Y+9	; 0x09
     7d6:	fa 85       	ldd	r31, Y+10	; 0x0a
     7d8:	e2 55       	subi	r30, 0x52	; 82
     7da:	f7 40       	sbci	r31, 0x07	; 7
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <Motor_Tick+0x248>
     7de:	20 cf       	rjmp	.-448    	; 0x620 <Motor_Tick+0x88>
     7e0:	80 91 bb 07 	lds	r24, 0x07BB
     7e4:	81 11       	cpse	r24, r1
     7e6:	27 c0       	rjmp	.+78     	; 0x836 <Motor_Tick+0x29e>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 bb 07 	sts	0x07BB, r24
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <Motor_Tick+0x29e>
     7f0:	64 e0       	ldi	r22, 0x04	; 4
     7f2:	86 0e       	add	r8, r22
     7f4:	91 1c       	adc	r9, r1
     7f6:	ad 81       	ldd	r26, Y+5	; 0x05
     7f8:	be 81       	ldd	r27, Y+6	; 0x06
     7fa:	2d 91       	ld	r18, X+
     7fc:	3d 91       	ld	r19, X+
     7fe:	4d 91       	ld	r20, X+
     800:	5c 91       	ld	r21, X
     802:	ef 81       	ldd	r30, Y+7	; 0x07
     804:	f8 85       	ldd	r31, Y+8	; 0x08
     806:	60 81       	ld	r22, Z
     808:	71 81       	ldd	r23, Z+1	; 0x01
     80a:	82 81       	ldd	r24, Z+2	; 0x02
     80c:	93 81       	ldd	r25, Z+3	; 0x03
     80e:	d8 d7       	rcall	.+4016   	; 0x17c0 <__cmpsf2>
     810:	88 23       	and	r24, r24
     812:	61 f2       	breq	.-104    	; 0x7ac <Motor_Tick+0x214>
     814:	4b 81       	ldd	r20, Y+3	; 0x03
     816:	5c 81       	ldd	r21, Y+4	; 0x04
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	72 2d       	mov	r23, r2
     81e:	fa 01       	movw	r30, r20
     820:	49 85       	ldd	r20, Y+9	; 0x09
     822:	5a 85       	ldd	r21, Y+10	; 0x0a
     824:	73 2c       	mov	r7, r3
     826:	58 cf       	rjmp	.-336    	; 0x6d8 <Motor_Tick+0x140>
     828:	80 81       	ld	r24, Z
     82a:	88 23       	and	r24, r24
     82c:	09 f4       	brne	.+2      	; 0x830 <Motor_Tick+0x298>
     82e:	aa cf       	rjmp	.-172    	; 0x784 <Motor_Tick+0x1ec>
     830:	81 50       	subi	r24, 0x01	; 1
     832:	80 83       	st	Z, r24
     834:	bb cf       	rjmp	.-138    	; 0x7ac <Motor_Tick+0x214>
     836:	2a 96       	adiw	r28, 0x0a	; 10
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	3f 90       	pop	r3
     864:	2f 90       	pop	r2
     866:	08 95       	ret

00000868 <Motor_Task>:
     868:	10 92 bb 07 	sts	0x07BB, r1
     86c:	95 de       	rcall	.-726    	; 0x598 <Motor_Tick>
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	80 d6       	rcall	.+3328   	; 0x1574 <vTaskDelay>
     874:	fb cf       	rjmp	.-10     	; 0x86c <Motor_Task+0x4>

00000876 <Move_Tick>:
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	80 91 c1 07 	lds	r24, 0x07C1
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	19 f0       	breq	.+6      	; 0x888 <Move_Tick+0x12>
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	79 f0       	breq	.+30     	; 0x8a4 <Move_Tick+0x2e>
     886:	1a c0       	rjmp	.+52     	; 0x8bc <Move_Tick+0x46>
     888:	28 b1       	in	r18, 0x08	; 8
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	00 90 06 01 	lds	r0, 0x0106
     892:	02 c0       	rjmp	.+4      	; 0x898 <Move_Tick+0x22>
     894:	88 0f       	add	r24, r24
     896:	99 1f       	adc	r25, r25
     898:	0a 94       	dec	r0
     89a:	e2 f7       	brpl	.-8      	; 0x894 <Move_Tick+0x1e>
     89c:	80 95       	com	r24
     89e:	82 23       	and	r24, r18
     8a0:	88 b9       	out	0x08, r24	; 8
     8a2:	0c c0       	rjmp	.+24     	; 0x8bc <Move_Tick+0x46>
     8a4:	28 b1       	in	r18, 0x08	; 8
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	00 90 06 01 	lds	r0, 0x0106
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <Move_Tick+0x3e>
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	0a 94       	dec	r0
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <Move_Tick+0x3a>
     8b8:	82 2b       	or	r24, r18
     8ba:	88 b9       	out	0x08, r24	; 8
     8bc:	80 91 c1 07 	lds	r24, 0x07C1
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	09 f4       	brne	.+2      	; 0x8c6 <Move_Tick+0x50>
     8c4:	ab c0       	rjmp	.+342    	; 0xa1c <Move_Tick+0x1a6>
     8c6:	28 f4       	brcc	.+10     	; 0x8d2 <Move_Tick+0x5c>
     8c8:	88 23       	and	r24, r24
     8ca:	51 f0       	breq	.+20     	; 0x8e0 <Move_Tick+0x6a>
     8cc:	81 30       	cpi	r24, 0x01	; 1
     8ce:	61 f0       	breq	.+24     	; 0x8e8 <Move_Tick+0x72>
     8d0:	6d c1       	rjmp	.+730    	; 0xbac <Move_Tick+0x336>
     8d2:	83 30       	cpi	r24, 0x03	; 3
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <Move_Tick+0x62>
     8d6:	bb c0       	rjmp	.+374    	; 0xa4e <Move_Tick+0x1d8>
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	09 f4       	brne	.+2      	; 0x8de <Move_Tick+0x68>
     8dc:	50 c1       	rjmp	.+672    	; 0xb7e <Move_Tick+0x308>
     8de:	66 c1       	rjmp	.+716    	; 0xbac <Move_Tick+0x336>
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	80 93 c1 07 	sts	0x07C1, r24
     8e6:	64 c1       	rjmp	.+712    	; 0xbb0 <Move_Tick+0x33a>
     8e8:	e0 91 b5 07 	lds	r30, 0x07B5
     8ec:	f0 91 b6 07 	lds	r31, 0x07B6
     8f0:	84 81       	ldd	r24, Z+4	; 0x04
     8f2:	88 23       	and	r24, r24
     8f4:	09 f4       	brne	.+2      	; 0x8f8 <Move_Tick+0x82>
     8f6:	5c c1       	rjmp	.+696    	; 0xbb0 <Move_Tick+0x33a>
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	80 93 c1 07 	sts	0x07C1, r24
     8fe:	cf 01       	movw	r24, r30
     900:	dd dd       	rcall	.-1094   	; 0x4bc <QueueDequeue>
     902:	80 93 48 07 	sts	0x0748, r24
     906:	81 11       	cpse	r24, r1
     908:	22 c0       	rjmp	.+68     	; 0x94e <Move_Tick+0xd8>
     90a:	c2 e5       	ldi	r28, 0x52	; 82
     90c:	d7 e0       	ldi	r29, 0x07	; 7
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	44 eb       	ldi	r20, 0xB4	; 180
     914:	52 e4       	ldi	r21, 0x42	; 66
     916:	6c 81       	ldd	r22, Y+4	; 0x04
     918:	7d 81       	ldd	r23, Y+5	; 0x05
     91a:	8e 81       	ldd	r24, Y+6	; 0x06
     91c:	9f 81       	ldd	r25, Y+7	; 0x07
     91e:	ec d6       	rcall	.+3544   	; 0x16f8 <__addsf3>
     920:	6c 83       	std	Y+4, r22	; 0x04
     922:	7d 83       	std	Y+5, r23	; 0x05
     924:	8e 83       	std	Y+6, r24	; 0x06
     926:	9f 83       	std	Y+7, r25	; 0x07
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	80 93 32 01 	sts	0x0132, r24
     92e:	86 e5       	ldi	r24, 0x56	; 86
     930:	97 e0       	ldi	r25, 0x07	; 7
     932:	90 93 c4 07 	sts	0x07C4, r25
     936:	80 93 c3 07 	sts	0x07C3, r24
     93a:	8e e4       	ldi	r24, 0x4E	; 78
     93c:	97 e0       	ldi	r25, 0x07	; 7
     93e:	90 93 ba 07 	sts	0x07BA, r25
     942:	80 93 b9 07 	sts	0x07B9, r24
     946:	87 e0       	ldi	r24, 0x07	; 7
     948:	80 93 06 01 	sts	0x0106, r24
     94c:	31 c1       	rjmp	.+610    	; 0xbb0 <Move_Tick+0x33a>
     94e:	81 30       	cpi	r24, 0x01	; 1
     950:	09 f5       	brne	.+66     	; 0x994 <Move_Tick+0x11e>
     952:	c2 e5       	ldi	r28, 0x52	; 82
     954:	d7 e0       	ldi	r29, 0x07	; 7
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	44 eb       	ldi	r20, 0xB4	; 180
     95c:	52 e4       	ldi	r21, 0x42	; 66
     95e:	6c 81       	ldd	r22, Y+4	; 0x04
     960:	7d 81       	ldd	r23, Y+5	; 0x05
     962:	8e 81       	ldd	r24, Y+6	; 0x06
     964:	9f 81       	ldd	r25, Y+7	; 0x07
     966:	c7 d6       	rcall	.+3470   	; 0x16f6 <__subsf3>
     968:	6c 83       	std	Y+4, r22	; 0x04
     96a:	7d 83       	std	Y+5, r23	; 0x05
     96c:	8e 83       	std	Y+6, r24	; 0x06
     96e:	9f 83       	std	Y+7, r25	; 0x07
     970:	10 92 32 01 	sts	0x0132, r1
     974:	86 e5       	ldi	r24, 0x56	; 86
     976:	97 e0       	ldi	r25, 0x07	; 7
     978:	90 93 c4 07 	sts	0x07C4, r25
     97c:	80 93 c3 07 	sts	0x07C3, r24
     980:	8e e4       	ldi	r24, 0x4E	; 78
     982:	97 e0       	ldi	r25, 0x07	; 7
     984:	90 93 ba 07 	sts	0x07BA, r25
     988:	80 93 b9 07 	sts	0x07B9, r24
     98c:	87 e0       	ldi	r24, 0x07	; 7
     98e:	80 93 06 01 	sts	0x0106, r24
     992:	0e c1       	rjmp	.+540    	; 0xbb0 <Move_Tick+0x33a>
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	01 f5       	brne	.+64     	; 0x9d8 <Move_Tick+0x162>
     998:	c2 e5       	ldi	r28, 0x52	; 82
     99a:	d7 e0       	ldi	r29, 0x07	; 7
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	44 eb       	ldi	r20, 0xB4	; 180
     9a2:	52 e4       	ldi	r21, 0x42	; 66
     9a4:	68 81       	ld	r22, Y
     9a6:	79 81       	ldd	r23, Y+1	; 0x01
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	9b 81       	ldd	r25, Y+3	; 0x03
     9ac:	a5 d6       	rcall	.+3402   	; 0x16f8 <__addsf3>
     9ae:	68 83       	st	Y, r22
     9b0:	79 83       	std	Y+1, r23	; 0x01
     9b2:	8a 83       	std	Y+2, r24	; 0x02
     9b4:	9b 83       	std	Y+3, r25	; 0x03
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 31 01 	sts	0x0131, r24
     9bc:	d0 93 c4 07 	sts	0x07C4, r29
     9c0:	c0 93 c3 07 	sts	0x07C3, r28
     9c4:	8a e4       	ldi	r24, 0x4A	; 74
     9c6:	97 e0       	ldi	r25, 0x07	; 7
     9c8:	90 93 ba 07 	sts	0x07BA, r25
     9cc:	80 93 b9 07 	sts	0x07B9, r24
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	80 93 06 01 	sts	0x0106, r24
     9d6:	ec c0       	rjmp	.+472    	; 0xbb0 <Move_Tick+0x33a>
     9d8:	84 30       	cpi	r24, 0x04	; 4
     9da:	09 f0       	breq	.+2      	; 0x9de <Move_Tick+0x168>
     9dc:	e9 c0       	rjmp	.+466    	; 0xbb0 <Move_Tick+0x33a>
     9de:	c2 e5       	ldi	r28, 0x52	; 82
     9e0:	d7 e0       	ldi	r29, 0x07	; 7
     9e2:	20 e0       	ldi	r18, 0x00	; 0
     9e4:	30 e0       	ldi	r19, 0x00	; 0
     9e6:	44 eb       	ldi	r20, 0xB4	; 180
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	68 81       	ld	r22, Y
     9ec:	79 81       	ldd	r23, Y+1	; 0x01
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	9b 81       	ldd	r25, Y+3	; 0x03
     9f2:	81 d6       	rcall	.+3330   	; 0x16f6 <__subsf3>
     9f4:	68 83       	st	Y, r22
     9f6:	79 83       	std	Y+1, r23	; 0x01
     9f8:	8a 83       	std	Y+2, r24	; 0x02
     9fa:	9b 83       	std	Y+3, r25	; 0x03
     9fc:	10 92 31 01 	sts	0x0131, r1
     a00:	d0 93 c4 07 	sts	0x07C4, r29
     a04:	c0 93 c3 07 	sts	0x07C3, r28
     a08:	8a e4       	ldi	r24, 0x4A	; 74
     a0a:	97 e0       	ldi	r25, 0x07	; 7
     a0c:	90 93 ba 07 	sts	0x07BA, r25
     a10:	80 93 b9 07 	sts	0x07B9, r24
     a14:	87 e0       	ldi	r24, 0x07	; 7
     a16:	80 93 06 01 	sts	0x0106, r24
     a1a:	ca c0       	rjmp	.+404    	; 0xbb0 <Move_Tick+0x33a>
     a1c:	e0 91 c3 07 	lds	r30, 0x07C3
     a20:	f0 91 c4 07 	lds	r31, 0x07C4
     a24:	a0 91 b9 07 	lds	r26, 0x07B9
     a28:	b0 91 ba 07 	lds	r27, 0x07BA
     a2c:	2d 91       	ld	r18, X+
     a2e:	3d 91       	ld	r19, X+
     a30:	4d 91       	ld	r20, X+
     a32:	5c 91       	ld	r21, X
     a34:	60 81       	ld	r22, Z
     a36:	71 81       	ldd	r23, Z+1	; 0x01
     a38:	82 81       	ldd	r24, Z+2	; 0x02
     a3a:	93 81       	ldd	r25, Z+3	; 0x03
     a3c:	c1 d6       	rcall	.+3458   	; 0x17c0 <__cmpsf2>
     a3e:	81 11       	cpse	r24, r1
     a40:	b7 c0       	rjmp	.+366    	; 0xbb0 <Move_Tick+0x33a>
     a42:	83 e0       	ldi	r24, 0x03	; 3
     a44:	80 93 c1 07 	sts	0x07C1, r24
     a48:	10 92 49 07 	sts	0x0749, r1
     a4c:	b1 c0       	rjmp	.+354    	; 0xbb0 <Move_Tick+0x33a>
     a4e:	80 91 49 07 	lds	r24, 0x0749
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	98 0f       	add	r25, r24
     a56:	90 93 49 07 	sts	0x0749, r25
     a5a:	83 33       	cpi	r24, 0x33	; 51
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <Move_Tick+0x1ea>
     a5e:	a8 c0       	rjmp	.+336    	; 0xbb0 <Move_Tick+0x33a>
     a60:	84 e0       	ldi	r24, 0x04	; 4
     a62:	80 93 c1 07 	sts	0x07C1, r24
     a66:	80 91 48 07 	lds	r24, 0x0748
     a6a:	81 11       	cpse	r24, r1
     a6c:	21 c0       	rjmp	.+66     	; 0xab0 <Move_Tick+0x23a>
     a6e:	c2 e5       	ldi	r28, 0x52	; 82
     a70:	d7 e0       	ldi	r29, 0x07	; 7
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	44 eb       	ldi	r20, 0xB4	; 180
     a78:	52 e4       	ldi	r21, 0x42	; 66
     a7a:	6c 81       	ldd	r22, Y+4	; 0x04
     a7c:	7d 81       	ldd	r23, Y+5	; 0x05
     a7e:	8e 81       	ldd	r24, Y+6	; 0x06
     a80:	9f 81       	ldd	r25, Y+7	; 0x07
     a82:	39 d6       	rcall	.+3186   	; 0x16f6 <__subsf3>
     a84:	6c 83       	std	Y+4, r22	; 0x04
     a86:	7d 83       	std	Y+5, r23	; 0x05
     a88:	8e 83       	std	Y+6, r24	; 0x06
     a8a:	9f 83       	std	Y+7, r25	; 0x07
     a8c:	10 92 32 01 	sts	0x0132, r1
     a90:	86 e5       	ldi	r24, 0x56	; 86
     a92:	97 e0       	ldi	r25, 0x07	; 7
     a94:	90 93 c4 07 	sts	0x07C4, r25
     a98:	80 93 c3 07 	sts	0x07C3, r24
     a9c:	8e e4       	ldi	r24, 0x4E	; 78
     a9e:	97 e0       	ldi	r25, 0x07	; 7
     aa0:	90 93 ba 07 	sts	0x07BA, r25
     aa4:	80 93 b9 07 	sts	0x07B9, r24
     aa8:	87 e0       	ldi	r24, 0x07	; 7
     aaa:	80 93 06 01 	sts	0x0106, r24
     aae:	80 c0       	rjmp	.+256    	; 0xbb0 <Move_Tick+0x33a>
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	11 f5       	brne	.+68     	; 0xaf8 <Move_Tick+0x282>
     ab4:	c2 e5       	ldi	r28, 0x52	; 82
     ab6:	d7 e0       	ldi	r29, 0x07	; 7
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	44 eb       	ldi	r20, 0xB4	; 180
     abe:	52 e4       	ldi	r21, 0x42	; 66
     ac0:	6c 81       	ldd	r22, Y+4	; 0x04
     ac2:	7d 81       	ldd	r23, Y+5	; 0x05
     ac4:	8e 81       	ldd	r24, Y+6	; 0x06
     ac6:	9f 81       	ldd	r25, Y+7	; 0x07
     ac8:	17 d6       	rcall	.+3118   	; 0x16f8 <__addsf3>
     aca:	6c 83       	std	Y+4, r22	; 0x04
     acc:	7d 83       	std	Y+5, r23	; 0x05
     ace:	8e 83       	std	Y+6, r24	; 0x06
     ad0:	9f 83       	std	Y+7, r25	; 0x07
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	80 93 32 01 	sts	0x0132, r24
     ad8:	86 e5       	ldi	r24, 0x56	; 86
     ada:	97 e0       	ldi	r25, 0x07	; 7
     adc:	90 93 c4 07 	sts	0x07C4, r25
     ae0:	80 93 c3 07 	sts	0x07C3, r24
     ae4:	8e e4       	ldi	r24, 0x4E	; 78
     ae6:	97 e0       	ldi	r25, 0x07	; 7
     ae8:	90 93 ba 07 	sts	0x07BA, r25
     aec:	80 93 b9 07 	sts	0x07B9, r24
     af0:	87 e0       	ldi	r24, 0x07	; 7
     af2:	80 93 06 01 	sts	0x0106, r24
     af6:	5c c0       	rjmp	.+184    	; 0xbb0 <Move_Tick+0x33a>
     af8:	83 30       	cpi	r24, 0x03	; 3
     afa:	f9 f4       	brne	.+62     	; 0xb3a <Move_Tick+0x2c4>
     afc:	c2 e5       	ldi	r28, 0x52	; 82
     afe:	d7 e0       	ldi	r29, 0x07	; 7
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	44 eb       	ldi	r20, 0xB4	; 180
     b06:	52 e4       	ldi	r21, 0x42	; 66
     b08:	68 81       	ld	r22, Y
     b0a:	79 81       	ldd	r23, Y+1	; 0x01
     b0c:	8a 81       	ldd	r24, Y+2	; 0x02
     b0e:	9b 81       	ldd	r25, Y+3	; 0x03
     b10:	f2 d5       	rcall	.+3044   	; 0x16f6 <__subsf3>
     b12:	68 83       	st	Y, r22
     b14:	79 83       	std	Y+1, r23	; 0x01
     b16:	8a 83       	std	Y+2, r24	; 0x02
     b18:	9b 83       	std	Y+3, r25	; 0x03
     b1a:	10 92 31 01 	sts	0x0131, r1
     b1e:	d0 93 c4 07 	sts	0x07C4, r29
     b22:	c0 93 c3 07 	sts	0x07C3, r28
     b26:	8a e4       	ldi	r24, 0x4A	; 74
     b28:	97 e0       	ldi	r25, 0x07	; 7
     b2a:	90 93 ba 07 	sts	0x07BA, r25
     b2e:	80 93 b9 07 	sts	0x07B9, r24
     b32:	87 e0       	ldi	r24, 0x07	; 7
     b34:	80 93 06 01 	sts	0x0106, r24
     b38:	3b c0       	rjmp	.+118    	; 0xbb0 <Move_Tick+0x33a>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	c9 f5       	brne	.+114    	; 0xbb0 <Move_Tick+0x33a>
     b3e:	c2 e5       	ldi	r28, 0x52	; 82
     b40:	d7 e0       	ldi	r29, 0x07	; 7
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	44 eb       	ldi	r20, 0xB4	; 180
     b48:	52 e4       	ldi	r21, 0x42	; 66
     b4a:	68 81       	ld	r22, Y
     b4c:	79 81       	ldd	r23, Y+1	; 0x01
     b4e:	8a 81       	ldd	r24, Y+2	; 0x02
     b50:	9b 81       	ldd	r25, Y+3	; 0x03
     b52:	d2 d5       	rcall	.+2980   	; 0x16f8 <__addsf3>
     b54:	68 83       	st	Y, r22
     b56:	79 83       	std	Y+1, r23	; 0x01
     b58:	8a 83       	std	Y+2, r24	; 0x02
     b5a:	9b 83       	std	Y+3, r25	; 0x03
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 31 01 	sts	0x0131, r24
     b62:	d0 93 c4 07 	sts	0x07C4, r29
     b66:	c0 93 c3 07 	sts	0x07C3, r28
     b6a:	8a e4       	ldi	r24, 0x4A	; 74
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	90 93 ba 07 	sts	0x07BA, r25
     b72:	80 93 b9 07 	sts	0x07B9, r24
     b76:	87 e0       	ldi	r24, 0x07	; 7
     b78:	80 93 06 01 	sts	0x0106, r24
     b7c:	19 c0       	rjmp	.+50     	; 0xbb0 <Move_Tick+0x33a>
     b7e:	e0 91 c3 07 	lds	r30, 0x07C3
     b82:	f0 91 c4 07 	lds	r31, 0x07C4
     b86:	a0 91 b9 07 	lds	r26, 0x07B9
     b8a:	b0 91 ba 07 	lds	r27, 0x07BA
     b8e:	2d 91       	ld	r18, X+
     b90:	3d 91       	ld	r19, X+
     b92:	4d 91       	ld	r20, X+
     b94:	5c 91       	ld	r21, X
     b96:	60 81       	ld	r22, Z
     b98:	71 81       	ldd	r23, Z+1	; 0x01
     b9a:	82 81       	ldd	r24, Z+2	; 0x02
     b9c:	93 81       	ldd	r25, Z+3	; 0x03
     b9e:	10 d6       	rcall	.+3104   	; 0x17c0 <__cmpsf2>
     ba0:	81 11       	cpse	r24, r1
     ba2:	06 c0       	rjmp	.+12     	; 0xbb0 <Move_Tick+0x33a>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	80 93 c1 07 	sts	0x07C1, r24
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <Move_Tick+0x33a>
     bac:	10 92 c1 07 	sts	0x07C1, r1
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <Move_Task>:
     bb6:	10 92 c1 07 	sts	0x07C1, r1
     bba:	5d de       	rcall	.-838    	; 0x876 <Move_Tick>
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	d9 d4       	rcall	.+2482   	; 0x1574 <vTaskDelay>
     bc2:	fb cf       	rjmp	.-10     	; 0xbba <Move_Task+0x4>

00000bc4 <Joy_Tick>:
			break;
		case JPUSHED:
			break;
	}
	
	switch(joy_state) {
     bc4:	80 91 bf 07 	lds	r24, 0x07BF
     bc8:	81 30       	cpi	r24, 0x01	; 1
     bca:	41 f0       	breq	.+16     	; 0xbdc <Joy_Tick+0x18>
     bcc:	18 f0       	brcs	.+6      	; 0xbd4 <Joy_Tick+0x10>
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	b9 f1       	breq	.+110    	; 0xc40 <Joy_Tick+0x7c>
     bd2:	43 c0       	rjmp	.+134    	; 0xc5a <Joy_Tick+0x96>
		case JINIT:
			joy_state = JWAIT;
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	80 93 bf 07 	sts	0x07BF, r24
			break;
     bda:	08 95       	ret
		case JWAIT:
			joystickSample();
     bdc:	45 db       	rcall	.-2422   	; 0x268 <joystickSample>
			//PORTD = joyPos;
			if(joyPos == None) joy_state = JWAIT;
     bde:	80 91 c2 07 	lds	r24, 0x07C2
     be2:	81 11       	cpse	r24, r1
     be4:	04 c0       	rjmp	.+8      	; 0xbee <Joy_Tick+0x2a>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	80 93 bf 07 	sts	0x07BF, r24
     bec:	08 95       	ret
			else {
				if(joyPos == Right) { PORTD |= 0x00; QueueEnqueue(moves, R); } //target_angle[1] += 90, dir[1] = 1;
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	49 f4       	brne	.+18     	; 0xc04 <Joy_Tick+0x40>
     bf2:	8b b1       	in	r24, 0x0b	; 11
     bf4:	8b b9       	out	0x0b, r24	; 11
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	80 91 b5 07 	lds	r24, 0x07B5
     bfc:	90 91 b6 07 	lds	r25, 0x07B6
     c00:	45 dc       	rcall	.-1910   	; 0x48c <QueueEnqueue>
     c02:	1a c0       	rjmp	.+52     	; 0xc38 <Joy_Tick+0x74>
				else if(joyPos == Left) QueueEnqueue(moves, Rp); //target_angle[1] -= 90, dir[1] = 0;
     c04:	82 30       	cpi	r24, 0x02	; 2
     c06:	39 f4       	brne	.+14     	; 0xc16 <Joy_Tick+0x52>
     c08:	61 e0       	ldi	r22, 0x01	; 1
     c0a:	80 91 b5 07 	lds	r24, 0x07B5
     c0e:	90 91 b6 07 	lds	r25, 0x07B6
     c12:	3c dc       	rcall	.-1928   	; 0x48c <QueueEnqueue>
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <Joy_Tick+0x74>
				else if(joyPos == Down) QueueEnqueue(moves, L);
     c16:	84 30       	cpi	r24, 0x04	; 4
     c18:	39 f4       	brne	.+14     	; 0xc28 <Joy_Tick+0x64>
     c1a:	63 e0       	ldi	r22, 0x03	; 3
     c1c:	80 91 b5 07 	lds	r24, 0x07B5
     c20:	90 91 b6 07 	lds	r25, 0x07B6
     c24:	33 dc       	rcall	.-1946   	; 0x48c <QueueEnqueue>
     c26:	08 c0       	rjmp	.+16     	; 0xc38 <Joy_Tick+0x74>
				else if(joyPos == Up) QueueEnqueue(moves, Lp);
     c28:	83 30       	cpi	r24, 0x03	; 3
     c2a:	31 f4       	brne	.+12     	; 0xc38 <Joy_Tick+0x74>
     c2c:	64 e0       	ldi	r22, 0x04	; 4
     c2e:	80 91 b5 07 	lds	r24, 0x07B5
     c32:	90 91 b6 07 	lds	r25, 0x07B6
     c36:	2a dc       	rcall	.-1964   	; 0x48c <QueueEnqueue>
				joy_state = JPUSHED;
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	80 93 bf 07 	sts	0x07BF, r24
     c3e:	08 95       	ret
			}
			break;
		case JPUSHED:
			joystickSample();
     c40:	13 db       	rcall	.-2522   	; 0x268 <joystickSample>
			if(joyPos == None) joy_state = JWAIT;
     c42:	80 91 c2 07 	lds	r24, 0x07C2
     c46:	81 11       	cpse	r24, r1
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <Joy_Tick+0x8e>
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 bf 07 	sts	0x07BF, r24
     c50:	08 95       	ret
			else joy_state = JPUSHED;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	80 93 bf 07 	sts	0x07BF, r24
     c58:	08 95       	ret
			break;
			default:
			joy_state = JINIT;
     c5a:	10 92 bf 07 	sts	0x07BF, r1
     c5e:	08 95       	ret

00000c60 <Joy_Task>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     c60:	10 92 bf 07 	sts	0x07BF, r1
}

void Joy_Task() {
	Joy_Init();
	for(;;) {
		Joy_Tick();
     c64:	af df       	rcall	.-162    	; 0xbc4 <Joy_Tick>
		vTaskDelay(20);
     c66:	84 e1       	ldi	r24, 0x14	; 20
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	84 d4       	rcall	.+2312   	; 0x1574 <vTaskDelay>
	}
     c6c:	fb cf       	rjmp	.-10     	; 0xc64 <Joy_Task+0x4>

00000c6e <Receive_Init>:
}

enum ReveiveState {RINIT, RWAIT} receive_state;

void Receive_Init() {
	SPI_ServantInit();
     c6e:	3c dc       	rcall	.-1928   	; 0x4e8 <SPI_ServantInit>
	receive_state = RINIT;
     c70:	10 92 c0 07 	sts	0x07C0, r1
     c74:	08 95       	ret

00000c76 <Reveiced_Tick>:
}

void Reveiced_Tick() {
	switch(receive_state) {
     c76:	80 91 c0 07 	lds	r24, 0x07C0
     c7a:	81 30       	cpi	r24, 0x01	; 1
     c7c:	61 f4       	brne	.+24     	; 0xc96 <Reveiced_Tick+0x20>
		case RINIT:
			break;
		case RWAIT:
			if(~receivedData) {
     c7e:	60 91 37 01 	lds	r22, 0x0137
				if(receivedData < 12) { //Make sure it's a valid move
     c82:	6c 30       	cpi	r22, 0x0C	; 12
     c84:	28 f4       	brcc	.+10     	; 0xc90 <Reveiced_Tick+0x1a>
					QueueEnqueue(moves, receivedData);
     c86:	80 91 b5 07 	lds	r24, 0x07B5
     c8a:	90 91 b6 07 	lds	r25, 0x07B6
     c8e:	fe db       	rcall	.-2052   	; 0x48c <QueueEnqueue>
				}
				receivedData = 0xFF;
     c90:	8f ef       	ldi	r24, 0xFF	; 255
     c92:	80 93 37 01 	sts	0x0137, r24
			} 
			break;
	}
	
	switch(receive_state) {
     c96:	80 91 c0 07 	lds	r24, 0x07C0
     c9a:	88 23       	and	r24, r24
     c9c:	19 f0       	breq	.+6      	; 0xca4 <Reveiced_Tick+0x2e>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	29 f4       	brne	.+10     	; 0xcac <Reveiced_Tick+0x36>
     ca2:	08 95       	ret
		case RINIT:
			receive_state = RWAIT;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 c0 07 	sts	0x07C0, r24
			break;
     caa:	08 95       	ret
		case RWAIT:
			break;
		default:
			receive_state = RINIT;
     cac:	10 92 c0 07 	sts	0x07C0, r1
     cb0:	08 95       	ret

00000cb2 <Receive_Task>:
			break;
	}
}

void Receive_Task() {
	Receive_Init();
     cb2:	dd df       	rcall	.-70     	; 0xc6e <Receive_Init>
	for(;;) {
		Reveiced_Tick();
     cb4:	e0 df       	rcall	.-64     	; 0xc76 <Reveiced_Tick>
		vTaskDelay(10);
     cb6:	8a e0       	ldi	r24, 0x0A	; 10
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	5c d4       	rcall	.+2232   	; 0x1574 <vTaskDelay>
	}
     cbc:	fb cf       	rjmp	.-10     	; 0xcb4 <Receive_Task+0x2>

00000cbe <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	cf 93       	push	r28
	xTaskCreate(Motor_Task, (signed portCHAR *)"Motorer", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     cce:	a1 2c       	mov	r10, r1
     cd0:	b1 2c       	mov	r11, r1
     cd2:	c1 2c       	mov	r12, r1
     cd4:	d1 2c       	mov	r13, r1
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	08 2f       	mov	r16, r24
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	45 e5       	ldi	r20, 0x55	; 85
     ce2:	50 e0       	ldi	r21, 0x00	; 0
     ce4:	6a e3       	ldi	r22, 0x3A	; 58
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	84 e3       	ldi	r24, 0x34	; 52
     cea:	94 e0       	ldi	r25, 0x04	; 4
     cec:	cf d1       	rcall	.+926    	; 0x108c <xTaskGenericCreate>
	xTaskCreate(Move_Task, (signed portCHAR *)"Mover", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	45 e5       	ldi	r20, 0x55	; 85
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	62 e4       	ldi	r22, 0x42	; 66
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	8b ed       	ldi	r24, 0xDB	; 219
     cfc:	95 e0       	ldi	r25, 0x05	; 5
     cfe:	c6 d1       	rcall	.+908    	; 0x108c <xTaskGenericCreate>
	xTaskCreate(Shift_Task, (signed portCHAR *)"Shifter", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	45 e5       	ldi	r20, 0x55	; 85
     d06:	50 e0       	ldi	r21, 0x00	; 0
     d08:	68 e4       	ldi	r22, 0x48	; 72
     d0a:	71 e0       	ldi	r23, 0x01	; 1
     d0c:	85 ec       	ldi	r24, 0xC5	; 197
     d0e:	92 e0       	ldi	r25, 0x02	; 2
     d10:	bd d1       	rcall	.+890    	; 0x108c <xTaskGenericCreate>
	xTaskCreate(Joy_Task, (signed portCHAR *)"JoySticker", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	45 e5       	ldi	r20, 0x55	; 85
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e5       	ldi	r22, 0x50	; 80
     d1c:	71 e0       	ldi	r23, 0x01	; 1
     d1e:	80 e3       	ldi	r24, 0x30	; 48
     d20:	96 e0       	ldi	r25, 0x06	; 6
     d22:	b4 d1       	rcall	.+872    	; 0x108c <xTaskGenericCreate>
	xTaskCreate(Receive_Task, (signed portCHAR *)"Receiver", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	45 e5       	ldi	r20, 0x55	; 85
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	6b e5       	ldi	r22, 0x5B	; 91
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	89 e5       	ldi	r24, 0x59	; 89
     d32:	96 e0       	ldi	r25, 0x06	; 6
     d34:	ab d1       	rcall	.+854    	; 0x108c <xTaskGenericCreate>
}
     d36:	cf 91       	pop	r28
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	08 95       	ret

00000d48 <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
     d48:	11 b8       	out	0x01, r1	; 1
     d4a:	8f ef       	ldi	r24, 0xFF	; 255
     d4c:	82 b9       	out	0x02, r24	; 2
	//DDRB = 0xFF; PORTB = 0x00;
	DDRC = 0xFF; PORTC = 0x00;
     d4e:	87 b9       	out	0x07, r24	; 7
     d50:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
     d52:	8a b9       	out	0x0a, r24	; 10
     d54:	1b b8       	out	0x0b, r1	; 11
	
	
	moves = QueueInit(30);
     d56:	8e e1       	ldi	r24, 0x1E	; 30
     d58:	81 db       	rcall	.-2302   	; 0x45c <QueueInit>
     d5a:	90 93 b6 07 	sts	0x07B6, r25
     d5e:	80 93 b5 07 	sts	0x07B5, r24
	
	joystickInit();
     d62:	74 da       	rcall	.-2840   	; 0x24c <joystickInit>
	StartSecPulse(1);
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	ab df       	rcall	.-170    	; 0xcbe <StartSecPulse>
	vTaskStartScheduler();
     d68:	8e d2       	rcall	.+1308   	; 0x1286 <vTaskStartScheduler>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	08 95       	ret

00000d70 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     d70:	31 e1       	ldi	r19, 0x11	; 17
     d72:	fc 01       	movw	r30, r24
     d74:	30 83       	st	Z, r19
     d76:	31 97       	sbiw	r30, 0x01	; 1
     d78:	22 e2       	ldi	r18, 0x22	; 34
     d7a:	20 83       	st	Z, r18
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	a3 e3       	ldi	r26, 0x33	; 51
     d80:	a0 83       	st	Z, r26
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	60 83       	st	Z, r22
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	70 83       	st	Z, r23
     d8a:	31 97       	sbiw	r30, 0x01	; 1
     d8c:	10 82       	st	Z, r1
     d8e:	31 97       	sbiw	r30, 0x01	; 1
     d90:	60 e8       	ldi	r22, 0x80	; 128
     d92:	60 83       	st	Z, r22
     d94:	31 97       	sbiw	r30, 0x01	; 1
     d96:	10 82       	st	Z, r1
     d98:	31 97       	sbiw	r30, 0x01	; 1
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	60 83       	st	Z, r22
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	63 e0       	ldi	r22, 0x03	; 3
     da2:	60 83       	st	Z, r22
     da4:	31 97       	sbiw	r30, 0x01	; 1
     da6:	64 e0       	ldi	r22, 0x04	; 4
     da8:	60 83       	st	Z, r22
     daa:	31 97       	sbiw	r30, 0x01	; 1
     dac:	65 e0       	ldi	r22, 0x05	; 5
     dae:	60 83       	st	Z, r22
     db0:	31 97       	sbiw	r30, 0x01	; 1
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	60 83       	st	Z, r22
     db6:	31 97       	sbiw	r30, 0x01	; 1
     db8:	67 e0       	ldi	r22, 0x07	; 7
     dba:	60 83       	st	Z, r22
     dbc:	31 97       	sbiw	r30, 0x01	; 1
     dbe:	68 e0       	ldi	r22, 0x08	; 8
     dc0:	60 83       	st	Z, r22
     dc2:	31 97       	sbiw	r30, 0x01	; 1
     dc4:	69 e0       	ldi	r22, 0x09	; 9
     dc6:	60 83       	st	Z, r22
     dc8:	31 97       	sbiw	r30, 0x01	; 1
     dca:	60 e1       	ldi	r22, 0x10	; 16
     dcc:	60 83       	st	Z, r22
     dce:	31 97       	sbiw	r30, 0x01	; 1
     dd0:	30 83       	st	Z, r19
     dd2:	31 97       	sbiw	r30, 0x01	; 1
     dd4:	32 e1       	ldi	r19, 0x12	; 18
     dd6:	30 83       	st	Z, r19
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	33 e1       	ldi	r19, 0x13	; 19
     ddc:	30 83       	st	Z, r19
     dde:	31 97       	sbiw	r30, 0x01	; 1
     de0:	34 e1       	ldi	r19, 0x14	; 20
     de2:	30 83       	st	Z, r19
     de4:	31 97       	sbiw	r30, 0x01	; 1
     de6:	35 e1       	ldi	r19, 0x15	; 21
     de8:	30 83       	st	Z, r19
     dea:	31 97       	sbiw	r30, 0x01	; 1
     dec:	36 e1       	ldi	r19, 0x16	; 22
     dee:	30 83       	st	Z, r19
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	37 e1       	ldi	r19, 0x17	; 23
     df4:	30 83       	st	Z, r19
     df6:	31 97       	sbiw	r30, 0x01	; 1
     df8:	38 e1       	ldi	r19, 0x18	; 24
     dfa:	30 83       	st	Z, r19
     dfc:	31 97       	sbiw	r30, 0x01	; 1
     dfe:	39 e1       	ldi	r19, 0x19	; 25
     e00:	30 83       	st	Z, r19
     e02:	31 97       	sbiw	r30, 0x01	; 1
     e04:	30 e2       	ldi	r19, 0x20	; 32
     e06:	30 83       	st	Z, r19
     e08:	31 97       	sbiw	r30, 0x01	; 1
     e0a:	31 e2       	ldi	r19, 0x21	; 33
     e0c:	30 83       	st	Z, r19
     e0e:	31 97       	sbiw	r30, 0x01	; 1
     e10:	20 83       	st	Z, r18
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	23 e2       	ldi	r18, 0x23	; 35
     e16:	20 83       	st	Z, r18
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	40 83       	st	Z, r20
     e1c:	31 97       	sbiw	r30, 0x01	; 1
     e1e:	50 83       	st	Z, r21
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	26 e2       	ldi	r18, 0x26	; 38
     e24:	20 83       	st	Z, r18
     e26:	31 97       	sbiw	r30, 0x01	; 1
     e28:	27 e2       	ldi	r18, 0x27	; 39
     e2a:	20 83       	st	Z, r18
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	28 e2       	ldi	r18, 0x28	; 40
     e30:	20 83       	st	Z, r18
     e32:	31 97       	sbiw	r30, 0x01	; 1
     e34:	29 e2       	ldi	r18, 0x29	; 41
     e36:	20 83       	st	Z, r18
     e38:	31 97       	sbiw	r30, 0x01	; 1
     e3a:	20 e3       	ldi	r18, 0x30	; 48
     e3c:	20 83       	st	Z, r18
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	21 e3       	ldi	r18, 0x31	; 49
     e42:	20 83       	st	Z, r18
     e44:	86 97       	sbiw	r24, 0x26	; 38
     e46:	08 95       	ret

00000e48 <xPortStartScheduler>:
     e48:	10 92 89 00 	sts	0x0089, r1
     e4c:	8c e7       	ldi	r24, 0x7C	; 124
     e4e:	80 93 88 00 	sts	0x0088, r24
     e52:	8b e0       	ldi	r24, 0x0B	; 11
     e54:	80 93 81 00 	sts	0x0081, r24
     e58:	ef e6       	ldi	r30, 0x6F	; 111
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	82 60       	ori	r24, 0x02	; 2
     e60:	80 83       	st	Z, r24
     e62:	a0 91 b3 07 	lds	r26, 0x07B3
     e66:	b0 91 b4 07 	lds	r27, 0x07B4
     e6a:	cd 91       	ld	r28, X+
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	dd 91       	ld	r29, X+
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	7f 90       	pop	r7
     ea4:	6f 90       	pop	r6
     ea6:	5f 90       	pop	r5
     ea8:	4f 90       	pop	r4
     eaa:	3f 90       	pop	r3
     eac:	2f 90       	pop	r2
     eae:	1f 90       	pop	r1
     eb0:	0f 90       	pop	r0
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	0f 90       	pop	r0
     eb6:	08 95       	ret
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	08 95       	ret

00000ebc <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ebc:	0f 92       	push	r0
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	0f 92       	push	r0
     ec4:	1f 92       	push	r1
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 92       	push	r2
     eca:	3f 92       	push	r3
     ecc:	4f 92       	push	r4
     ece:	5f 92       	push	r5
     ed0:	6f 92       	push	r6
     ed2:	7f 92       	push	r7
     ed4:	8f 92       	push	r8
     ed6:	9f 92       	push	r9
     ed8:	af 92       	push	r10
     eda:	bf 92       	push	r11
     edc:	cf 92       	push	r12
     ede:	df 92       	push	r13
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	2f 93       	push	r18
     eea:	3f 93       	push	r19
     eec:	4f 93       	push	r20
     eee:	5f 93       	push	r21
     ef0:	6f 93       	push	r22
     ef2:	7f 93       	push	r23
     ef4:	8f 93       	push	r24
     ef6:	9f 93       	push	r25
     ef8:	af 93       	push	r26
     efa:	bf 93       	push	r27
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	ef 93       	push	r30
     f02:	ff 93       	push	r31
     f04:	a0 91 b3 07 	lds	r26, 0x07B3
     f08:	b0 91 b4 07 	lds	r27, 0x07B4
     f0c:	0d b6       	in	r0, 0x3d	; 61
     f0e:	0d 92       	st	X+, r0
     f10:	0e b6       	in	r0, 0x3e	; 62
     f12:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     f14:	84 d3       	rcall	.+1800   	; 0x161e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     f16:	a0 91 b3 07 	lds	r26, 0x07B3
     f1a:	b0 91 b4 07 	lds	r27, 0x07B4
     f1e:	cd 91       	ld	r28, X+
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	dd 91       	ld	r29, X+
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	7f 90       	pop	r7
     f58:	6f 90       	pop	r6
     f5a:	5f 90       	pop	r5
     f5c:	4f 90       	pop	r4
     f5e:	3f 90       	pop	r3
     f60:	2f 90       	pop	r2
     f62:	1f 90       	pop	r1
     f64:	0f 90       	pop	r0
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f6a:	08 95       	ret

00000f6c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     f6c:	0f 92       	push	r0
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	0f 92       	push	r0
     f74:	1f 92       	push	r1
     f76:	11 24       	eor	r1, r1
     f78:	2f 92       	push	r2
     f7a:	3f 92       	push	r3
     f7c:	4f 92       	push	r4
     f7e:	5f 92       	push	r5
     f80:	6f 92       	push	r6
     f82:	7f 92       	push	r7
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	2f 93       	push	r18
     f9a:	3f 93       	push	r19
     f9c:	4f 93       	push	r20
     f9e:	5f 93       	push	r21
     fa0:	6f 93       	push	r22
     fa2:	7f 93       	push	r23
     fa4:	8f 93       	push	r24
     fa6:	9f 93       	push	r25
     fa8:	af 93       	push	r26
     faa:	bf 93       	push	r27
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	a0 91 b3 07 	lds	r26, 0x07B3
     fb8:	b0 91 b4 07 	lds	r27, 0x07B4
     fbc:	0d b6       	in	r0, 0x3d	; 61
     fbe:	0d 92       	st	X+, r0
     fc0:	0e b6       	in	r0, 0x3e	; 62
     fc2:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     fc4:	8f d1       	rcall	.+798    	; 0x12e4 <vTaskIncrementTick>
	vTaskSwitchContext();
     fc6:	2b d3       	rcall	.+1622   	; 0x161e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fc8:	a0 91 b3 07 	lds	r26, 0x07B3
     fcc:	b0 91 b4 07 	lds	r27, 0x07B4
     fd0:	cd 91       	ld	r28, X+
     fd2:	cd bf       	out	0x3d, r28	; 61
     fd4:	dd 91       	ld	r29, X+
     fd6:	de bf       	out	0x3e, r29	; 62
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	7f 90       	pop	r7
    100a:	6f 90       	pop	r6
    100c:	5f 90       	pop	r5
    100e:	4f 90       	pop	r4
    1010:	3f 90       	pop	r3
    1012:	2f 90       	pop	r2
    1014:	1f 90       	pop	r1
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    101c:	08 95       	ret

0000101e <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    101e:	a6 df       	rcall	.-180    	; 0xf6c <vPortYieldFromTick>
		asm volatile ( "reti" );
    1020:	18 95       	reti

00001022 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
    1028:	e0 91 b3 07 	lds	r30, 0x07B3
    102c:	f0 91 b4 07 	lds	r31, 0x07B4
    1030:	93 83       	std	Z+3, r25	; 0x03
    1032:	82 83       	std	Z+2, r24	; 0x02
    1034:	80 91 63 07 	lds	r24, 0x0763
    1038:	90 91 64 07 	lds	r25, 0x0764
    103c:	c8 17       	cp	r28, r24
    103e:	d9 07       	cpc	r29, r25
    1040:	60 f4       	brcc	.+24     	; 0x105a <prvAddCurrentTaskToDelayedList+0x38>
    1042:	60 91 b3 07 	lds	r22, 0x07B3
    1046:	70 91 b4 07 	lds	r23, 0x07B4
    104a:	80 91 79 07 	lds	r24, 0x0779
    104e:	90 91 7a 07 	lds	r25, 0x077A
    1052:	6e 5f       	subi	r22, 0xFE	; 254
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	99 d8       	rcall	.-3790   	; 0x18a <vListInsert>
    1058:	16 c0       	rjmp	.+44     	; 0x1086 <prvAddCurrentTaskToDelayedList+0x64>
    105a:	60 91 b3 07 	lds	r22, 0x07B3
    105e:	70 91 b4 07 	lds	r23, 0x07B4
    1062:	80 91 7b 07 	lds	r24, 0x077B
    1066:	90 91 7c 07 	lds	r25, 0x077C
    106a:	6e 5f       	subi	r22, 0xFE	; 254
    106c:	7f 4f       	sbci	r23, 0xFF	; 255
    106e:	8d d8       	rcall	.-3814   	; 0x18a <vListInsert>
    1070:	80 91 38 01 	lds	r24, 0x0138
    1074:	90 91 39 01 	lds	r25, 0x0139
    1078:	c8 17       	cp	r28, r24
    107a:	d9 07       	cpc	r29, r25
    107c:	20 f4       	brcc	.+8      	; 0x1086 <prvAddCurrentTaskToDelayedList+0x64>
    107e:	d0 93 39 01 	sts	0x0139, r29
    1082:	c0 93 38 01 	sts	0x0138, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	08 95       	ret

0000108c <xTaskGenericCreate>:
    108c:	4f 92       	push	r4
    108e:	5f 92       	push	r5
    1090:	6f 92       	push	r6
    1092:	7f 92       	push	r7
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	5c 01       	movw	r10, r24
    10ae:	4b 01       	movw	r8, r22
    10b0:	3a 01       	movw	r6, r20
    10b2:	29 01       	movw	r4, r18
    10b4:	81 e2       	ldi	r24, 0x21	; 33
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	08 d8       	rcall	.-4080   	; 0xca <pvPortMalloc>
    10ba:	ec 01       	movw	r28, r24
    10bc:	89 2b       	or	r24, r25
    10be:	09 f4       	brne	.+2      	; 0x10c2 <xTaskGenericCreate+0x36>
    10c0:	d0 c0       	rjmp	.+416    	; 0x1262 <xTaskGenericCreate+0x1d6>
    10c2:	c1 14       	cp	r12, r1
    10c4:	d1 04       	cpc	r13, r1
    10c6:	09 f0       	breq	.+2      	; 0x10ca <xTaskGenericCreate+0x3e>
    10c8:	c8 c0       	rjmp	.+400    	; 0x125a <xTaskGenericCreate+0x1ce>
    10ca:	c3 01       	movw	r24, r6
    10cc:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    10d0:	98 8f       	std	Y+24, r25	; 0x18
    10d2:	8f 8b       	std	Y+23, r24	; 0x17
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	19 f4       	brne	.+6      	; 0x10de <xTaskGenericCreate+0x52>
    10d8:	ce 01       	movw	r24, r28
    10da:	1d d8       	rcall	.-4038   	; 0x116 <vPortFree>
    10dc:	c2 c0       	rjmp	.+388    	; 0x1262 <xTaskGenericCreate+0x1d6>
    10de:	a3 01       	movw	r20, r6
    10e0:	65 ea       	ldi	r22, 0xA5	; 165
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	e4 d5       	rcall	.+3016   	; 0x1cae <memset>
    10e6:	93 01       	movw	r18, r6
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	31 09       	sbc	r19, r1
    10ec:	8f 89       	ldd	r24, Y+23	; 0x17
    10ee:	98 8d       	ldd	r25, Y+24	; 0x18
    10f0:	3c 01       	movw	r6, r24
    10f2:	62 0e       	add	r6, r18
    10f4:	73 1e       	adc	r7, r19
    10f6:	48 e0       	ldi	r20, 0x08	; 8
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	b4 01       	movw	r22, r8
    10fc:	ce 01       	movw	r24, r28
    10fe:	49 96       	adiw	r24, 0x19	; 25
    1100:	dd d5       	rcall	.+3002   	; 0x1cbc <strncpy>
    1102:	18 a2       	std	Y+32, r1	; 0x20
    1104:	10 2f       	mov	r17, r16
    1106:	04 30       	cpi	r16, 0x04	; 4
    1108:	08 f0       	brcs	.+2      	; 0x110c <xTaskGenericCreate+0x80>
    110a:	13 e0       	ldi	r17, 0x03	; 3
    110c:	1e 8b       	std	Y+22, r17	; 0x16
    110e:	6e 01       	movw	r12, r28
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	c8 0e       	add	r12, r24
    1114:	d1 1c       	adc	r13, r1
    1116:	c6 01       	movw	r24, r12
    1118:	0d d8       	rcall	.-4070   	; 0x134 <vListInitialiseItem>
    111a:	ce 01       	movw	r24, r28
    111c:	0c 96       	adiw	r24, 0x0c	; 12
    111e:	0a d8       	rcall	.-4076   	; 0x134 <vListInitialiseItem>
    1120:	d9 87       	std	Y+9, r29	; 0x09
    1122:	c8 87       	std	Y+8, r28	; 0x08
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	81 1b       	sub	r24, r17
    112a:	91 09       	sbc	r25, r1
    112c:	9d 87       	std	Y+13, r25	; 0x0d
    112e:	8c 87       	std	Y+12, r24	; 0x0c
    1130:	db 8b       	std	Y+19, r29	; 0x13
    1132:	ca 8b       	std	Y+18, r28	; 0x12
    1134:	a2 01       	movw	r20, r4
    1136:	b5 01       	movw	r22, r10
    1138:	c3 01       	movw	r24, r6
    113a:	1a de       	rcall	.-972    	; 0xd70 <pxPortInitialiseStack>
    113c:	99 83       	std	Y+1, r25	; 0x01
    113e:	88 83       	st	Y, r24
    1140:	e1 14       	cp	r14, r1
    1142:	f1 04       	cpc	r15, r1
    1144:	19 f0       	breq	.+6      	; 0x114c <xTaskGenericCreate+0xc0>
    1146:	f7 01       	movw	r30, r14
    1148:	d1 83       	std	Z+1, r29	; 0x01
    114a:	c0 83       	st	Z, r28
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	0f 92       	push	r0
    1152:	80 91 65 07 	lds	r24, 0x0765
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	80 93 65 07 	sts	0x0765, r24
    115c:	80 91 b3 07 	lds	r24, 0x07B3
    1160:	90 91 b4 07 	lds	r25, 0x07B4
    1164:	89 2b       	or	r24, r25
    1166:	a9 f5       	brne	.+106    	; 0x11d2 <xTaskGenericCreate+0x146>
    1168:	d0 93 b4 07 	sts	0x07B4, r29
    116c:	c0 93 b3 07 	sts	0x07B3, r28
    1170:	80 91 65 07 	lds	r24, 0x0765
    1174:	81 30       	cpi	r24, 0x01	; 1
    1176:	e1 f5       	brne	.+120    	; 0x11f0 <xTaskGenericCreate+0x164>
    1178:	8f e8       	ldi	r24, 0x8F	; 143
    117a:	97 e0       	ldi	r25, 0x07	; 7
    117c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1180:	88 e9       	ldi	r24, 0x98	; 152
    1182:	97 e0       	ldi	r25, 0x07	; 7
    1184:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1188:	81 ea       	ldi	r24, 0xA1	; 161
    118a:	97 e0       	ldi	r25, 0x07	; 7
    118c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1190:	8a ea       	ldi	r24, 0xAA	; 170
    1192:	97 e0       	ldi	r25, 0x07	; 7
    1194:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    1198:	86 e8       	ldi	r24, 0x86	; 134
    119a:	97 e0       	ldi	r25, 0x07	; 7
    119c:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    11a0:	8d e7       	ldi	r24, 0x7D	; 125
    11a2:	97 e0       	ldi	r25, 0x07	; 7
    11a4:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    11a8:	80 e7       	ldi	r24, 0x70	; 112
    11aa:	97 e0       	ldi	r25, 0x07	; 7
    11ac:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    11b0:	87 e6       	ldi	r24, 0x67	; 103
    11b2:	97 e0       	ldi	r25, 0x07	; 7
    11b4:	0e 94 8c 00 	call	0x118	; 0x118 <vListInitialise>
    11b8:	86 e8       	ldi	r24, 0x86	; 134
    11ba:	97 e0       	ldi	r25, 0x07	; 7
    11bc:	90 93 7c 07 	sts	0x077C, r25
    11c0:	80 93 7b 07 	sts	0x077B, r24
    11c4:	8d e7       	ldi	r24, 0x7D	; 125
    11c6:	97 e0       	ldi	r25, 0x07	; 7
    11c8:	90 93 7a 07 	sts	0x077A, r25
    11cc:	80 93 79 07 	sts	0x0779, r24
    11d0:	0f c0       	rjmp	.+30     	; 0x11f0 <xTaskGenericCreate+0x164>
    11d2:	80 91 60 07 	lds	r24, 0x0760
    11d6:	81 11       	cpse	r24, r1
    11d8:	0b c0       	rjmp	.+22     	; 0x11f0 <xTaskGenericCreate+0x164>
    11da:	e0 91 b3 07 	lds	r30, 0x07B3
    11de:	f0 91 b4 07 	lds	r31, 0x07B4
    11e2:	86 89       	ldd	r24, Z+22	; 0x16
    11e4:	08 17       	cp	r16, r24
    11e6:	20 f0       	brcs	.+8      	; 0x11f0 <xTaskGenericCreate+0x164>
    11e8:	d0 93 b4 07 	sts	0x07B4, r29
    11ec:	c0 93 b3 07 	sts	0x07B3, r28
    11f0:	8e 89       	ldd	r24, Y+22	; 0x16
    11f2:	90 91 62 07 	lds	r25, 0x0762
    11f6:	98 17       	cp	r25, r24
    11f8:	10 f4       	brcc	.+4      	; 0x11fe <xTaskGenericCreate+0x172>
    11fa:	80 93 62 07 	sts	0x0762, r24
    11fe:	90 91 5b 07 	lds	r25, 0x075B
    1202:	9f 5f       	subi	r25, 0xFF	; 255
    1204:	90 93 5b 07 	sts	0x075B, r25
    1208:	90 91 61 07 	lds	r25, 0x0761
    120c:	98 17       	cp	r25, r24
    120e:	10 f4       	brcc	.+4      	; 0x1214 <xTaskGenericCreate+0x188>
    1210:	80 93 61 07 	sts	0x0761, r24
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c 01       	movw	r18, r24
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	22 0f       	add	r18, r18
    1222:	33 1f       	adc	r19, r19
    1224:	82 0f       	add	r24, r18
    1226:	93 1f       	adc	r25, r19
    1228:	b6 01       	movw	r22, r12
    122a:	81 57       	subi	r24, 0x71	; 113
    122c:	98 4f       	sbci	r25, 0xF8	; 248
    122e:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	80 91 60 07 	lds	r24, 0x0760
    123a:	88 23       	and	r24, r24
    123c:	51 f0       	breq	.+20     	; 0x1252 <xTaskGenericCreate+0x1c6>
    123e:	e0 91 b3 07 	lds	r30, 0x07B3
    1242:	f0 91 b4 07 	lds	r31, 0x07B4
    1246:	86 89       	ldd	r24, Z+22	; 0x16
    1248:	80 17       	cp	r24, r16
    124a:	28 f4       	brcc	.+10     	; 0x1256 <xTaskGenericCreate+0x1ca>
    124c:	37 de       	rcall	.-914    	; 0xebc <vPortYield>
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	09 c0       	rjmp	.+18     	; 0x1264 <xTaskGenericCreate+0x1d8>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <xTaskGenericCreate+0x1d8>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	05 c0       	rjmp	.+10     	; 0x1264 <xTaskGenericCreate+0x1d8>
    125a:	d8 8e       	std	Y+24, r13	; 0x18
    125c:	cf 8a       	std	Y+23, r12	; 0x17
    125e:	c6 01       	movw	r24, r12
    1260:	3e cf       	rjmp	.-388    	; 0x10de <xTaskGenericCreate+0x52>
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	9f 90       	pop	r9
    127a:	8f 90       	pop	r8
    127c:	7f 90       	pop	r7
    127e:	6f 90       	pop	r6
    1280:	5f 90       	pop	r5
    1282:	4f 90       	pop	r4
    1284:	08 95       	ret

00001286 <vTaskStartScheduler>:
    1286:	af 92       	push	r10
    1288:	bf 92       	push	r11
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	ff 92       	push	r15
    1292:	0f 93       	push	r16
    1294:	a1 2c       	mov	r10, r1
    1296:	b1 2c       	mov	r11, r1
    1298:	c1 2c       	mov	r12, r1
    129a:	d1 2c       	mov	r13, r1
    129c:	e1 2c       	mov	r14, r1
    129e:	f1 2c       	mov	r15, r1
    12a0:	00 e0       	ldi	r16, 0x00	; 0
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	45 e5       	ldi	r20, 0x55	; 85
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	64 e6       	ldi	r22, 0x64	; 100
    12ac:	71 e0       	ldi	r23, 0x01	; 1
    12ae:	86 ed       	ldi	r24, 0xD6	; 214
    12b0:	9a e0       	ldi	r25, 0x0A	; 10
    12b2:	ec de       	rcall	.-552    	; 0x108c <xTaskGenericCreate>
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <vTaskStartScheduler+0x42>
    12b8:	f8 94       	cli
    12ba:	80 93 60 07 	sts	0x0760, r24
    12be:	10 92 64 07 	sts	0x0764, r1
    12c2:	10 92 63 07 	sts	0x0763, r1
    12c6:	c0 dd       	rcall	.-1152   	; 0xe48 <xPortStartScheduler>
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	08 95       	ret

000012d8 <vTaskSuspendAll>:
    12d8:	80 91 5f 07 	lds	r24, 0x075F
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	80 93 5f 07 	sts	0x075F, r24
    12e2:	08 95       	ret

000012e4 <vTaskIncrementTick>:
    12e4:	0f 93       	push	r16
    12e6:	1f 93       	push	r17
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	80 91 5f 07 	lds	r24, 0x075F
    12f0:	81 11       	cpse	r24, r1
    12f2:	b2 c0       	rjmp	.+356    	; 0x1458 <vTaskIncrementTick+0x174>
    12f4:	80 91 63 07 	lds	r24, 0x0763
    12f8:	90 91 64 07 	lds	r25, 0x0764
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 64 07 	sts	0x0764, r25
    1302:	80 93 63 07 	sts	0x0763, r24
    1306:	80 91 63 07 	lds	r24, 0x0763
    130a:	90 91 64 07 	lds	r25, 0x0764
    130e:	89 2b       	or	r24, r25
    1310:	99 f5       	brne	.+102    	; 0x1378 <vTaskIncrementTick+0x94>
    1312:	80 91 7b 07 	lds	r24, 0x077B
    1316:	90 91 7c 07 	lds	r25, 0x077C
    131a:	20 91 79 07 	lds	r18, 0x0779
    131e:	30 91 7a 07 	lds	r19, 0x077A
    1322:	30 93 7c 07 	sts	0x077C, r19
    1326:	20 93 7b 07 	sts	0x077B, r18
    132a:	90 93 7a 07 	sts	0x077A, r25
    132e:	80 93 79 07 	sts	0x0779, r24
    1332:	80 91 5c 07 	lds	r24, 0x075C
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 5c 07 	sts	0x075C, r24
    133c:	e0 91 7b 07 	lds	r30, 0x077B
    1340:	f0 91 7c 07 	lds	r31, 0x077C
    1344:	80 81       	ld	r24, Z
    1346:	81 11       	cpse	r24, r1
    1348:	07 c0       	rjmp	.+14     	; 0x1358 <vTaskIncrementTick+0x74>
    134a:	8f ef       	ldi	r24, 0xFF	; 255
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	90 93 39 01 	sts	0x0139, r25
    1352:	80 93 38 01 	sts	0x0138, r24
    1356:	10 c0       	rjmp	.+32     	; 0x1378 <vTaskIncrementTick+0x94>
    1358:	e0 91 7b 07 	lds	r30, 0x077B
    135c:	f0 91 7c 07 	lds	r31, 0x077C
    1360:	05 80       	ldd	r0, Z+5	; 0x05
    1362:	f6 81       	ldd	r31, Z+6	; 0x06
    1364:	e0 2d       	mov	r30, r0
    1366:	06 80       	ldd	r0, Z+6	; 0x06
    1368:	f7 81       	ldd	r31, Z+7	; 0x07
    136a:	e0 2d       	mov	r30, r0
    136c:	82 81       	ldd	r24, Z+2	; 0x02
    136e:	93 81       	ldd	r25, Z+3	; 0x03
    1370:	90 93 39 01 	sts	0x0139, r25
    1374:	80 93 38 01 	sts	0x0138, r24
    1378:	20 91 63 07 	lds	r18, 0x0763
    137c:	30 91 64 07 	lds	r19, 0x0764
    1380:	80 91 38 01 	lds	r24, 0x0138
    1384:	90 91 39 01 	lds	r25, 0x0139
    1388:	28 17       	cp	r18, r24
    138a:	39 07       	cpc	r19, r25
    138c:	08 f4       	brcc	.+2      	; 0x1390 <vTaskIncrementTick+0xac>
    138e:	69 c0       	rjmp	.+210    	; 0x1462 <vTaskIncrementTick+0x17e>
    1390:	e0 91 7b 07 	lds	r30, 0x077B
    1394:	f0 91 7c 07 	lds	r31, 0x077C
    1398:	80 81       	ld	r24, Z
    139a:	88 23       	and	r24, r24
    139c:	99 f0       	breq	.+38     	; 0x13c4 <vTaskIncrementTick+0xe0>
    139e:	e0 91 7b 07 	lds	r30, 0x077B
    13a2:	f0 91 7c 07 	lds	r31, 0x077C
    13a6:	05 80       	ldd	r0, Z+5	; 0x05
    13a8:	f6 81       	ldd	r31, Z+6	; 0x06
    13aa:	e0 2d       	mov	r30, r0
    13ac:	c6 81       	ldd	r28, Z+6	; 0x06
    13ae:	d7 81       	ldd	r29, Z+7	; 0x07
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	9b 81       	ldd	r25, Y+3	; 0x03
    13b4:	20 91 63 07 	lds	r18, 0x0763
    13b8:	30 91 64 07 	lds	r19, 0x0764
    13bc:	28 17       	cp	r18, r24
    13be:	39 07       	cpc	r19, r25
    13c0:	f8 f4       	brcc	.+62     	; 0x1400 <vTaskIncrementTick+0x11c>
    13c2:	19 c0       	rjmp	.+50     	; 0x13f6 <vTaskIncrementTick+0x112>
    13c4:	8f ef       	ldi	r24, 0xFF	; 255
    13c6:	9f ef       	ldi	r25, 0xFF	; 255
    13c8:	90 93 39 01 	sts	0x0139, r25
    13cc:	80 93 38 01 	sts	0x0138, r24
    13d0:	48 c0       	rjmp	.+144    	; 0x1462 <vTaskIncrementTick+0x17e>
    13d2:	e0 91 7b 07 	lds	r30, 0x077B
    13d6:	f0 91 7c 07 	lds	r31, 0x077C
    13da:	05 80       	ldd	r0, Z+5	; 0x05
    13dc:	f6 81       	ldd	r31, Z+6	; 0x06
    13de:	e0 2d       	mov	r30, r0
    13e0:	c6 81       	ldd	r28, Z+6	; 0x06
    13e2:	d7 81       	ldd	r29, Z+7	; 0x07
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	20 91 63 07 	lds	r18, 0x0763
    13ec:	30 91 64 07 	lds	r19, 0x0764
    13f0:	28 17       	cp	r18, r24
    13f2:	39 07       	cpc	r19, r25
    13f4:	28 f4       	brcc	.+10     	; 0x1400 <vTaskIncrementTick+0x11c>
    13f6:	90 93 39 01 	sts	0x0139, r25
    13fa:	80 93 38 01 	sts	0x0138, r24
    13fe:	31 c0       	rjmp	.+98     	; 0x1462 <vTaskIncrementTick+0x17e>
    1400:	8e 01       	movw	r16, r28
    1402:	0e 5f       	subi	r16, 0xFE	; 254
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	c8 01       	movw	r24, r16
    1408:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    140c:	8c 89       	ldd	r24, Y+20	; 0x14
    140e:	9d 89       	ldd	r25, Y+21	; 0x15
    1410:	89 2b       	or	r24, r25
    1412:	21 f0       	breq	.+8      	; 0x141c <vTaskIncrementTick+0x138>
    1414:	ce 01       	movw	r24, r28
    1416:	0c 96       	adiw	r24, 0x0c	; 12
    1418:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    141c:	2e 89       	ldd	r18, Y+22	; 0x16
    141e:	80 91 61 07 	lds	r24, 0x0761
    1422:	82 17       	cp	r24, r18
    1424:	10 f4       	brcc	.+4      	; 0x142a <vTaskIncrementTick+0x146>
    1426:	20 93 61 07 	sts	0x0761, r18
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	c9 01       	movw	r24, r18
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	82 0f       	add	r24, r18
    143c:	93 1f       	adc	r25, r19
    143e:	b8 01       	movw	r22, r16
    1440:	81 57       	subi	r24, 0x71	; 113
    1442:	98 4f       	sbci	r25, 0xF8	; 248
    1444:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    1448:	e0 91 7b 07 	lds	r30, 0x077B
    144c:	f0 91 7c 07 	lds	r31, 0x077C
    1450:	80 81       	ld	r24, Z
    1452:	81 11       	cpse	r24, r1
    1454:	be cf       	rjmp	.-132    	; 0x13d2 <vTaskIncrementTick+0xee>
    1456:	b6 cf       	rjmp	.-148    	; 0x13c4 <vTaskIncrementTick+0xe0>
    1458:	80 91 5e 07 	lds	r24, 0x075E
    145c:	8f 5f       	subi	r24, 0xFF	; 255
    145e:	80 93 5e 07 	sts	0x075E, r24
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <xTaskResumeAll>:
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	0f 92       	push	r0
    1482:	80 91 5f 07 	lds	r24, 0x075F
    1486:	81 50       	subi	r24, 0x01	; 1
    1488:	80 93 5f 07 	sts	0x075F, r24
    148c:	80 91 5f 07 	lds	r24, 0x075F
    1490:	81 11       	cpse	r24, r1
    1492:	62 c0       	rjmp	.+196    	; 0x1558 <xTaskResumeAll+0xec>
    1494:	80 91 65 07 	lds	r24, 0x0765
    1498:	81 11       	cpse	r24, r1
    149a:	32 c0       	rjmp	.+100    	; 0x1500 <xTaskResumeAll+0x94>
    149c:	60 c0       	rjmp	.+192    	; 0x155e <xTaskResumeAll+0xf2>
    149e:	d7 01       	movw	r26, r14
    14a0:	15 96       	adiw	r26, 0x05	; 5
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	16 97       	sbiw	r26, 0x06	; 6
    14a8:	c6 81       	ldd	r28, Z+6	; 0x06
    14aa:	d7 81       	ldd	r29, Z+7	; 0x07
    14ac:	ce 01       	movw	r24, r28
    14ae:	0c 96       	adiw	r24, 0x0c	; 12
    14b0:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    14b4:	8e 01       	movw	r16, r28
    14b6:	0e 5f       	subi	r16, 0xFE	; 254
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	c8 01       	movw	r24, r16
    14bc:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
    14c0:	2e 89       	ldd	r18, Y+22	; 0x16
    14c2:	80 91 61 07 	lds	r24, 0x0761
    14c6:	82 17       	cp	r24, r18
    14c8:	10 f4       	brcc	.+4      	; 0x14ce <xTaskResumeAll+0x62>
    14ca:	20 93 61 07 	sts	0x0761, r18
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	c9 01       	movw	r24, r18
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	b8 01       	movw	r22, r16
    14e4:	81 57       	subi	r24, 0x71	; 113
    14e6:	98 4f       	sbci	r25, 0xF8	; 248
    14e8:	0e 94 9e 00 	call	0x13c	; 0x13c <vListInsertEnd>
    14ec:	e0 91 b3 07 	lds	r30, 0x07B3
    14f0:	f0 91 b4 07 	lds	r31, 0x07B4
    14f4:	9e 89       	ldd	r25, Y+22	; 0x16
    14f6:	86 89       	ldd	r24, Z+22	; 0x16
    14f8:	98 17       	cp	r25, r24
    14fa:	58 f0       	brcs	.+22     	; 0x1512 <xTaskResumeAll+0xa6>
    14fc:	dc 2c       	mov	r13, r12
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <xTaskResumeAll+0xa6>
    1500:	d1 2c       	mov	r13, r1
    1502:	0f 2e       	mov	r0, r31
    1504:	f0 e7       	ldi	r31, 0x70	; 112
    1506:	ef 2e       	mov	r14, r31
    1508:	f7 e0       	ldi	r31, 0x07	; 7
    150a:	ff 2e       	mov	r15, r31
    150c:	f0 2d       	mov	r31, r0
    150e:	cc 24       	eor	r12, r12
    1510:	c3 94       	inc	r12
    1512:	f7 01       	movw	r30, r14
    1514:	80 81       	ld	r24, Z
    1516:	81 11       	cpse	r24, r1
    1518:	c2 cf       	rjmp	.-124    	; 0x149e <xTaskResumeAll+0x32>
    151a:	80 91 5e 07 	lds	r24, 0x075E
    151e:	88 23       	and	r24, r24
    1520:	79 f0       	breq	.+30     	; 0x1540 <xTaskResumeAll+0xd4>
    1522:	80 91 5e 07 	lds	r24, 0x075E
    1526:	88 23       	and	r24, r24
    1528:	91 f0       	breq	.+36     	; 0x154e <xTaskResumeAll+0xe2>
    152a:	dc de       	rcall	.-584    	; 0x12e4 <vTaskIncrementTick>
    152c:	80 91 5e 07 	lds	r24, 0x075E
    1530:	81 50       	subi	r24, 0x01	; 1
    1532:	80 93 5e 07 	sts	0x075E, r24
    1536:	80 91 5e 07 	lds	r24, 0x075E
    153a:	81 11       	cpse	r24, r1
    153c:	f6 cf       	rjmp	.-20     	; 0x152a <xTaskResumeAll+0xbe>
    153e:	07 c0       	rjmp	.+14     	; 0x154e <xTaskResumeAll+0xe2>
    1540:	f1 e0       	ldi	r31, 0x01	; 1
    1542:	df 16       	cp	r13, r31
    1544:	21 f0       	breq	.+8      	; 0x154e <xTaskResumeAll+0xe2>
    1546:	80 91 5d 07 	lds	r24, 0x075D
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	39 f4       	brne	.+14     	; 0x155c <xTaskResumeAll+0xf0>
    154e:	10 92 5d 07 	sts	0x075D, r1
    1552:	b4 dc       	rcall	.-1688   	; 0xebc <vPortYield>
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	03 c0       	rjmp	.+6      	; 0x155e <xTaskResumeAll+0xf2>
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	01 c0       	rjmp	.+2      	; 0x155e <xTaskResumeAll+0xf2>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	ff 90       	pop	r15
    156c:	ef 90       	pop	r14
    156e:	df 90       	pop	r13
    1570:	cf 90       	pop	r12
    1572:	08 95       	ret

00001574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    157a:	89 2b       	or	r24, r25
    157c:	99 f0       	breq	.+38     	; 0x15a4 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    157e:	ac de       	rcall	.-680    	; 0x12d8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1580:	80 91 63 07 	lds	r24, 0x0763
    1584:	90 91 64 07 	lds	r25, 0x0764
    1588:	c8 0f       	add	r28, r24
    158a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    158c:	80 91 b3 07 	lds	r24, 0x07B3
    1590:	90 91 b4 07 	lds	r25, 0x07B4
    1594:	02 96       	adiw	r24, 0x02	; 2
    1596:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    159a:	ce 01       	movw	r24, r28
    159c:	42 dd       	rcall	.-1404   	; 0x1022 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    159e:	66 df       	rcall	.-308    	; 0x146c <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    15a0:	81 11       	cpse	r24, r1
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    15a4:	8b dc       	rcall	.-1770   	; 0xebc <vPortYield>
		}
	}
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	08 95       	ret

000015ac <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    15ac:	0f 2e       	mov	r0, r31
    15ae:	f7 e6       	ldi	r31, 0x67	; 103
    15b0:	ef 2e       	mov	r14, r31
    15b2:	f7 e0       	ldi	r31, 0x07	; 7
    15b4:	ff 2e       	mov	r15, r31
    15b6:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    15b8:	cf e8       	ldi	r28, 0x8F	; 143
    15ba:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    15bc:	80 91 66 07 	lds	r24, 0x0766
    15c0:	88 23       	and	r24, r24
    15c2:	41 f1       	breq	.+80     	; 0x1614 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    15c4:	89 de       	rcall	.-750    	; 0x12d8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    15c6:	d7 01       	movw	r26, r14
    15c8:	1c 91       	ld	r17, X
			xTaskResumeAll();
    15ca:	50 df       	rcall	.-352    	; 0x146c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    15cc:	11 23       	and	r17, r17
    15ce:	11 f1       	breq	.+68     	; 0x1614 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    15d6:	d7 01       	movw	r26, r14
    15d8:	15 96       	adiw	r26, 0x05	; 5
    15da:	ed 91       	ld	r30, X+
    15dc:	fc 91       	ld	r31, X
    15de:	16 97       	sbiw	r26, 0x06	; 6
    15e0:	06 81       	ldd	r16, Z+6	; 0x06
    15e2:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    15e4:	c8 01       	movw	r24, r16
    15e6:	02 96       	adiw	r24, 0x02	; 2
    15e8:	0e 94 00 01 	call	0x200	; 0x200 <vListRemove>
					--uxCurrentNumberOfTasks;
    15ec:	80 91 65 07 	lds	r24, 0x0765
    15f0:	81 50       	subi	r24, 0x01	; 1
    15f2:	80 93 65 07 	sts	0x0765, r24
					--uxTasksDeleted;
    15f6:	80 91 66 07 	lds	r24, 0x0766
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	80 93 66 07 	sts	0x0766, r24
				}
				taskEXIT_CRITICAL();
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1604:	f8 01       	movw	r30, r16
    1606:	87 89       	ldd	r24, Z+23	; 0x17
    1608:	90 8d       	ldd	r25, Z+24	; 0x18
    160a:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>
		vPortFree( pxTCB );
    160e:	c8 01       	movw	r24, r16
    1610:	0e 94 8b 00 	call	0x116	; 0x116 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1614:	88 81       	ld	r24, Y
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	88 f2       	brcs	.-94     	; 0x15bc <prvIdleTask+0x10>
			{
				taskYIELD();
    161a:	50 dc       	rcall	.-1888   	; 0xebc <vPortYield>
    161c:	cf cf       	rjmp	.-98     	; 0x15bc <prvIdleTask+0x10>

0000161e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    161e:	80 91 5f 07 	lds	r24, 0x075F
    1622:	81 11       	cpse	r24, r1
    1624:	13 c0       	rjmp	.+38     	; 0x164c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1626:	80 91 61 07 	lds	r24, 0x0761
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	fc 01       	movw	r30, r24
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	ee 0f       	add	r30, r30
    1634:	ff 1f       	adc	r31, r31
    1636:	ee 0f       	add	r30, r30
    1638:	ff 1f       	adc	r31, r31
    163a:	8e 0f       	add	r24, r30
    163c:	9f 1f       	adc	r25, r31
    163e:	fc 01       	movw	r30, r24
    1640:	e1 57       	subi	r30, 0x71	; 113
    1642:	f8 4f       	sbci	r31, 0xF8	; 248
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	29 f0       	breq	.+10     	; 0x1654 <vTaskSwitchContext+0x36>
    164a:	1b c0       	rjmp	.+54     	; 0x1682 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	80 93 5d 07 	sts	0x075D, r24
    1652:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1654:	80 91 61 07 	lds	r24, 0x0761
    1658:	81 50       	subi	r24, 0x01	; 1
    165a:	80 93 61 07 	sts	0x0761, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    165e:	80 91 61 07 	lds	r24, 0x0761
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fc 01       	movw	r30, r24
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	8e 0f       	add	r24, r30
    1674:	9f 1f       	adc	r25, r31
    1676:	fc 01       	movw	r30, r24
    1678:	e1 57       	subi	r30, 0x71	; 113
    167a:	f8 4f       	sbci	r31, 0xF8	; 248
    167c:	80 81       	ld	r24, Z
    167e:	88 23       	and	r24, r24
    1680:	49 f3       	breq	.-46     	; 0x1654 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1682:	80 91 61 07 	lds	r24, 0x0761
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9c 01       	movw	r18, r24
    168a:	22 0f       	add	r18, r18
    168c:	33 1f       	adc	r19, r19
    168e:	22 0f       	add	r18, r18
    1690:	33 1f       	adc	r19, r19
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	28 0f       	add	r18, r24
    1698:	39 1f       	adc	r19, r25
    169a:	d9 01       	movw	r26, r18
    169c:	a1 57       	subi	r26, 0x71	; 113
    169e:	b8 4f       	sbci	r27, 0xF8	; 248
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	ed 91       	ld	r30, X+
    16a4:	fc 91       	ld	r31, X
    16a6:	12 97       	sbiw	r26, 0x02	; 2
    16a8:	02 80       	ldd	r0, Z+2	; 0x02
    16aa:	f3 81       	ldd	r31, Z+3	; 0x03
    16ac:	e0 2d       	mov	r30, r0
    16ae:	12 96       	adiw	r26, 0x02	; 2
    16b0:	fc 93       	st	X, r31
    16b2:	ee 93       	st	-X, r30
    16b4:	11 97       	sbiw	r26, 0x01	; 1
    16b6:	2e 56       	subi	r18, 0x6E	; 110
    16b8:	38 4f       	sbci	r19, 0xF8	; 248
    16ba:	e2 17       	cp	r30, r18
    16bc:	f3 07       	cpc	r31, r19
    16be:	29 f4       	brne	.+10     	; 0x16ca <vTaskSwitchContext+0xac>
    16c0:	22 81       	ldd	r18, Z+2	; 0x02
    16c2:	33 81       	ldd	r19, Z+3	; 0x03
    16c4:	fd 01       	movw	r30, r26
    16c6:	32 83       	std	Z+2, r19	; 0x02
    16c8:	21 83       	std	Z+1, r18	; 0x01
    16ca:	fc 01       	movw	r30, r24
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	8e 0f       	add	r24, r30
    16da:	9f 1f       	adc	r25, r31
    16dc:	fc 01       	movw	r30, r24
    16de:	e1 57       	subi	r30, 0x71	; 113
    16e0:	f8 4f       	sbci	r31, 0xF8	; 248
    16e2:	01 80       	ldd	r0, Z+1	; 0x01
    16e4:	f2 81       	ldd	r31, Z+2	; 0x02
    16e6:	e0 2d       	mov	r30, r0
    16e8:	86 81       	ldd	r24, Z+6	; 0x06
    16ea:	97 81       	ldd	r25, Z+7	; 0x07
    16ec:	90 93 b4 07 	sts	0x07B4, r25
    16f0:	80 93 b3 07 	sts	0x07B3, r24
    16f4:	08 95       	ret

000016f6 <__subsf3>:
    16f6:	50 58       	subi	r21, 0x80	; 128

000016f8 <__addsf3>:
    16f8:	bb 27       	eor	r27, r27
    16fa:	aa 27       	eor	r26, r26
    16fc:	0e d0       	rcall	.+28     	; 0x171a <__addsf3x>
    16fe:	fb c0       	rjmp	.+502    	; 0x18f6 <__fp_round>
    1700:	ec d0       	rcall	.+472    	; 0x18da <__fp_pscA>
    1702:	30 f0       	brcs	.+12     	; 0x1710 <__addsf3+0x18>
    1704:	f1 d0       	rcall	.+482    	; 0x18e8 <__fp_pscB>
    1706:	20 f0       	brcs	.+8      	; 0x1710 <__addsf3+0x18>
    1708:	31 f4       	brne	.+12     	; 0x1716 <__addsf3+0x1e>
    170a:	9f 3f       	cpi	r25, 0xFF	; 255
    170c:	11 f4       	brne	.+4      	; 0x1712 <__addsf3+0x1a>
    170e:	1e f4       	brtc	.+6      	; 0x1716 <__addsf3+0x1e>
    1710:	e1 c0       	rjmp	.+450    	; 0x18d4 <__fp_nan>
    1712:	0e f4       	brtc	.+2      	; 0x1716 <__addsf3+0x1e>
    1714:	e0 95       	com	r30
    1716:	e7 fb       	bst	r30, 7
    1718:	c9 c0       	rjmp	.+402    	; 0x18ac <__fp_inf>

0000171a <__addsf3x>:
    171a:	e9 2f       	mov	r30, r25
    171c:	fd d0       	rcall	.+506    	; 0x1918 <__fp_split3>
    171e:	80 f3       	brcs	.-32     	; 0x1700 <__addsf3+0x8>
    1720:	ba 17       	cp	r27, r26
    1722:	62 07       	cpc	r22, r18
    1724:	73 07       	cpc	r23, r19
    1726:	84 07       	cpc	r24, r20
    1728:	95 07       	cpc	r25, r21
    172a:	18 f0       	brcs	.+6      	; 0x1732 <__addsf3x+0x18>
    172c:	71 f4       	brne	.+28     	; 0x174a <__addsf3x+0x30>
    172e:	9e f5       	brtc	.+102    	; 0x1796 <__addsf3x+0x7c>
    1730:	15 c1       	rjmp	.+554    	; 0x195c <__fp_zero>
    1732:	0e f4       	brtc	.+2      	; 0x1736 <__addsf3x+0x1c>
    1734:	e0 95       	com	r30
    1736:	0b 2e       	mov	r0, r27
    1738:	ba 2f       	mov	r27, r26
    173a:	a0 2d       	mov	r26, r0
    173c:	0b 01       	movw	r0, r22
    173e:	b9 01       	movw	r22, r18
    1740:	90 01       	movw	r18, r0
    1742:	0c 01       	movw	r0, r24
    1744:	ca 01       	movw	r24, r20
    1746:	a0 01       	movw	r20, r0
    1748:	11 24       	eor	r1, r1
    174a:	ff 27       	eor	r31, r31
    174c:	59 1b       	sub	r21, r25
    174e:	99 f0       	breq	.+38     	; 0x1776 <__addsf3x+0x5c>
    1750:	59 3f       	cpi	r21, 0xF9	; 249
    1752:	50 f4       	brcc	.+20     	; 0x1768 <__addsf3x+0x4e>
    1754:	50 3e       	cpi	r21, 0xE0	; 224
    1756:	68 f1       	brcs	.+90     	; 0x17b2 <__addsf3x+0x98>
    1758:	1a 16       	cp	r1, r26
    175a:	f0 40       	sbci	r31, 0x00	; 0
    175c:	a2 2f       	mov	r26, r18
    175e:	23 2f       	mov	r18, r19
    1760:	34 2f       	mov	r19, r20
    1762:	44 27       	eor	r20, r20
    1764:	58 5f       	subi	r21, 0xF8	; 248
    1766:	f3 cf       	rjmp	.-26     	; 0x174e <__addsf3x+0x34>
    1768:	46 95       	lsr	r20
    176a:	37 95       	ror	r19
    176c:	27 95       	ror	r18
    176e:	a7 95       	ror	r26
    1770:	f0 40       	sbci	r31, 0x00	; 0
    1772:	53 95       	inc	r21
    1774:	c9 f7       	brne	.-14     	; 0x1768 <__addsf3x+0x4e>
    1776:	7e f4       	brtc	.+30     	; 0x1796 <__addsf3x+0x7c>
    1778:	1f 16       	cp	r1, r31
    177a:	ba 0b       	sbc	r27, r26
    177c:	62 0b       	sbc	r22, r18
    177e:	73 0b       	sbc	r23, r19
    1780:	84 0b       	sbc	r24, r20
    1782:	ba f0       	brmi	.+46     	; 0x17b2 <__addsf3x+0x98>
    1784:	91 50       	subi	r25, 0x01	; 1
    1786:	a1 f0       	breq	.+40     	; 0x17b0 <__addsf3x+0x96>
    1788:	ff 0f       	add	r31, r31
    178a:	bb 1f       	adc	r27, r27
    178c:	66 1f       	adc	r22, r22
    178e:	77 1f       	adc	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	c2 f7       	brpl	.-16     	; 0x1784 <__addsf3x+0x6a>
    1794:	0e c0       	rjmp	.+28     	; 0x17b2 <__addsf3x+0x98>
    1796:	ba 0f       	add	r27, r26
    1798:	62 1f       	adc	r22, r18
    179a:	73 1f       	adc	r23, r19
    179c:	84 1f       	adc	r24, r20
    179e:	48 f4       	brcc	.+18     	; 0x17b2 <__addsf3x+0x98>
    17a0:	87 95       	ror	r24
    17a2:	77 95       	ror	r23
    17a4:	67 95       	ror	r22
    17a6:	b7 95       	ror	r27
    17a8:	f7 95       	ror	r31
    17aa:	9e 3f       	cpi	r25, 0xFE	; 254
    17ac:	08 f0       	brcs	.+2      	; 0x17b0 <__addsf3x+0x96>
    17ae:	b3 cf       	rjmp	.-154    	; 0x1716 <__addsf3+0x1e>
    17b0:	93 95       	inc	r25
    17b2:	88 0f       	add	r24, r24
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <__addsf3x+0x9e>
    17b6:	99 27       	eor	r25, r25
    17b8:	ee 0f       	add	r30, r30
    17ba:	97 95       	ror	r25
    17bc:	87 95       	ror	r24
    17be:	08 95       	ret

000017c0 <__cmpsf2>:
    17c0:	51 d0       	rcall	.+162    	; 0x1864 <__fp_cmp>
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <__cmpsf2+0x6>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	08 95       	ret
    17c8:	88 d0       	rcall	.+272    	; 0x18da <__fp_pscA>
    17ca:	18 f0       	brcs	.+6      	; 0x17d2 <__cmpsf2+0x12>
    17cc:	11 f0       	breq	.+4      	; 0x17d2 <__cmpsf2+0x12>
    17ce:	8c d0       	rcall	.+280    	; 0x18e8 <__fp_pscB>
    17d0:	38 f4       	brcc	.+14     	; 0x17e0 <fmod+0xa>
    17d2:	80 c0       	rjmp	.+256    	; 0x18d4 <__fp_nan>
    17d4:	c4 c0       	rjmp	.+392    	; 0x195e <__fp_szero>

000017d6 <fmod>:
    17d6:	e9 2f       	mov	r30, r25
    17d8:	9f d0       	rcall	.+318    	; 0x1918 <__fp_split3>
    17da:	b0 f3       	brcs	.-20     	; 0x17c8 <__cmpsf2+0x8>
    17dc:	55 23       	and	r21, r21
    17de:	c9 f3       	breq	.-14     	; 0x17d2 <__cmpsf2+0x12>
    17e0:	e7 fb       	bst	r30, 7
    17e2:	62 17       	cp	r22, r18
    17e4:	73 07       	cpc	r23, r19
    17e6:	84 07       	cpc	r24, r20
    17e8:	95 07       	cpc	r25, r21
    17ea:	a8 f1       	brcs	.+106    	; 0x1856 <fmod+0x80>
    17ec:	99 f3       	breq	.-26     	; 0x17d4 <__cmpsf2+0x14>
    17ee:	e9 2f       	mov	r30, r25
    17f0:	ff 27       	eor	r31, r31
    17f2:	88 23       	and	r24, r24
    17f4:	2a f0       	brmi	.+10     	; 0x1800 <fmod+0x2a>
    17f6:	31 97       	sbiw	r30, 0x01	; 1
    17f8:	66 0f       	add	r22, r22
    17fa:	77 1f       	adc	r23, r23
    17fc:	88 1f       	adc	r24, r24
    17fe:	da f7       	brpl	.-10     	; 0x17f6 <fmod+0x20>
    1800:	95 2f       	mov	r25, r21
    1802:	55 27       	eor	r21, r21
    1804:	44 23       	and	r20, r20
    1806:	32 f0       	brmi	.+12     	; 0x1814 <fmod+0x3e>
    1808:	91 50       	subi	r25, 0x01	; 1
    180a:	50 40       	sbci	r21, 0x00	; 0
    180c:	22 0f       	add	r18, r18
    180e:	33 1f       	adc	r19, r19
    1810:	44 1f       	adc	r20, r20
    1812:	d2 f7       	brpl	.-12     	; 0x1808 <fmod+0x32>
    1814:	bb 27       	eor	r27, r27
    1816:	e9 1b       	sub	r30, r25
    1818:	f5 0b       	sbc	r31, r21
    181a:	62 1b       	sub	r22, r18
    181c:	73 0b       	sbc	r23, r19
    181e:	84 0b       	sbc	r24, r20
    1820:	b1 09       	sbc	r27, r1
    1822:	c1 f2       	breq	.-80     	; 0x17d4 <__cmpsf2+0x14>
    1824:	22 f4       	brpl	.+8      	; 0x182e <fmod+0x58>
    1826:	62 0f       	add	r22, r18
    1828:	73 1f       	adc	r23, r19
    182a:	84 1f       	adc	r24, r20
    182c:	b1 1d       	adc	r27, r1
    182e:	31 97       	sbiw	r30, 0x01	; 1
    1830:	2a f0       	brmi	.+10     	; 0x183c <fmod+0x66>
    1832:	66 0f       	add	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	bb 1f       	adc	r27, r27
    183a:	ef cf       	rjmp	.-34     	; 0x181a <fmod+0x44>
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	5a f0       	brmi	.+22     	; 0x1858 <fmod+0x82>
    1842:	41 f0       	breq	.+16     	; 0x1854 <fmod+0x7e>
    1844:	88 23       	and	r24, r24
    1846:	32 f0       	brmi	.+12     	; 0x1854 <fmod+0x7e>
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	91 50       	subi	r25, 0x01	; 1
    1850:	50 40       	sbci	r21, 0x00	; 0
    1852:	c1 f7       	brne	.-16     	; 0x1844 <fmod+0x6e>
    1854:	93 95       	inc	r25
    1856:	30 c0       	rjmp	.+96     	; 0x18b8 <__fp_mpack>
    1858:	86 95       	lsr	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	9f 5f       	subi	r25, 0xFF	; 255
    1860:	d9 f7       	brne	.-10     	; 0x1858 <fmod+0x82>
    1862:	f8 cf       	rjmp	.-16     	; 0x1854 <fmod+0x7e>

00001864 <__fp_cmp>:
    1864:	99 0f       	add	r25, r25
    1866:	00 08       	sbc	r0, r0
    1868:	55 0f       	add	r21, r21
    186a:	aa 0b       	sbc	r26, r26
    186c:	e0 e8       	ldi	r30, 0x80	; 128
    186e:	fe ef       	ldi	r31, 0xFE	; 254
    1870:	16 16       	cp	r1, r22
    1872:	17 06       	cpc	r1, r23
    1874:	e8 07       	cpc	r30, r24
    1876:	f9 07       	cpc	r31, r25
    1878:	c0 f0       	brcs	.+48     	; 0x18aa <__fp_cmp+0x46>
    187a:	12 16       	cp	r1, r18
    187c:	13 06       	cpc	r1, r19
    187e:	e4 07       	cpc	r30, r20
    1880:	f5 07       	cpc	r31, r21
    1882:	98 f0       	brcs	.+38     	; 0x18aa <__fp_cmp+0x46>
    1884:	62 1b       	sub	r22, r18
    1886:	73 0b       	sbc	r23, r19
    1888:	84 0b       	sbc	r24, r20
    188a:	95 0b       	sbc	r25, r21
    188c:	39 f4       	brne	.+14     	; 0x189c <__fp_cmp+0x38>
    188e:	0a 26       	eor	r0, r26
    1890:	61 f0       	breq	.+24     	; 0x18aa <__fp_cmp+0x46>
    1892:	23 2b       	or	r18, r19
    1894:	24 2b       	or	r18, r20
    1896:	25 2b       	or	r18, r21
    1898:	21 f4       	brne	.+8      	; 0x18a2 <__fp_cmp+0x3e>
    189a:	08 95       	ret
    189c:	0a 26       	eor	r0, r26
    189e:	09 f4       	brne	.+2      	; 0x18a2 <__fp_cmp+0x3e>
    18a0:	a1 40       	sbci	r26, 0x01	; 1
    18a2:	a6 95       	lsr	r26
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	81 1d       	adc	r24, r1
    18a8:	81 1d       	adc	r24, r1
    18aa:	08 95       	ret

000018ac <__fp_inf>:
    18ac:	97 f9       	bld	r25, 7
    18ae:	9f 67       	ori	r25, 0x7F	; 127
    18b0:	80 e8       	ldi	r24, 0x80	; 128
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	60 e0       	ldi	r22, 0x00	; 0
    18b6:	08 95       	ret

000018b8 <__fp_mpack>:
    18b8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ba:	31 f0       	breq	.+12     	; 0x18c8 <__fp_mpack_finite+0xc>

000018bc <__fp_mpack_finite>:
    18bc:	91 50       	subi	r25, 0x01	; 1
    18be:	20 f4       	brcc	.+8      	; 0x18c8 <__fp_mpack_finite+0xc>
    18c0:	87 95       	ror	r24
    18c2:	77 95       	ror	r23
    18c4:	67 95       	ror	r22
    18c6:	b7 95       	ror	r27
    18c8:	88 0f       	add	r24, r24
    18ca:	91 1d       	adc	r25, r1
    18cc:	96 95       	lsr	r25
    18ce:	87 95       	ror	r24
    18d0:	97 f9       	bld	r25, 7
    18d2:	08 95       	ret

000018d4 <__fp_nan>:
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	80 ec       	ldi	r24, 0xC0	; 192
    18d8:	08 95       	ret

000018da <__fp_pscA>:
    18da:	00 24       	eor	r0, r0
    18dc:	0a 94       	dec	r0
    18de:	16 16       	cp	r1, r22
    18e0:	17 06       	cpc	r1, r23
    18e2:	18 06       	cpc	r1, r24
    18e4:	09 06       	cpc	r0, r25
    18e6:	08 95       	ret

000018e8 <__fp_pscB>:
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	12 16       	cp	r1, r18
    18ee:	13 06       	cpc	r1, r19
    18f0:	14 06       	cpc	r1, r20
    18f2:	05 06       	cpc	r0, r21
    18f4:	08 95       	ret

000018f6 <__fp_round>:
    18f6:	09 2e       	mov	r0, r25
    18f8:	03 94       	inc	r0
    18fa:	00 0c       	add	r0, r0
    18fc:	11 f4       	brne	.+4      	; 0x1902 <__fp_round+0xc>
    18fe:	88 23       	and	r24, r24
    1900:	52 f0       	brmi	.+20     	; 0x1916 <__fp_round+0x20>
    1902:	bb 0f       	add	r27, r27
    1904:	40 f4       	brcc	.+16     	; 0x1916 <__fp_round+0x20>
    1906:	bf 2b       	or	r27, r31
    1908:	11 f4       	brne	.+4      	; 0x190e <__fp_round+0x18>
    190a:	60 ff       	sbrs	r22, 0
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__fp_round+0x20>
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	8f 4f       	sbci	r24, 0xFF	; 255
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	08 95       	ret

00001918 <__fp_split3>:
    1918:	57 fd       	sbrc	r21, 7
    191a:	90 58       	subi	r25, 0x80	; 128
    191c:	44 0f       	add	r20, r20
    191e:	55 1f       	adc	r21, r21
    1920:	59 f0       	breq	.+22     	; 0x1938 <__fp_splitA+0x10>
    1922:	5f 3f       	cpi	r21, 0xFF	; 255
    1924:	71 f0       	breq	.+28     	; 0x1942 <__fp_splitA+0x1a>
    1926:	47 95       	ror	r20

00001928 <__fp_splitA>:
    1928:	88 0f       	add	r24, r24
    192a:	97 fb       	bst	r25, 7
    192c:	99 1f       	adc	r25, r25
    192e:	61 f0       	breq	.+24     	; 0x1948 <__fp_splitA+0x20>
    1930:	9f 3f       	cpi	r25, 0xFF	; 255
    1932:	79 f0       	breq	.+30     	; 0x1952 <__fp_splitA+0x2a>
    1934:	87 95       	ror	r24
    1936:	08 95       	ret
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	14 06       	cpc	r1, r20
    193e:	55 1f       	adc	r21, r21
    1940:	f2 cf       	rjmp	.-28     	; 0x1926 <__fp_split3+0xe>
    1942:	46 95       	lsr	r20
    1944:	f1 df       	rcall	.-30     	; 0x1928 <__fp_splitA>
    1946:	08 c0       	rjmp	.+16     	; 0x1958 <__fp_splitA+0x30>
    1948:	16 16       	cp	r1, r22
    194a:	17 06       	cpc	r1, r23
    194c:	18 06       	cpc	r1, r24
    194e:	99 1f       	adc	r25, r25
    1950:	f1 cf       	rjmp	.-30     	; 0x1934 <__fp_splitA+0xc>
    1952:	86 95       	lsr	r24
    1954:	71 05       	cpc	r23, r1
    1956:	61 05       	cpc	r22, r1
    1958:	08 94       	sec
    195a:	08 95       	ret

0000195c <__fp_zero>:
    195c:	e8 94       	clt

0000195e <__fp_szero>:
    195e:	bb 27       	eor	r27, r27
    1960:	66 27       	eor	r22, r22
    1962:	77 27       	eor	r23, r23
    1964:	cb 01       	movw	r24, r22
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret

0000196a <__udivmodqi4>:
    196a:	99 1b       	sub	r25, r25
    196c:	79 e0       	ldi	r23, 0x09	; 9
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <__udivmodqi4_ep>

00001970 <__udivmodqi4_loop>:
    1970:	99 1f       	adc	r25, r25
    1972:	96 17       	cp	r25, r22
    1974:	08 f0       	brcs	.+2      	; 0x1978 <__udivmodqi4_ep>
    1976:	96 1b       	sub	r25, r22

00001978 <__udivmodqi4_ep>:
    1978:	88 1f       	adc	r24, r24
    197a:	7a 95       	dec	r23
    197c:	c9 f7       	brne	.-14     	; 0x1970 <__udivmodqi4_loop>
    197e:	80 95       	com	r24
    1980:	08 95       	ret

00001982 <__muldi3>:
    1982:	df 93       	push	r29
    1984:	cf 93       	push	r28
    1986:	1f 93       	push	r17
    1988:	0f 93       	push	r16
    198a:	9a 9d       	mul	r25, r10
    198c:	f0 2d       	mov	r31, r0
    198e:	21 9f       	mul	r18, r17
    1990:	f0 0d       	add	r31, r0
    1992:	8b 9d       	mul	r24, r11
    1994:	f0 0d       	add	r31, r0
    1996:	8a 9d       	mul	r24, r10
    1998:	e0 2d       	mov	r30, r0
    199a:	f1 0d       	add	r31, r1
    199c:	03 9f       	mul	r16, r19
    199e:	f0 0d       	add	r31, r0
    19a0:	02 9f       	mul	r16, r18
    19a2:	e0 0d       	add	r30, r0
    19a4:	f1 1d       	adc	r31, r1
    19a6:	4e 9d       	mul	r20, r14
    19a8:	e0 0d       	add	r30, r0
    19aa:	f1 1d       	adc	r31, r1
    19ac:	5e 9d       	mul	r21, r14
    19ae:	f0 0d       	add	r31, r0
    19b0:	4f 9d       	mul	r20, r15
    19b2:	f0 0d       	add	r31, r0
    19b4:	7f 93       	push	r23
    19b6:	6f 93       	push	r22
    19b8:	bf 92       	push	r11
    19ba:	af 92       	push	r10
    19bc:	5f 93       	push	r21
    19be:	4f 93       	push	r20
    19c0:	d5 01       	movw	r26, r10
    19c2:	39 d0       	rcall	.+114    	; 0x1a36 <__umulhisi3>
    19c4:	8b 01       	movw	r16, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	d7 01       	movw	r26, r14
    19ca:	35 d0       	rcall	.+106    	; 0x1a36 <__umulhisi3>
    19cc:	eb 01       	movw	r28, r22
    19ce:	e8 0f       	add	r30, r24
    19d0:	f9 1f       	adc	r31, r25
    19d2:	d6 01       	movw	r26, r12
    19d4:	1f d0       	rcall	.+62     	; 0x1a14 <__muldi3_6>
    19d6:	2f 91       	pop	r18
    19d8:	3f 91       	pop	r19
    19da:	d6 01       	movw	r26, r12
    19dc:	2c d0       	rcall	.+88     	; 0x1a36 <__umulhisi3>
    19de:	c6 0f       	add	r28, r22
    19e0:	d7 1f       	adc	r29, r23
    19e2:	e8 1f       	adc	r30, r24
    19e4:	f9 1f       	adc	r31, r25
    19e6:	af 91       	pop	r26
    19e8:	bf 91       	pop	r27
    19ea:	14 d0       	rcall	.+40     	; 0x1a14 <__muldi3_6>
    19ec:	2f 91       	pop	r18
    19ee:	3f 91       	pop	r19
    19f0:	22 d0       	rcall	.+68     	; 0x1a36 <__umulhisi3>
    19f2:	c6 0f       	add	r28, r22
    19f4:	d7 1f       	adc	r29, r23
    19f6:	e8 1f       	adc	r30, r24
    19f8:	f9 1f       	adc	r31, r25
    19fa:	d6 01       	movw	r26, r12
    19fc:	1c d0       	rcall	.+56     	; 0x1a36 <__umulhisi3>
    19fe:	e6 0f       	add	r30, r22
    1a00:	f7 1f       	adc	r31, r23
    1a02:	98 01       	movw	r18, r16
    1a04:	be 01       	movw	r22, r28
    1a06:	cf 01       	movw	r24, r30
    1a08:	11 24       	eor	r1, r1
    1a0a:	0f 91       	pop	r16
    1a0c:	1f 91       	pop	r17
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <__muldi3_6>:
    1a14:	10 d0       	rcall	.+32     	; 0x1a36 <__umulhisi3>
    1a16:	46 0f       	add	r20, r22
    1a18:	57 1f       	adc	r21, r23
    1a1a:	c8 1f       	adc	r28, r24
    1a1c:	d9 1f       	adc	r29, r25
    1a1e:	08 f4       	brcc	.+2      	; 0x1a22 <__muldi3_6+0xe>
    1a20:	31 96       	adiw	r30, 0x01	; 1
    1a22:	08 95       	ret

00001a24 <__adddi3>:
    1a24:	2a 0d       	add	r18, r10
    1a26:	3b 1d       	adc	r19, r11
    1a28:	4c 1d       	adc	r20, r12
    1a2a:	5d 1d       	adc	r21, r13
    1a2c:	6e 1d       	adc	r22, r14
    1a2e:	7f 1d       	adc	r23, r15
    1a30:	80 1f       	adc	r24, r16
    1a32:	91 1f       	adc	r25, r17
    1a34:	08 95       	ret

00001a36 <__umulhisi3>:
    1a36:	a2 9f       	mul	r26, r18
    1a38:	b0 01       	movw	r22, r0
    1a3a:	b3 9f       	mul	r27, r19
    1a3c:	c0 01       	movw	r24, r0
    1a3e:	a3 9f       	mul	r26, r19
    1a40:	70 0d       	add	r23, r0
    1a42:	81 1d       	adc	r24, r1
    1a44:	11 24       	eor	r1, r1
    1a46:	91 1d       	adc	r25, r1
    1a48:	b2 9f       	mul	r27, r18
    1a4a:	70 0d       	add	r23, r0
    1a4c:	81 1d       	adc	r24, r1
    1a4e:	11 24       	eor	r1, r1
    1a50:	91 1d       	adc	r25, r1
    1a52:	08 95       	ret

00001a54 <malloc>:
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	10 f4       	brcc	.+4      	; 0x1a62 <malloc+0xe>
    1a5e:	82 e0       	ldi	r24, 0x02	; 2
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	e0 91 c7 07 	lds	r30, 0x07C7
    1a66:	f0 91 c8 07 	lds	r31, 0x07C8
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	c0 e0       	ldi	r28, 0x00	; 0
    1a70:	d0 e0       	ldi	r29, 0x00	; 0
    1a72:	30 97       	sbiw	r30, 0x00	; 0
    1a74:	11 f1       	breq	.+68     	; 0x1aba <malloc+0x66>
    1a76:	40 81       	ld	r20, Z
    1a78:	51 81       	ldd	r21, Z+1	; 0x01
    1a7a:	48 17       	cp	r20, r24
    1a7c:	59 07       	cpc	r21, r25
    1a7e:	c0 f0       	brcs	.+48     	; 0x1ab0 <malloc+0x5c>
    1a80:	48 17       	cp	r20, r24
    1a82:	59 07       	cpc	r21, r25
    1a84:	61 f4       	brne	.+24     	; 0x1a9e <malloc+0x4a>
    1a86:	82 81       	ldd	r24, Z+2	; 0x02
    1a88:	93 81       	ldd	r25, Z+3	; 0x03
    1a8a:	20 97       	sbiw	r28, 0x00	; 0
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <malloc+0x40>
    1a8e:	9b 83       	std	Y+3, r25	; 0x03
    1a90:	8a 83       	std	Y+2, r24	; 0x02
    1a92:	2b c0       	rjmp	.+86     	; 0x1aea <malloc+0x96>
    1a94:	90 93 c8 07 	sts	0x07C8, r25
    1a98:	80 93 c7 07 	sts	0x07C7, r24
    1a9c:	26 c0       	rjmp	.+76     	; 0x1aea <malloc+0x96>
    1a9e:	21 15       	cp	r18, r1
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	19 f0       	breq	.+6      	; 0x1aaa <malloc+0x56>
    1aa4:	42 17       	cp	r20, r18
    1aa6:	53 07       	cpc	r21, r19
    1aa8:	18 f4       	brcc	.+6      	; 0x1ab0 <malloc+0x5c>
    1aaa:	9a 01       	movw	r18, r20
    1aac:	be 01       	movw	r22, r28
    1aae:	df 01       	movw	r26, r30
    1ab0:	ef 01       	movw	r28, r30
    1ab2:	02 80       	ldd	r0, Z+2	; 0x02
    1ab4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	dc cf       	rjmp	.-72     	; 0x1a72 <malloc+0x1e>
    1aba:	21 15       	cp	r18, r1
    1abc:	31 05       	cpc	r19, r1
    1abe:	09 f1       	breq	.+66     	; 0x1b02 <malloc+0xae>
    1ac0:	28 1b       	sub	r18, r24
    1ac2:	39 0b       	sbc	r19, r25
    1ac4:	24 30       	cpi	r18, 0x04	; 4
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	90 f4       	brcc	.+36     	; 0x1aee <malloc+0x9a>
    1aca:	12 96       	adiw	r26, 0x02	; 2
    1acc:	8d 91       	ld	r24, X+
    1ace:	9c 91       	ld	r25, X
    1ad0:	13 97       	sbiw	r26, 0x03	; 3
    1ad2:	61 15       	cp	r22, r1
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <malloc+0x8c>
    1ad8:	fb 01       	movw	r30, r22
    1ada:	93 83       	std	Z+3, r25	; 0x03
    1adc:	82 83       	std	Z+2, r24	; 0x02
    1ade:	04 c0       	rjmp	.+8      	; 0x1ae8 <malloc+0x94>
    1ae0:	90 93 c8 07 	sts	0x07C8, r25
    1ae4:	80 93 c7 07 	sts	0x07C7, r24
    1ae8:	fd 01       	movw	r30, r26
    1aea:	32 96       	adiw	r30, 0x02	; 2
    1aec:	44 c0       	rjmp	.+136    	; 0x1b76 <malloc+0x122>
    1aee:	fd 01       	movw	r30, r26
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	81 93       	st	Z+, r24
    1af6:	91 93       	st	Z+, r25
    1af8:	22 50       	subi	r18, 0x02	; 2
    1afa:	31 09       	sbc	r19, r1
    1afc:	2d 93       	st	X+, r18
    1afe:	3c 93       	st	X, r19
    1b00:	3a c0       	rjmp	.+116    	; 0x1b76 <malloc+0x122>
    1b02:	20 91 c5 07 	lds	r18, 0x07C5
    1b06:	30 91 c6 07 	lds	r19, 0x07C6
    1b0a:	23 2b       	or	r18, r19
    1b0c:	41 f4       	brne	.+16     	; 0x1b1e <malloc+0xca>
    1b0e:	20 91 02 01 	lds	r18, 0x0102
    1b12:	30 91 03 01 	lds	r19, 0x0103
    1b16:	30 93 c6 07 	sts	0x07C6, r19
    1b1a:	20 93 c5 07 	sts	0x07C5, r18
    1b1e:	20 91 00 01 	lds	r18, 0x0100
    1b22:	30 91 01 01 	lds	r19, 0x0101
    1b26:	21 15       	cp	r18, r1
    1b28:	31 05       	cpc	r19, r1
    1b2a:	41 f4       	brne	.+16     	; 0x1b3c <malloc+0xe8>
    1b2c:	2d b7       	in	r18, 0x3d	; 61
    1b2e:	3e b7       	in	r19, 0x3e	; 62
    1b30:	40 91 04 01 	lds	r20, 0x0104
    1b34:	50 91 05 01 	lds	r21, 0x0105
    1b38:	24 1b       	sub	r18, r20
    1b3a:	35 0b       	sbc	r19, r21
    1b3c:	e0 91 c5 07 	lds	r30, 0x07C5
    1b40:	f0 91 c6 07 	lds	r31, 0x07C6
    1b44:	e2 17       	cp	r30, r18
    1b46:	f3 07       	cpc	r31, r19
    1b48:	a0 f4       	brcc	.+40     	; 0x1b72 <malloc+0x11e>
    1b4a:	2e 1b       	sub	r18, r30
    1b4c:	3f 0b       	sbc	r19, r31
    1b4e:	28 17       	cp	r18, r24
    1b50:	39 07       	cpc	r19, r25
    1b52:	78 f0       	brcs	.+30     	; 0x1b72 <malloc+0x11e>
    1b54:	ac 01       	movw	r20, r24
    1b56:	4e 5f       	subi	r20, 0xFE	; 254
    1b58:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5a:	24 17       	cp	r18, r20
    1b5c:	35 07       	cpc	r19, r21
    1b5e:	48 f0       	brcs	.+18     	; 0x1b72 <malloc+0x11e>
    1b60:	4e 0f       	add	r20, r30
    1b62:	5f 1f       	adc	r21, r31
    1b64:	50 93 c6 07 	sts	0x07C6, r21
    1b68:	40 93 c5 07 	sts	0x07C5, r20
    1b6c:	81 93       	st	Z+, r24
    1b6e:	91 93       	st	Z+, r25
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <malloc+0x122>
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	cf 01       	movw	r24, r30
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	08 95       	ret

00001b7e <free>:
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <free+0xe>
    1b8a:	8c c0       	rjmp	.+280    	; 0x1ca4 <free+0x126>
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	32 97       	sbiw	r30, 0x02	; 2
    1b90:	13 82       	std	Z+3, r1	; 0x03
    1b92:	12 82       	std	Z+2, r1	; 0x02
    1b94:	00 91 c7 07 	lds	r16, 0x07C7
    1b98:	10 91 c8 07 	lds	r17, 0x07C8
    1b9c:	01 15       	cp	r16, r1
    1b9e:	11 05       	cpc	r17, r1
    1ba0:	81 f4       	brne	.+32     	; 0x1bc2 <free+0x44>
    1ba2:	20 81       	ld	r18, Z
    1ba4:	31 81       	ldd	r19, Z+1	; 0x01
    1ba6:	82 0f       	add	r24, r18
    1ba8:	93 1f       	adc	r25, r19
    1baa:	20 91 c5 07 	lds	r18, 0x07C5
    1bae:	30 91 c6 07 	lds	r19, 0x07C6
    1bb2:	28 17       	cp	r18, r24
    1bb4:	39 07       	cpc	r19, r25
    1bb6:	79 f5       	brne	.+94     	; 0x1c16 <free+0x98>
    1bb8:	f0 93 c6 07 	sts	0x07C6, r31
    1bbc:	e0 93 c5 07 	sts	0x07C5, r30
    1bc0:	71 c0       	rjmp	.+226    	; 0x1ca4 <free+0x126>
    1bc2:	d8 01       	movw	r26, r16
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	50 e0       	ldi	r21, 0x00	; 0
    1bc8:	ae 17       	cp	r26, r30
    1bca:	bf 07       	cpc	r27, r31
    1bcc:	50 f4       	brcc	.+20     	; 0x1be2 <free+0x64>
    1bce:	12 96       	adiw	r26, 0x02	; 2
    1bd0:	2d 91       	ld	r18, X+
    1bd2:	3c 91       	ld	r19, X
    1bd4:	13 97       	sbiw	r26, 0x03	; 3
    1bd6:	ad 01       	movw	r20, r26
    1bd8:	21 15       	cp	r18, r1
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f1       	breq	.+66     	; 0x1c20 <free+0xa2>
    1bde:	d9 01       	movw	r26, r18
    1be0:	f3 cf       	rjmp	.-26     	; 0x1bc8 <free+0x4a>
    1be2:	9d 01       	movw	r18, r26
    1be4:	da 01       	movw	r26, r20
    1be6:	33 83       	std	Z+3, r19	; 0x03
    1be8:	22 83       	std	Z+2, r18	; 0x02
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	86 0f       	add	r24, r22
    1bf0:	97 1f       	adc	r25, r23
    1bf2:	82 17       	cp	r24, r18
    1bf4:	93 07       	cpc	r25, r19
    1bf6:	69 f4       	brne	.+26     	; 0x1c12 <free+0x94>
    1bf8:	ec 01       	movw	r28, r24
    1bfa:	28 81       	ld	r18, Y
    1bfc:	39 81       	ldd	r19, Y+1	; 0x01
    1bfe:	26 0f       	add	r18, r22
    1c00:	37 1f       	adc	r19, r23
    1c02:	2e 5f       	subi	r18, 0xFE	; 254
    1c04:	3f 4f       	sbci	r19, 0xFF	; 255
    1c06:	31 83       	std	Z+1, r19	; 0x01
    1c08:	20 83       	st	Z, r18
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	93 83       	std	Z+3, r25	; 0x03
    1c10:	82 83       	std	Z+2, r24	; 0x02
    1c12:	45 2b       	or	r20, r21
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <free+0xa2>
    1c16:	f0 93 c8 07 	sts	0x07C8, r31
    1c1a:	e0 93 c7 07 	sts	0x07C7, r30
    1c1e:	42 c0       	rjmp	.+132    	; 0x1ca4 <free+0x126>
    1c20:	13 96       	adiw	r26, 0x03	; 3
    1c22:	fc 93       	st	X, r31
    1c24:	ee 93       	st	-X, r30
    1c26:	12 97       	sbiw	r26, 0x02	; 2
    1c28:	ed 01       	movw	r28, r26
    1c2a:	49 91       	ld	r20, Y+
    1c2c:	59 91       	ld	r21, Y+
    1c2e:	9e 01       	movw	r18, r28
    1c30:	24 0f       	add	r18, r20
    1c32:	35 1f       	adc	r19, r21
    1c34:	e2 17       	cp	r30, r18
    1c36:	f3 07       	cpc	r31, r19
    1c38:	71 f4       	brne	.+28     	; 0x1c56 <free+0xd8>
    1c3a:	80 81       	ld	r24, Z
    1c3c:	91 81       	ldd	r25, Z+1	; 0x01
    1c3e:	84 0f       	add	r24, r20
    1c40:	95 1f       	adc	r25, r21
    1c42:	02 96       	adiw	r24, 0x02	; 2
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	9c 93       	st	X, r25
    1c48:	8e 93       	st	-X, r24
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	13 96       	adiw	r26, 0x03	; 3
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
    1c54:	12 97       	sbiw	r26, 0x02	; 2
    1c56:	e0 e0       	ldi	r30, 0x00	; 0
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	d8 01       	movw	r26, r16
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	8d 91       	ld	r24, X+
    1c60:	9c 91       	ld	r25, X
    1c62:	13 97       	sbiw	r26, 0x03	; 3
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	19 f0       	breq	.+6      	; 0x1c6e <free+0xf0>
    1c68:	f8 01       	movw	r30, r16
    1c6a:	8c 01       	movw	r16, r24
    1c6c:	f6 cf       	rjmp	.-20     	; 0x1c5a <free+0xdc>
    1c6e:	8d 91       	ld	r24, X+
    1c70:	9c 91       	ld	r25, X
    1c72:	98 01       	movw	r18, r16
    1c74:	2e 5f       	subi	r18, 0xFE	; 254
    1c76:	3f 4f       	sbci	r19, 0xFF	; 255
    1c78:	82 0f       	add	r24, r18
    1c7a:	93 1f       	adc	r25, r19
    1c7c:	20 91 c5 07 	lds	r18, 0x07C5
    1c80:	30 91 c6 07 	lds	r19, 0x07C6
    1c84:	28 17       	cp	r18, r24
    1c86:	39 07       	cpc	r19, r25
    1c88:	69 f4       	brne	.+26     	; 0x1ca4 <free+0x126>
    1c8a:	30 97       	sbiw	r30, 0x00	; 0
    1c8c:	29 f4       	brne	.+10     	; 0x1c98 <free+0x11a>
    1c8e:	10 92 c8 07 	sts	0x07C8, r1
    1c92:	10 92 c7 07 	sts	0x07C7, r1
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <free+0x11e>
    1c98:	13 82       	std	Z+3, r1	; 0x03
    1c9a:	12 82       	std	Z+2, r1	; 0x02
    1c9c:	10 93 c6 07 	sts	0x07C6, r17
    1ca0:	00 93 c5 07 	sts	0x07C5, r16
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <memset>:
    1cae:	dc 01       	movw	r26, r24
    1cb0:	01 c0       	rjmp	.+2      	; 0x1cb4 <memset+0x6>
    1cb2:	6d 93       	st	X+, r22
    1cb4:	41 50       	subi	r20, 0x01	; 1
    1cb6:	50 40       	sbci	r21, 0x00	; 0
    1cb8:	e0 f7       	brcc	.-8      	; 0x1cb2 <memset+0x4>
    1cba:	08 95       	ret

00001cbc <strncpy>:
    1cbc:	fb 01       	movw	r30, r22
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	41 50       	subi	r20, 0x01	; 1
    1cc2:	50 40       	sbci	r21, 0x00	; 0
    1cc4:	48 f0       	brcs	.+18     	; 0x1cd8 <strncpy+0x1c>
    1cc6:	01 90       	ld	r0, Z+
    1cc8:	0d 92       	st	X+, r0
    1cca:	00 20       	and	r0, r0
    1ccc:	c9 f7       	brne	.-14     	; 0x1cc0 <strncpy+0x4>
    1cce:	01 c0       	rjmp	.+2      	; 0x1cd2 <strncpy+0x16>
    1cd0:	1d 92       	st	X+, r1
    1cd2:	41 50       	subi	r20, 0x01	; 1
    1cd4:	50 40       	sbci	r21, 0x00	; 0
    1cd6:	e0 f7       	brcc	.-8      	; 0x1cd0 <strncpy+0x14>
    1cd8:	08 95       	ret

00001cda <_exit>:
    1cda:	f8 94       	cli

00001cdc <__stop_program>:
    1cdc:	ff cf       	rjmp	.-2      	; 0x1cdc <__stop_program>
