
122a_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000020ee  00002182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000674  00800182  00800182  00002204  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028c3  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8c  00000000  00000000  00004dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b43  00000000  00000000  00005853  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e8  00000000  00000000  00007398  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5d  00000000  00000000  00007a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a6  00000000  00000000  000087dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000a083  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_13>
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c2       	rjmp	.+1198   	; 0x4fc <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 38       	cpi	r26, 0x82	; 130
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	a2 e8       	ldi	r26, 0x82	; 130
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3f       	cpi	r26, 0xF6	; 246
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 a6 08 	call	0x114c	; 0x114c <main>
      c6:	0c 94 75 10 	jmp	0x20ea	; 0x20ea <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d6:	20 91 82 01 	lds	r18, 0x0182
      da:	30 91 83 01 	lds	r19, 0x0183
      de:	ce 01       	movw	r24, r28
      e0:	82 0f       	add	r24, r18
      e2:	93 1f       	adc	r25, r19
      e4:	8c 3d       	cpi	r24, 0xDC	; 220
      e6:	45 e0       	ldi	r20, 0x05	; 5
      e8:	94 07       	cpc	r25, r20
      ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x36>
      ec:	28 17       	cp	r18, r24
      ee:	39 07       	cpc	r19, r25
      f0:	58 f4       	brcc	.+22     	; 0x108 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f2:	e9 01       	movw	r28, r18
      f4:	cc 57       	subi	r28, 0x7C	; 124
      f6:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f8:	90 93 83 01 	sts	0x0183, r25
      fc:	80 93 82 01 	sts	0x0182, r24
     100:	05 c0       	rjmp	.+10     	; 0x10c <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <pvPortMalloc+0x40>
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10c:	0e 94 3e 0c 	call	0x187c	; 0x187c <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     110:	ce 01       	movw	r24, r28
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     118:	08 95       	ret

0000011a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     11a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11c:	03 96       	adiw	r24, 0x03	; 3
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	34 83       	std	Z+4, r19	; 0x04
     128:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     12a:	96 83       	std	Z+6, r25	; 0x06
     12c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12e:	90 87       	std	Z+8, r25	; 0x08
     130:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     132:	10 82       	st	Z, r1
     134:	08 95       	ret

00000136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     136:	fc 01       	movw	r30, r24
     138:	11 86       	std	Z+9, r1	; 0x09
     13a:	10 86       	std	Z+8, r1	; 0x08
     13c:	08 95       	ret

0000013e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     14a:	e9 01       	movw	r28, r18
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
     150:	13 96       	adiw	r26, 0x03	; 3
     152:	9c 93       	st	X, r25
     154:	8e 93       	st	-X, r24
     156:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	15 96       	adiw	r26, 0x05	; 5
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	ec 01       	movw	r28, r24
     16a:	7d 83       	std	Y+5, r23	; 0x05
     16c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16e:	e9 01       	movw	r28, r18
     170:	7b 83       	std	Y+3, r23	; 0x03
     172:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     174:	72 83       	std	Z+2, r23	; 0x02
     176:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	fc 93       	st	X, r31
     17c:	ee 93       	st	-X, r30
     17e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     180:	80 81       	ld	r24, Z
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 83       	st	Z, r24
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     196:	4f 3f       	cpi	r20, 0xFF	; 255
     198:	2f ef       	ldi	r18, 0xFF	; 255
     19a:	52 07       	cpc	r21, r18
     19c:	31 f4       	brne	.+12     	; 0x1aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19e:	dc 01       	movw	r26, r24
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	18 97       	sbiw	r26, 0x08	; 8
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1aa:	fc 01       	movw	r30, r24
     1ac:	33 96       	adiw	r30, 0x03	; 3
     1ae:	dc 01       	movw	r26, r24
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	d9 01       	movw	r26, r18
     1ba:	2d 91       	ld	r18, X+
     1bc:	3c 91       	ld	r19, X
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	50 f0       	brcs	.+20     	; 0x1d8 <vListInsert+0x4c>
     1c4:	02 80       	ldd	r0, Z+2	; 0x02
     1c6:	f3 81       	ldd	r31, Z+3	; 0x03
     1c8:	e0 2d       	mov	r30, r0
     1ca:	a2 81       	ldd	r26, Z+2	; 0x02
     1cc:	b3 81       	ldd	r27, Z+3	; 0x03
     1ce:	2d 91       	ld	r18, X+
     1d0:	3c 91       	ld	r19, X
     1d2:	42 17       	cp	r20, r18
     1d4:	53 07       	cpc	r21, r19
     1d6:	b0 f7       	brcc	.-20     	; 0x1c4 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d8:	a2 81       	ldd	r26, Z+2	; 0x02
     1da:	b3 81       	ldd	r27, Z+3	; 0x03
     1dc:	bb 83       	std	Y+3, r27	; 0x03
     1de:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e0:	15 96       	adiw	r26, 0x05	; 5
     1e2:	dc 93       	st	X, r29
     1e4:	ce 93       	st	-X, r28
     1e6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	fd 83       	std	Y+5, r31	; 0x05
     1ea:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	d3 83       	std	Z+3, r29	; 0x03
     1ee:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f0:	99 87       	std	Y+9, r25	; 0x09
     1f2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	20 83       	st	Z, r18
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     202:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     204:	a2 81       	ldd	r26, Z+2	; 0x02
     206:	b3 81       	ldd	r27, Z+3	; 0x03
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	15 96       	adiw	r26, 0x05	; 5
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24
     212:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     214:	a4 81       	ldd	r26, Z+4	; 0x04
     216:	b5 81       	ldd	r27, Z+5	; 0x05
     218:	82 81       	ldd	r24, Z+2	; 0x02
     21a:	93 81       	ldd	r25, Z+3	; 0x03
     21c:	13 96       	adiw	r26, 0x03	; 3
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24
     222:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     224:	a0 85       	ldd	r26, Z+8	; 0x08
     226:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8d 91       	ld	r24, X+
     22c:	9c 91       	ld	r25, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
     230:	8e 17       	cp	r24, r30
     232:	9f 07       	cpc	r25, r31
     234:	31 f4       	brne	.+12     	; 0x242 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     236:	84 81       	ldd	r24, Z+4	; 0x04
     238:	95 81       	ldd	r25, Z+5	; 0x05
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     242:	11 86       	std	Z+9, r1	; 0x09
     244:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     246:	8c 91       	ld	r24, X
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

0000024e <joystickInit>:
#define BUTBUS PINA
#define BUTPIN 5
enum ButState {BINIT, BWAIT, BPRESSED, BPWAIT} but_state;

void But_Init() {
	but_state = BINIT;
     24e:	ea e7       	ldi	r30, 0x7A	; 122
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 6c       	ori	r24, 0xC0	; 192
     256:	80 83       	st	Z, r24
     258:	10 92 ea 07 	sts	0x07EA, r1
     25c:	10 92 e9 07 	sts	0x07E9, r1
     260:	10 92 e4 07 	sts	0x07E4, r1
     264:	10 92 e3 07 	sts	0x07E3, r1
     268:	08 95       	ret

0000026a <joystickSample>:
     26a:	2f 92       	push	r2
     26c:	3f 92       	push	r3
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	61 97       	sbiw	r28, 0x11	; 17
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	80 83       	st	Z, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	86 fd       	sbrc	r24, 6
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <joystickSample+0x3e>
     2ae:	80 91 78 00 	lds	r24, 0x0078
     2b2:	90 91 79 00 	lds	r25, 0x0079
     2b6:	90 93 ea 07 	sts	0x07EA, r25
     2ba:	80 93 e9 07 	sts	0x07E9, r24
     2be:	ec e7       	ldi	r30, 0x7C	; 124
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <joystickSample+0x68>
     2d8:	80 91 78 00 	lds	r24, 0x0078
     2dc:	90 91 79 00 	lds	r25, 0x0079
     2e0:	90 93 e4 07 	sts	0x07E4, r25
     2e4:	80 93 e3 07 	sts	0x07E3, r24
     2e8:	ec e7       	ldi	r30, 0x7C	; 124
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8e 7f       	andi	r24, 0xFE	; 254
     2f0:	80 83       	st	Z, r24
     2f2:	40 90 e9 07 	lds	r4, 0x07E9
     2f6:	50 90 ea 07 	lds	r5, 0x07EA
     2fa:	20 ef       	ldi	r18, 0xF0	; 240
     2fc:	42 1a       	sub	r4, r18
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	52 0a       	sbc	r5, r18
     302:	50 92 ea 07 	sts	0x07EA, r5
     306:	40 92 e9 07 	sts	0x07E9, r4
     30a:	60 90 e3 07 	lds	r6, 0x07E3
     30e:	70 90 e4 07 	lds	r7, 0x07E4
     312:	3c e0       	ldi	r19, 0x0C	; 12
     314:	63 1a       	sub	r6, r19
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	73 0a       	sbc	r7, r19
     31a:	70 92 e4 07 	sts	0x07E4, r7
     31e:	60 92 e3 07 	sts	0x07E3, r6
     322:	95 2d       	mov	r25, r5
     324:	99 0f       	add	r25, r25
     326:	99 0b       	sbc	r25, r25
     328:	97 2c       	mov	r9, r7
     32a:	99 0c       	add	r9, r9
     32c:	99 08       	sbc	r9, r9
     32e:	a4 2c       	mov	r10, r4
     330:	b5 2c       	mov	r11, r5
     332:	c9 2e       	mov	r12, r25
     334:	d9 2e       	mov	r13, r25
     336:	e9 2e       	mov	r14, r25
     338:	f9 2e       	mov	r15, r25
     33a:	09 2f       	mov	r16, r25
     33c:	19 2f       	mov	r17, r25
     33e:	24 2d       	mov	r18, r4
     340:	35 2d       	mov	r19, r5
     342:	49 2f       	mov	r20, r25
     344:	59 2f       	mov	r21, r25
     346:	69 2f       	mov	r22, r25
     348:	79 2f       	mov	r23, r25
     34a:	89 2f       	mov	r24, r25
     34c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__muldi3>
     350:	22 2e       	mov	r2, r18
     352:	33 2e       	mov	r3, r19
     354:	84 2e       	mov	r8, r20
     356:	5d 87       	std	Y+13, r21	; 0x0d
     358:	6e 87       	std	Y+14, r22	; 0x0e
     35a:	7f 87       	std	Y+15, r23	; 0x0f
     35c:	88 8b       	std	Y+16, r24	; 0x10
     35e:	99 8b       	std	Y+17, r25	; 0x11
     360:	a6 2c       	mov	r10, r6
     362:	b7 2c       	mov	r11, r7
     364:	c9 2c       	mov	r12, r9
     366:	d9 2c       	mov	r13, r9
     368:	e9 2c       	mov	r14, r9
     36a:	f9 2c       	mov	r15, r9
     36c:	09 2d       	mov	r16, r9
     36e:	19 2d       	mov	r17, r9
     370:	26 2d       	mov	r18, r6
     372:	37 2d       	mov	r19, r7
     374:	49 2d       	mov	r20, r9
     376:	59 2d       	mov	r21, r9
     378:	69 2d       	mov	r22, r9
     37a:	79 2d       	mov	r23, r9
     37c:	89 2d       	mov	r24, r9
     37e:	99 2d       	mov	r25, r9
     380:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__muldi3>
     384:	a2 2e       	mov	r10, r18
     386:	b3 2e       	mov	r11, r19
     388:	c4 2e       	mov	r12, r20
     38a:	d5 2e       	mov	r13, r21
     38c:	e6 2e       	mov	r14, r22
     38e:	f7 2e       	mov	r15, r23
     390:	08 2f       	mov	r16, r24
     392:	19 2f       	mov	r17, r25
     394:	22 2d       	mov	r18, r2
     396:	33 2d       	mov	r19, r3
     398:	48 2d       	mov	r20, r8
     39a:	5d 85       	ldd	r21, Y+13	; 0x0d
     39c:	6e 85       	ldd	r22, Y+14	; 0x0e
     39e:	7f 85       	ldd	r23, Y+15	; 0x0f
     3a0:	88 89       	ldd	r24, Y+16	; 0x10
     3a2:	99 89       	ldd	r25, Y+17	; 0x11
     3a4:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <__adddi3>
     3a8:	2f 3f       	cpi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	41 05       	cpc	r20, r1
     3ae:	51 05       	cpc	r21, r1
     3b0:	61 05       	cpc	r22, r1
     3b2:	71 05       	cpc	r23, r1
     3b4:	81 05       	cpc	r24, r1
     3b6:	91 05       	cpc	r25, r1
     3b8:	09 f0       	breq	.+2      	; 0x3bc <joystickSample+0x152>
     3ba:	1c f4       	brge	.+6      	; 0x3c2 <joystickSample+0x158>
     3bc:	10 92 ef 07 	sts	0x07EF, r1
     3c0:	35 c0       	rjmp	.+106    	; 0x42c <joystickSample+0x1c2>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	8c 83       	std	Y+4, r24	; 0x04
     3d2:	5e 82       	std	Y+6, r5	; 0x06
     3d4:	4d 82       	std	Y+5, r4	; 0x05
     3d6:	51 94       	neg	r5
     3d8:	41 94       	neg	r4
     3da:	51 08       	sbc	r5, r1
     3dc:	58 86       	std	Y+8, r5	; 0x08
     3de:	4f 82       	std	Y+7, r4	; 0x07
     3e0:	7a 86       	std	Y+10, r7	; 0x0a
     3e2:	69 86       	std	Y+9, r6	; 0x09
     3e4:	71 94       	neg	r7
     3e6:	61 94       	neg	r6
     3e8:	71 08       	sbc	r7, r1
     3ea:	7c 86       	std	Y+12, r7	; 0x0c
     3ec:	6b 86       	std	Y+11, r6	; 0x0b
     3ee:	de 01       	movw	r26, r28
     3f0:	17 96       	adiw	r26, 0x07	; 7
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	4d 91       	ld	r20, X+
     3f8:	5d 91       	ld	r21, X+
     3fa:	e9 2f       	mov	r30, r25
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	2c 0f       	add	r18, r28
     408:	3d 1f       	adc	r19, r29
     40a:	e2 0f       	add	r30, r18
     40c:	f3 1f       	adc	r31, r19
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	24 17       	cp	r18, r20
     414:	35 07       	cpc	r19, r21
     416:	0c f4       	brge	.+2      	; 0x41a <joystickSample+0x1b0>
     418:	98 2f       	mov	r25, r24
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	84 30       	cpi	r24, 0x04	; 4
     41e:	59 f7       	brne	.-42     	; 0x3f6 <joystickSample+0x18c>
     420:	fe 01       	movw	r30, r28
     422:	e9 0f       	add	r30, r25
     424:	f1 1d       	adc	r31, r1
     426:	81 81       	ldd	r24, Z+1	; 0x01
     428:	80 93 ef 07 	sts	0x07EF, r24
     42c:	61 96       	adiw	r28, 0x11	; 17
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	08 95       	ret

0000045e <QueueInit>:
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <malloc>
     46e:	ec 01       	movw	r28, r24
     470:	81 2f       	mov	r24, r17
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <malloc>
     478:	99 83       	std	Y+1, r25	; 0x01
     47a:	88 83       	st	Y, r24
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	1b 82       	std	Y+3, r1	; 0x03
     480:	1c 82       	std	Y+4, r1	; 0x04
     482:	1d 83       	std	Y+5, r17	; 0x05
     484:	ce 01       	movw	r24, r28
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <QueueEnqueue>:
     48e:	fc 01       	movw	r30, r24
     490:	94 81       	ldd	r25, Z+4	; 0x04
     492:	85 81       	ldd	r24, Z+5	; 0x05
     494:	98 17       	cp	r25, r24
     496:	88 f4       	brcc	.+34     	; 0x4ba <QueueEnqueue+0x2c>
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	a0 81       	ld	r26, Z
     49c:	b1 81       	ldd	r27, Z+1	; 0x01
     49e:	a8 0f       	add	r26, r24
     4a0:	b1 1d       	adc	r27, r1
     4a2:	6c 93       	st	X, r22
     4a4:	83 81       	ldd	r24, Z+3	; 0x03
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	65 81       	ldd	r22, Z+5	; 0x05
     4aa:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__udivmodqi4>
     4ae:	93 83       	std	Z+3, r25	; 0x03
     4b0:	84 81       	ldd	r24, Z+4	; 0x04
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret

000004be <QueueDequeue>:
     4be:	fc 01       	movw	r30, r24
     4c0:	84 81       	ldd	r24, Z+4	; 0x04
     4c2:	88 23       	and	r24, r24
     4c4:	89 f0       	breq	.+34     	; 0x4e8 <QueueDequeue+0x2a>
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	a0 81       	ld	r26, Z
     4ca:	b1 81       	ldd	r27, Z+1	; 0x01
     4cc:	a8 0f       	add	r26, r24
     4ce:	b1 1d       	adc	r27, r1
     4d0:	2c 91       	ld	r18, X
     4d2:	1c 92       	st	X, r1
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	65 81       	ldd	r22, Z+5	; 0x05
     4da:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <__udivmodqi4>
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	84 81       	ldd	r24, Z+4	; 0x04
     4e2:	81 50       	subi	r24, 0x01	; 1
     4e4:	84 83       	std	Z+4, r24	; 0x04
     4e6:	82 2f       	mov	r24, r18
     4e8:	08 95       	ret

000004ea <SPI_ServantInit>:
     4ea:	80 e4       	ldi	r24, 0x40	; 64
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	8c b5       	in	r24, 0x2c	; 44
     4f0:	80 6c       	ori	r24, 0xC0	; 192
     4f2:	8c bd       	out	0x2c, r24	; 44
     4f4:	8f b7       	in	r24, 0x3f	; 63
     4f6:	80 68       	ori	r24, 0x80	; 128
     4f8:	8f bf       	out	0x3f, r24	; 63
     4fa:	08 95       	ret

000004fc <__vector_19>:
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	8f 93       	push	r24
     508:	8e b5       	in	r24, 0x2e	; 46
     50a:	80 93 47 01 	sts	0x0147, r24
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <transmit_data>:
     51a:	43 9a       	sbi	0x08, 3	; 8
     51c:	41 98       	cbi	0x08, 1	; 8
     51e:	38 e0       	ldi	r19, 0x08	; 8
     520:	43 9a       	sbi	0x08, 3	; 8
     522:	42 98       	cbi	0x08, 2	; 8
     524:	98 b1       	in	r25, 0x08	; 8
     526:	88 23       	and	r24, r24
     528:	14 f4       	brge	.+4      	; 0x52e <transmit_data+0x14>
     52a:	91 60       	ori	r25, 0x01	; 1
     52c:	01 c0       	rjmp	.+2      	; 0x530 <transmit_data+0x16>
     52e:	9e 7f       	andi	r25, 0xFE	; 254
     530:	98 b9       	out	0x08, r25	; 8
     532:	98 b1       	in	r25, 0x08	; 8
     534:	66 23       	and	r22, r22
     536:	14 f4       	brge	.+4      	; 0x53c <transmit_data+0x22>
     538:	90 61       	ori	r25, 0x10	; 16
     53a:	01 c0       	rjmp	.+2      	; 0x53e <transmit_data+0x24>
     53c:	9f 7e       	andi	r25, 0xEF	; 239
     53e:	98 b9       	out	0x08, r25	; 8
     540:	98 b1       	in	r25, 0x08	; 8
     542:	44 23       	and	r20, r20
     544:	14 f4       	brge	.+4      	; 0x54a <transmit_data+0x30>
     546:	90 62       	ori	r25, 0x20	; 32
     548:	01 c0       	rjmp	.+2      	; 0x54c <transmit_data+0x32>
     54a:	9f 7d       	andi	r25, 0xDF	; 223
     54c:	98 b9       	out	0x08, r25	; 8
     54e:	98 b1       	in	r25, 0x08	; 8
     550:	22 23       	and	r18, r18
     552:	14 f4       	brge	.+4      	; 0x558 <transmit_data+0x3e>
     554:	90 64       	ori	r25, 0x40	; 64
     556:	01 c0       	rjmp	.+2      	; 0x55a <transmit_data+0x40>
     558:	9f 7b       	andi	r25, 0xBF	; 191
     55a:	98 b9       	out	0x08, r25	; 8
     55c:	88 0f       	add	r24, r24
     55e:	66 0f       	add	r22, r22
     560:	44 0f       	add	r20, r20
     562:	22 0f       	add	r18, r18
     564:	42 9a       	sbi	0x08, 2	; 8
     566:	31 50       	subi	r19, 0x01	; 1
     568:	d9 f6       	brne	.-74     	; 0x520 <transmit_data+0x6>
     56a:	41 9a       	sbi	0x08, 1	; 8
     56c:	08 95       	ret

0000056e <Shift_Tick>:
     56e:	80 91 eb 07 	lds	r24, 0x07EB
     572:	81 11       	cpse	r24, r1
     574:	09 c0       	rjmp	.+18     	; 0x588 <Shift_Tick+0x1a>
     576:	20 91 83 07 	lds	r18, 0x0783
     57a:	40 91 84 07 	lds	r20, 0x0784
     57e:	60 91 85 07 	lds	r22, 0x0785
     582:	80 91 86 07 	lds	r24, 0x0786
     586:	c9 df       	rcall	.-110    	; 0x51a <transmit_data>
     588:	80 91 eb 07 	lds	r24, 0x07EB
     58c:	81 11       	cpse	r24, r1
     58e:	10 92 eb 07 	sts	0x07EB, r1
     592:	08 95       	ret

00000594 <Shift_Task>:
     594:	10 92 eb 07 	sts	0x07EB, r1
     598:	ea df       	rcall	.-44     	; 0x56e <Shift_Tick>
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <vTaskDelay>
     5a2:	fa cf       	rjmp	.-12     	; 0x598 <Shift_Task+0x4>

000005a4 <Motor_Tick>:
     5a4:	2f 92       	push	r2
     5a6:	3f 92       	push	r3
     5a8:	4f 92       	push	r4
     5aa:	5f 92       	push	r5
     5ac:	6f 92       	push	r6
     5ae:	7f 92       	push	r7
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	2a 97       	sbiw	r28, 0x0a	; 10
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	80 91 e8 07 	lds	r24, 0x07E8
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	09 f0       	breq	.+2      	; 0x5e2 <Motor_Tick+0x3e>
     5e0:	03 c1       	rjmp	.+518    	; 0x7e8 <Motor_Tick+0x244>
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f3 e6       	ldi	r31, 0x63	; 99
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f7 e0       	ldi	r31, 0x07	; 7
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f3 e7       	ldi	r31, 0x73	; 115
     5f2:	8f 2e       	mov	r8, r31
     5f4:	f7 e0       	ldi	r31, 0x07	; 7
     5f6:	9f 2e       	mov	r9, r31
     5f8:	f0 2d       	mov	r31, r0
     5fa:	0f 2e       	mov	r0, r31
     5fc:	f7 e3       	ldi	r31, 0x37	; 55
     5fe:	2f 2e       	mov	r2, r31
     600:	f1 e0       	ldi	r31, 0x01	; 1
     602:	3f 2e       	mov	r3, r31
     604:	f0 2d       	mov	r31, r0
     606:	8b e3       	ldi	r24, 0x3B	; 59
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	0f e3       	ldi	r16, 0x3F	; 63
     610:	11 e0       	ldi	r17, 0x01	; 1
     612:	a7 e2       	ldi	r26, 0x27	; 39
     614:	b1 e0       	ldi	r27, 0x01	; 1
     616:	bc 83       	std	Y+4, r27	; 0x04
     618:	ab 83       	std	Y+3, r26	; 0x03
     61a:	aa 24       	eor	r10, r10
     61c:	a3 94       	inc	r10
     61e:	b1 2c       	mov	r11, r1
     620:	fa 86       	std	Y+10, r15	; 0x0a
     622:	e9 86       	std	Y+9, r14	; 0x09
     624:	98 86       	std	Y+8, r9	; 0x08
     626:	8f 82       	std	Y+7, r8	; 0x07
     628:	f4 01       	movw	r30, r8
     62a:	60 81       	ld	r22, Z
     62c:	71 81       	ldd	r23, Z+1	; 0x01
     62e:	82 81       	ldd	r24, Z+2	; 0x02
     630:	93 81       	ldd	r25, Z+3	; 0x03
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	44 e3       	ldi	r20, 0x34	; 52
     638:	54 e4       	ldi	r21, 0x44	; 68
     63a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <fmod>
     63e:	2b 01       	movw	r4, r22
     640:	3c 01       	movw	r6, r24
     642:	d4 01       	movw	r26, r8
     644:	6d 93       	st	X+, r22
     646:	7d 93       	st	X+, r23
     648:	8d 93       	st	X+, r24
     64a:	9c 93       	st	X, r25
     64c:	13 97       	sbiw	r26, 0x03	; 3
     64e:	e9 84       	ldd	r14, Y+9	; 0x09
     650:	fa 84       	ldd	r15, Y+10	; 0x0a
     652:	fe 82       	std	Y+6, r15	; 0x06
     654:	ed 82       	std	Y+5, r14	; 0x05
     656:	d7 01       	movw	r26, r14
     658:	6d 91       	ld	r22, X+
     65a:	7d 91       	ld	r23, X+
     65c:	8d 91       	ld	r24, X+
     65e:	9c 91       	ld	r25, X
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	44 e3       	ldi	r20, 0x34	; 52
     666:	54 e4       	ldi	r21, 0x44	; 68
     668:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <fmod>
     66c:	6b 01       	movw	r12, r22
     66e:	7c 01       	movw	r14, r24
     670:	e9 85       	ldd	r30, Y+9	; 0x09
     672:	fa 85       	ldd	r31, Y+10	; 0x0a
     674:	60 83       	st	Z, r22
     676:	71 83       	std	Z+1, r23	; 0x01
     678:	82 83       	std	Z+2, r24	; 0x02
     67a:	93 83       	std	Z+3, r25	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	a9 01       	movw	r20, r18
     682:	c3 01       	movw	r24, r6
     684:	b2 01       	movw	r22, r4
     686:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__cmpsf2>
     68a:	88 23       	and	r24, r24
     68c:	74 f4       	brge	.+28     	; 0x6aa <Motor_Tick+0x106>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	44 e3       	ldi	r20, 0x34	; 52
     694:	54 e4       	ldi	r21, 0x44	; 68
     696:	c3 01       	movw	r24, r6
     698:	b2 01       	movw	r22, r4
     69a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     69e:	d4 01       	movw	r26, r8
     6a0:	6d 93       	st	X+, r22
     6a2:	7d 93       	st	X+, r23
     6a4:	8d 93       	st	X+, r24
     6a6:	9c 93       	st	X, r25
     6a8:	13 97       	sbiw	r26, 0x03	; 3
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	a9 01       	movw	r20, r18
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__cmpsf2>
     6b8:	88 23       	and	r24, r24
     6ba:	0c f0       	brlt	.+2      	; 0x6be <Motor_Tick+0x11a>
     6bc:	9d c0       	rjmp	.+314    	; 0x7f8 <Motor_Tick+0x254>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	44 e3       	ldi	r20, 0x34	; 52
     6c4:	54 e4       	ldi	r21, 0x44	; 68
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     6ce:	ed 81       	ldd	r30, Y+5	; 0x05
     6d0:	fe 81       	ldd	r31, Y+6	; 0x06
     6d2:	60 83       	st	Z, r22
     6d4:	71 83       	std	Z+1, r23	; 0x01
     6d6:	82 83       	std	Z+2, r24	; 0x02
     6d8:	93 83       	std	Z+3, r25	; 0x03
     6da:	8e c0       	rjmp	.+284    	; 0x7f8 <Motor_Tick+0x254>
     6dc:	27 2f       	mov	r18, r23
     6de:	37 2d       	mov	r19, r7
     6e0:	d1 01       	movw	r26, r2
     6e2:	dc 90       	ld	r13, X
     6e4:	dc 01       	movw	r26, r24
     6e6:	64 e0       	ldi	r22, 0x04	; 4
     6e8:	d6 9e       	mul	r13, r22
     6ea:	a0 0d       	add	r26, r0
     6ec:	b1 1d       	adc	r27, r1
     6ee:	11 24       	eor	r1, r1
     6f0:	a9 5f       	subi	r26, 0xF9	; 249
     6f2:	be 4f       	sbci	r27, 0xFE	; 254
     6f4:	ac 91       	ld	r26, X
     6f6:	aa 23       	and	r26, r26
     6f8:	79 f0       	breq	.+30     	; 0x718 <Motor_Tick+0x174>
     6fa:	d8 01       	movw	r26, r16
     6fc:	ed 90       	ld	r14, X+
     6fe:	fc 90       	ld	r15, X
     700:	65 01       	movw	r12, r10
     702:	00 80       	ld	r0, Z
     704:	02 c0       	rjmp	.+4      	; 0x70a <Motor_Tick+0x166>
     706:	cc 0c       	add	r12, r12
     708:	dd 1c       	adc	r13, r13
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <Motor_Tick+0x162>
     70e:	d7 01       	movw	r26, r14
     710:	6c 91       	ld	r22, X
     712:	c6 2a       	or	r12, r22
     714:	cc 92       	st	X, r12
     716:	10 c0       	rjmp	.+32     	; 0x738 <Motor_Tick+0x194>
     718:	d8 01       	movw	r26, r16
     71a:	ed 90       	ld	r14, X+
     71c:	fc 90       	ld	r15, X
     71e:	d5 01       	movw	r26, r10
     720:	00 80       	ld	r0, Z
     722:	02 c0       	rjmp	.+4      	; 0x728 <Motor_Tick+0x184>
     724:	aa 0f       	add	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	0a 94       	dec	r0
     72a:	e2 f7       	brpl	.-8      	; 0x724 <Motor_Tick+0x180>
     72c:	6a 2f       	mov	r22, r26
     72e:	60 95       	com	r22
     730:	d7 01       	movw	r26, r14
     732:	dc 90       	ld	r13, X
     734:	6d 21       	and	r22, r13
     736:	6c 93       	st	X, r22
     738:	01 96       	adiw	r24, 0x01	; 1
     73a:	31 96       	adiw	r30, 0x01	; 1
     73c:	84 30       	cpi	r24, 0x04	; 4
     73e:	91 05       	cpc	r25, r1
     740:	69 f6       	brne	.-102    	; 0x6dc <Motor_Tick+0x138>
     742:	5a 87       	std	Y+10, r21	; 0x0a
     744:	49 87       	std	Y+9, r20	; 0x09
     746:	f9 01       	movw	r30, r18
     748:	a9 81       	ldd	r26, Y+1	; 0x01
     74a:	ba 81       	ldd	r27, Y+2	; 0x02
     74c:	8c 91       	ld	r24, X
     74e:	88 23       	and	r24, r24
     750:	09 f4       	brne	.+2      	; 0x754 <Motor_Tick+0x1b0>
     752:	6f c0       	rjmp	.+222    	; 0x832 <Motor_Tick+0x28e>
     754:	80 81       	ld	r24, Z
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	88 30       	cpi	r24, 0x08	; 8
     75a:	10 f4       	brcc	.+4      	; 0x760 <Motor_Tick+0x1bc>
     75c:	80 83       	st	Z, r24
     75e:	2a c0       	rjmp	.+84     	; 0x7b4 <Motor_Tick+0x210>
     760:	10 82       	st	Z, r1
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	44 e3       	ldi	r20, 0x34	; 52
     768:	5f e3       	ldi	r21, 0x3F	; 63
     76a:	ed 81       	ldd	r30, Y+5	; 0x05
     76c:	fe 81       	ldd	r31, Y+6	; 0x06
     76e:	60 81       	ld	r22, Z
     770:	71 81       	ldd	r23, Z+1	; 0x01
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	93 81       	ldd	r25, Z+3	; 0x03
     776:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     77a:	ad 81       	ldd	r26, Y+5	; 0x05
     77c:	be 81       	ldd	r27, Y+6	; 0x06
     77e:	6d 93       	st	X+, r22
     780:	7d 93       	st	X+, r23
     782:	8d 93       	st	X+, r24
     784:	9c 93       	st	X, r25
     786:	13 97       	sbiw	r26, 0x03	; 3
     788:	15 c0       	rjmp	.+42     	; 0x7b4 <Motor_Tick+0x210>
     78a:	b7 e0       	ldi	r27, 0x07	; 7
     78c:	b0 83       	st	Z, r27
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	44 e3       	ldi	r20, 0x34	; 52
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	ed 81       	ldd	r30, Y+5	; 0x05
     798:	fe 81       	ldd	r31, Y+6	; 0x06
     79a:	60 81       	ld	r22, Z
     79c:	71 81       	ldd	r23, Z+1	; 0x01
     79e:	82 81       	ldd	r24, Z+2	; 0x02
     7a0:	93 81       	ldd	r25, Z+3	; 0x03
     7a2:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__subsf3>
     7a6:	ad 81       	ldd	r26, Y+5	; 0x05
     7a8:	be 81       	ldd	r27, Y+6	; 0x06
     7aa:	6d 93       	st	X+, r22
     7ac:	7d 93       	st	X+, r23
     7ae:	8d 93       	st	X+, r24
     7b0:	9c 93       	st	X, r25
     7b2:	13 97       	sbiw	r26, 0x03	; 3
     7b4:	e9 85       	ldd	r30, Y+9	; 0x09
     7b6:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b8:	34 96       	adiw	r30, 0x04	; 4
     7ba:	fa 87       	std	Y+10, r31	; 0x0a
     7bc:	e9 87       	std	Y+9, r30	; 0x09
     7be:	ff ef       	ldi	r31, 0xFF	; 255
     7c0:	2f 1a       	sub	r2, r31
     7c2:	3f 0a       	sbc	r3, r31
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	9a 83       	std	Y+2, r25	; 0x02
     7cc:	89 83       	std	Y+1, r24	; 0x01
     7ce:	0e 5f       	subi	r16, 0xFE	; 254
     7d0:	1f 4f       	sbci	r17, 0xFF	; 255
     7d2:	ab 81       	ldd	r26, Y+3	; 0x03
     7d4:	bc 81       	ldd	r27, Y+4	; 0x04
     7d6:	14 96       	adiw	r26, 0x04	; 4
     7d8:	bc 83       	std	Y+4, r27	; 0x04
     7da:	ab 83       	std	Y+3, r26	; 0x03
     7dc:	e9 85       	ldd	r30, Y+9	; 0x09
     7de:	fa 85       	ldd	r31, Y+10	; 0x0a
     7e0:	e3 57       	subi	r30, 0x73	; 115
     7e2:	f7 40       	sbci	r31, 0x07	; 7
     7e4:	09 f0       	breq	.+2      	; 0x7e8 <Motor_Tick+0x244>
     7e6:	1e cf       	rjmp	.-452    	; 0x624 <Motor_Tick+0x80>
     7e8:	80 91 e8 07 	lds	r24, 0x07E8
     7ec:	81 11       	cpse	r24, r1
     7ee:	28 c0       	rjmp	.+80     	; 0x840 <Motor_Tick+0x29c>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	80 93 e8 07 	sts	0x07E8, r24
     7f6:	24 c0       	rjmp	.+72     	; 0x840 <Motor_Tick+0x29c>
     7f8:	64 e0       	ldi	r22, 0x04	; 4
     7fa:	86 0e       	add	r8, r22
     7fc:	91 1c       	adc	r9, r1
     7fe:	ad 81       	ldd	r26, Y+5	; 0x05
     800:	be 81       	ldd	r27, Y+6	; 0x06
     802:	2d 91       	ld	r18, X+
     804:	3d 91       	ld	r19, X+
     806:	4d 91       	ld	r20, X+
     808:	5c 91       	ld	r21, X
     80a:	ef 81       	ldd	r30, Y+7	; 0x07
     80c:	f8 85       	ldd	r31, Y+8	; 0x08
     80e:	60 81       	ld	r22, Z
     810:	71 81       	ldd	r23, Z+1	; 0x01
     812:	82 81       	ldd	r24, Z+2	; 0x02
     814:	93 81       	ldd	r25, Z+3	; 0x03
     816:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <__cmpsf2>
     81a:	88 23       	and	r24, r24
     81c:	59 f2       	breq	.-106    	; 0x7b4 <Motor_Tick+0x210>
     81e:	4b 81       	ldd	r20, Y+3	; 0x03
     820:	5c 81       	ldd	r21, Y+4	; 0x04
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	72 2d       	mov	r23, r2
     828:	fa 01       	movw	r30, r20
     82a:	49 85       	ldd	r20, Y+9	; 0x09
     82c:	5a 85       	ldd	r21, Y+10	; 0x0a
     82e:	73 2c       	mov	r7, r3
     830:	55 cf       	rjmp	.-342    	; 0x6dc <Motor_Tick+0x138>
     832:	80 81       	ld	r24, Z
     834:	88 23       	and	r24, r24
     836:	09 f4       	brne	.+2      	; 0x83a <Motor_Tick+0x296>
     838:	a8 cf       	rjmp	.-176    	; 0x78a <Motor_Tick+0x1e6>
     83a:	81 50       	subi	r24, 0x01	; 1
     83c:	80 83       	st	Z, r24
     83e:	ba cf       	rjmp	.-140    	; 0x7b4 <Motor_Tick+0x210>
     840:	2a 96       	adiw	r28, 0x0a	; 10
     842:	0f b6       	in	r0, 0x3f	; 63
     844:	f8 94       	cli
     846:	de bf       	out	0x3e, r29	; 62
     848:	0f be       	out	0x3f, r0	; 63
     84a:	cd bf       	out	0x3d, r28	; 61
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	ff 90       	pop	r15
     856:	ef 90       	pop	r14
     858:	df 90       	pop	r13
     85a:	cf 90       	pop	r12
     85c:	bf 90       	pop	r11
     85e:	af 90       	pop	r10
     860:	9f 90       	pop	r9
     862:	8f 90       	pop	r8
     864:	7f 90       	pop	r7
     866:	6f 90       	pop	r6
     868:	5f 90       	pop	r5
     86a:	4f 90       	pop	r4
     86c:	3f 90       	pop	r3
     86e:	2f 90       	pop	r2
     870:	08 95       	ret

00000872 <Motor_Task>:
     872:	10 92 e8 07 	sts	0x07E8, r1
     876:	96 de       	rcall	.-724    	; 0x5a4 <Motor_Tick>
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <vTaskDelay>
     880:	fa cf       	rjmp	.-12     	; 0x876 <Motor_Task+0x4>

00000882 <Move_Tick>:
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	80 91 ee 07 	lds	r24, 0x07EE
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	19 f0       	breq	.+6      	; 0x894 <Move_Tick+0x12>
     88e:	83 30       	cpi	r24, 0x03	; 3
     890:	79 f0       	breq	.+30     	; 0x8b0 <Move_Tick+0x2e>
     892:	1a c0       	rjmp	.+52     	; 0x8c8 <Move_Tick+0x46>
     894:	2b b1       	in	r18, 0x0b	; 11
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	00 90 06 01 	lds	r0, 0x0106
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <Move_Tick+0x22>
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	0a 94       	dec	r0
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <Move_Tick+0x1e>
     8a8:	80 95       	com	r24
     8aa:	82 23       	and	r24, r18
     8ac:	8b b9       	out	0x0b, r24	; 11
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <Move_Tick+0x46>
     8b0:	2b b1       	in	r18, 0x0b	; 11
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	00 90 06 01 	lds	r0, 0x0106
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <Move_Tick+0x3e>
     8bc:	88 0f       	add	r24, r24
     8be:	99 1f       	adc	r25, r25
     8c0:	0a 94       	dec	r0
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <Move_Tick+0x3a>
     8c4:	82 2b       	or	r24, r18
     8c6:	8b b9       	out	0x0b, r24	; 11
     8c8:	80 91 ee 07 	lds	r24, 0x07EE
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <Move_Tick+0x50>
     8d0:	d3 c1       	rjmp	.+934    	; 0xc78 <Move_Tick+0x3f6>
     8d2:	28 f4       	brcc	.+10     	; 0x8de <Move_Tick+0x5c>
     8d4:	88 23       	and	r24, r24
     8d6:	51 f0       	breq	.+20     	; 0x8ec <Move_Tick+0x6a>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	61 f0       	breq	.+24     	; 0x8f4 <Move_Tick+0x72>
     8dc:	31 c3       	rjmp	.+1634   	; 0xf40 <Move_Tick+0x6be>
     8de:	83 30       	cpi	r24, 0x03	; 3
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <Move_Tick+0x62>
     8e2:	f1 c1       	rjmp	.+994    	; 0xcc6 <Move_Tick+0x444>
     8e4:	84 30       	cpi	r24, 0x04	; 4
     8e6:	09 f4       	brne	.+2      	; 0x8ea <Move_Tick+0x68>
     8e8:	14 c3       	rjmp	.+1576   	; 0xf12 <Move_Tick+0x690>
     8ea:	2a c3       	rjmp	.+1620   	; 0xf40 <Move_Tick+0x6be>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 ee 07 	sts	0x07EE, r24
     8f2:	28 c3       	rjmp	.+1616   	; 0xf44 <Move_Tick+0x6c2>
     8f4:	80 91 60 07 	lds	r24, 0x0760
     8f8:	88 23       	and	r24, r24
     8fa:	09 f4       	brne	.+2      	; 0x8fe <Move_Tick+0x7c>
     8fc:	23 c3       	rjmp	.+1606   	; 0xf44 <Move_Tick+0x6c2>
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	80 93 ee 07 	sts	0x07EE, r24
     904:	80 91 e1 07 	lds	r24, 0x07E1
     908:	90 91 e2 07 	lds	r25, 0x07E2
     90c:	d8 dd       	rcall	.-1104   	; 0x4be <QueueDequeue>
     90e:	80 93 61 07 	sts	0x0761, r24
     912:	90 91 60 07 	lds	r25, 0x0760
     916:	91 50       	subi	r25, 0x01	; 1
     918:	90 93 60 07 	sts	0x0760, r25
     91c:	81 11       	cpse	r24, r1
     91e:	23 c0       	rjmp	.+70     	; 0x966 <Move_Tick+0xe4>
     920:	c3 e7       	ldi	r28, 0x73	; 115
     922:	d7 e0       	ldi	r29, 0x07	; 7
     924:	20 e0       	ldi	r18, 0x00	; 0
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	44 eb       	ldi	r20, 0xB4	; 180
     92a:	52 e4       	ldi	r21, 0x42	; 66
     92c:	6c 81       	ldd	r22, Y+4	; 0x04
     92e:	7d 81       	ldd	r23, Y+5	; 0x05
     930:	8e 81       	ldd	r24, Y+6	; 0x06
     932:	9f 81       	ldd	r25, Y+7	; 0x07
     934:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     938:	6c 83       	std	Y+4, r22	; 0x04
     93a:	7d 83       	std	Y+5, r23	; 0x05
     93c:	8e 83       	std	Y+6, r24	; 0x06
     93e:	9f 83       	std	Y+7, r25	; 0x07
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 3c 01 	sts	0x013C, r24
     946:	87 e7       	ldi	r24, 0x77	; 119
     948:	97 e0       	ldi	r25, 0x07	; 7
     94a:	90 93 f1 07 	sts	0x07F1, r25
     94e:	80 93 f0 07 	sts	0x07F0, r24
     952:	87 e6       	ldi	r24, 0x67	; 103
     954:	97 e0       	ldi	r25, 0x07	; 7
     956:	90 93 e7 07 	sts	0x07E7, r25
     95a:	80 93 e6 07 	sts	0x07E6, r24
     95e:	86 e0       	ldi	r24, 0x06	; 6
     960:	80 93 06 01 	sts	0x0106, r24
     964:	ef c2       	rjmp	.+1502   	; 0xf44 <Move_Tick+0x6c2>
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	11 f5       	brne	.+68     	; 0x9ae <Move_Tick+0x12c>
     96a:	c3 e7       	ldi	r28, 0x73	; 115
     96c:	d7 e0       	ldi	r29, 0x07	; 7
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	44 eb       	ldi	r20, 0xB4	; 180
     974:	52 e4       	ldi	r21, 0x42	; 66
     976:	6c 81       	ldd	r22, Y+4	; 0x04
     978:	7d 81       	ldd	r23, Y+5	; 0x05
     97a:	8e 81       	ldd	r24, Y+6	; 0x06
     97c:	9f 81       	ldd	r25, Y+7	; 0x07
     97e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__subsf3>
     982:	6c 83       	std	Y+4, r22	; 0x04
     984:	7d 83       	std	Y+5, r23	; 0x05
     986:	8e 83       	std	Y+6, r24	; 0x06
     988:	9f 83       	std	Y+7, r25	; 0x07
     98a:	10 92 3c 01 	sts	0x013C, r1
     98e:	87 e7       	ldi	r24, 0x77	; 119
     990:	97 e0       	ldi	r25, 0x07	; 7
     992:	90 93 f1 07 	sts	0x07F1, r25
     996:	80 93 f0 07 	sts	0x07F0, r24
     99a:	87 e6       	ldi	r24, 0x67	; 103
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	90 93 e7 07 	sts	0x07E7, r25
     9a2:	80 93 e6 07 	sts	0x07E6, r24
     9a6:	86 e0       	ldi	r24, 0x06	; 6
     9a8:	80 93 06 01 	sts	0x0106, r24
     9ac:	cb c2       	rjmp	.+1430   	; 0xf44 <Move_Tick+0x6c2>
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	19 f5       	brne	.+70     	; 0x9f8 <Move_Tick+0x176>
     9b2:	c3 e7       	ldi	r28, 0x73	; 115
     9b4:	d7 e0       	ldi	r29, 0x07	; 7
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	44 e3       	ldi	r20, 0x34	; 52
     9bc:	53 e4       	ldi	r21, 0x43	; 67
     9be:	6c 81       	ldd	r22, Y+4	; 0x04
     9c0:	7d 81       	ldd	r23, Y+5	; 0x05
     9c2:	8e 81       	ldd	r24, Y+6	; 0x06
     9c4:	9f 81       	ldd	r25, Y+7	; 0x07
     9c6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     9ca:	6c 83       	std	Y+4, r22	; 0x04
     9cc:	7d 83       	std	Y+5, r23	; 0x05
     9ce:	8e 83       	std	Y+6, r24	; 0x06
     9d0:	9f 83       	std	Y+7, r25	; 0x07
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	80 93 3c 01 	sts	0x013C, r24
     9d8:	87 e7       	ldi	r24, 0x77	; 119
     9da:	97 e0       	ldi	r25, 0x07	; 7
     9dc:	90 93 f1 07 	sts	0x07F1, r25
     9e0:	80 93 f0 07 	sts	0x07F0, r24
     9e4:	87 e6       	ldi	r24, 0x67	; 103
     9e6:	97 e0       	ldi	r25, 0x07	; 7
     9e8:	90 93 e7 07 	sts	0x07E7, r25
     9ec:	80 93 e6 07 	sts	0x07E6, r24
     9f0:	86 e0       	ldi	r24, 0x06	; 6
     9f2:	80 93 06 01 	sts	0x0106, r24
     9f6:	a6 c2       	rjmp	.+1356   	; 0xf44 <Move_Tick+0x6c2>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	09 f5       	brne	.+66     	; 0xa3e <Move_Tick+0x1bc>
     9fc:	c3 e7       	ldi	r28, 0x73	; 115
     9fe:	d7 e0       	ldi	r29, 0x07	; 7
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	44 eb       	ldi	r20, 0xB4	; 180
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	68 81       	ld	r22, Y
     a0a:	79 81       	ldd	r23, Y+1	; 0x01
     a0c:	8a 81       	ldd	r24, Y+2	; 0x02
     a0e:	9b 81       	ldd	r25, Y+3	; 0x03
     a10:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     a14:	68 83       	st	Y, r22
     a16:	79 83       	std	Y+1, r23	; 0x01
     a18:	8a 83       	std	Y+2, r24	; 0x02
     a1a:	9b 83       	std	Y+3, r25	; 0x03
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	80 93 3b 01 	sts	0x013B, r24
     a22:	d0 93 f1 07 	sts	0x07F1, r29
     a26:	c0 93 f0 07 	sts	0x07F0, r28
     a2a:	83 e6       	ldi	r24, 0x63	; 99
     a2c:	97 e0       	ldi	r25, 0x07	; 7
     a2e:	90 93 e7 07 	sts	0x07E7, r25
     a32:	80 93 e6 07 	sts	0x07E6, r24
     a36:	87 e0       	ldi	r24, 0x07	; 7
     a38:	80 93 06 01 	sts	0x0106, r24
     a3c:	83 c2       	rjmp	.+1286   	; 0xf44 <Move_Tick+0x6c2>
     a3e:	84 30       	cpi	r24, 0x04	; 4
     a40:	01 f5       	brne	.+64     	; 0xa82 <Move_Tick+0x200>
     a42:	c3 e7       	ldi	r28, 0x73	; 115
     a44:	d7 e0       	ldi	r29, 0x07	; 7
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	44 eb       	ldi	r20, 0xB4	; 180
     a4c:	52 e4       	ldi	r21, 0x42	; 66
     a4e:	68 81       	ld	r22, Y
     a50:	79 81       	ldd	r23, Y+1	; 0x01
     a52:	8a 81       	ldd	r24, Y+2	; 0x02
     a54:	9b 81       	ldd	r25, Y+3	; 0x03
     a56:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__subsf3>
     a5a:	68 83       	st	Y, r22
     a5c:	79 83       	std	Y+1, r23	; 0x01
     a5e:	8a 83       	std	Y+2, r24	; 0x02
     a60:	9b 83       	std	Y+3, r25	; 0x03
     a62:	10 92 3b 01 	sts	0x013B, r1
     a66:	d0 93 f1 07 	sts	0x07F1, r29
     a6a:	c0 93 f0 07 	sts	0x07F0, r28
     a6e:	83 e6       	ldi	r24, 0x63	; 99
     a70:	97 e0       	ldi	r25, 0x07	; 7
     a72:	90 93 e7 07 	sts	0x07E7, r25
     a76:	80 93 e6 07 	sts	0x07E6, r24
     a7a:	87 e0       	ldi	r24, 0x07	; 7
     a7c:	80 93 06 01 	sts	0x0106, r24
     a80:	61 c2       	rjmp	.+1218   	; 0xf44 <Move_Tick+0x6c2>
     a82:	85 30       	cpi	r24, 0x05	; 5
     a84:	09 f5       	brne	.+66     	; 0xac8 <Move_Tick+0x246>
     a86:	c3 e7       	ldi	r28, 0x73	; 115
     a88:	d7 e0       	ldi	r29, 0x07	; 7
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	44 e3       	ldi	r20, 0x34	; 52
     a90:	53 e4       	ldi	r21, 0x43	; 67
     a92:	68 81       	ld	r22, Y
     a94:	79 81       	ldd	r23, Y+1	; 0x01
     a96:	8a 81       	ldd	r24, Y+2	; 0x02
     a98:	9b 81       	ldd	r25, Y+3	; 0x03
     a9a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     a9e:	68 83       	st	Y, r22
     aa0:	79 83       	std	Y+1, r23	; 0x01
     aa2:	8a 83       	std	Y+2, r24	; 0x02
     aa4:	9b 83       	std	Y+3, r25	; 0x03
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	80 93 3b 01 	sts	0x013B, r24
     aac:	d0 93 f1 07 	sts	0x07F1, r29
     ab0:	c0 93 f0 07 	sts	0x07F0, r28
     ab4:	83 e6       	ldi	r24, 0x63	; 99
     ab6:	97 e0       	ldi	r25, 0x07	; 7
     ab8:	90 93 e7 07 	sts	0x07E7, r25
     abc:	80 93 e6 07 	sts	0x07E6, r24
     ac0:	87 e0       	ldi	r24, 0x07	; 7
     ac2:	80 93 06 01 	sts	0x0106, r24
     ac6:	3e c2       	rjmp	.+1148   	; 0xf44 <Move_Tick+0x6c2>
     ac8:	86 30       	cpi	r24, 0x06	; 6
     aca:	19 f5       	brne	.+70     	; 0xb12 <Move_Tick+0x290>
     acc:	c3 e7       	ldi	r28, 0x73	; 115
     ace:	d7 e0       	ldi	r29, 0x07	; 7
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	44 eb       	ldi	r20, 0xB4	; 180
     ad6:	52 e4       	ldi	r21, 0x42	; 66
     ad8:	68 85       	ldd	r22, Y+8	; 0x08
     ada:	79 85       	ldd	r23, Y+9	; 0x09
     adc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ade:	9b 85       	ldd	r25, Y+11	; 0x0b
     ae0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__addsf3>
     ae4:	68 87       	std	Y+8, r22	; 0x08
     ae6:	79 87       	std	Y+9, r23	; 0x09
     ae8:	8a 87       	std	Y+10, r24	; 0x0a
     aea:	9b 87       	std	Y+11, r25	; 0x0b
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 3d 01 	sts	0x013D, r24
     af2:	8b e7       	ldi	r24, 0x7B	; 123
     af4:	97 e0       	ldi	r25, 0x07	; 7
     af6:	90 93 f1 07 	sts	0x07F1, r25
     afa:	80 93 f0 07 	sts	0x07F0, r24
     afe:	8b e6       	ldi	r24, 0x6B	; 107
     b00:	97 e0       	ldi	r25, 0x07	; 7
     b02:	90 93 e7 07 	sts	0x07E7, r25
     b06:	80 93 e6 07 	sts	0x07E6, r24
     b0a:	85 e0       	ldi	r24, 0x05	; 5
     b0c:	80 93 06 01 	sts	0x0106, r24
     b10:	19 c2       	rjmp	.+1074   	; 0xf44 <Move_Tick+0x6c2>
     b12:	87 30       	cpi	r24, 0x07	; 7
     b14:	09 f5       	brne	.+66     	; 0xb58 <Move_Tick+0x2d6>
     b16:	c3 e7       	ldi	r28, 0x73	; 115
     b18:	d7 e0       	ldi	r29, 0x07	; 7
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	44 eb       	ldi	r20, 0xB4	; 180
     b20:	52 e4       	ldi	r21, 0x42	; 66
     b22:	68 85       	ldd	r22, Y+8	; 0x08
     b24:	79 85       	ldd	r23, Y+9	; 0x09
     b26:	8a 85       	ldd	r24, Y+10	; 0x0a
     b28:	9b 85       	ldd	r25, Y+11	; 0x0b
     b2a:	ed d7       	rcall	.+4058   	; 0x1b06 <__subsf3>
     b2c:	68 87       	std	Y+8, r22	; 0x08
     b2e:	79 87       	std	Y+9, r23	; 0x09
     b30:	8a 87       	std	Y+10, r24	; 0x0a
     b32:	9b 87       	std	Y+11, r25	; 0x0b
     b34:	10 92 3d 01 	sts	0x013D, r1
     b38:	8b e7       	ldi	r24, 0x7B	; 123
     b3a:	97 e0       	ldi	r25, 0x07	; 7
     b3c:	90 93 f1 07 	sts	0x07F1, r25
     b40:	80 93 f0 07 	sts	0x07F0, r24
     b44:	8b e6       	ldi	r24, 0x6B	; 107
     b46:	97 e0       	ldi	r25, 0x07	; 7
     b48:	90 93 e7 07 	sts	0x07E7, r25
     b4c:	80 93 e6 07 	sts	0x07E6, r24
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	80 93 06 01 	sts	0x0106, r24
     b56:	f6 c1       	rjmp	.+1004   	; 0xf44 <Move_Tick+0x6c2>
     b58:	88 30       	cpi	r24, 0x08	; 8
     b5a:	11 f5       	brne	.+68     	; 0xba0 <Move_Tick+0x31e>
     b5c:	c3 e7       	ldi	r28, 0x73	; 115
     b5e:	d7 e0       	ldi	r29, 0x07	; 7
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	44 e3       	ldi	r20, 0x34	; 52
     b66:	53 e4       	ldi	r21, 0x43	; 67
     b68:	68 85       	ldd	r22, Y+8	; 0x08
     b6a:	79 85       	ldd	r23, Y+9	; 0x09
     b6c:	8a 85       	ldd	r24, Y+10	; 0x0a
     b6e:	9b 85       	ldd	r25, Y+11	; 0x0b
     b70:	cb d7       	rcall	.+3990   	; 0x1b08 <__addsf3>
     b72:	68 87       	std	Y+8, r22	; 0x08
     b74:	79 87       	std	Y+9, r23	; 0x09
     b76:	8a 87       	std	Y+10, r24	; 0x0a
     b78:	9b 87       	std	Y+11, r25	; 0x0b
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 3d 01 	sts	0x013D, r24
     b80:	8b e7       	ldi	r24, 0x7B	; 123
     b82:	97 e0       	ldi	r25, 0x07	; 7
     b84:	90 93 f1 07 	sts	0x07F1, r25
     b88:	80 93 f0 07 	sts	0x07F0, r24
     b8c:	8b e6       	ldi	r24, 0x6B	; 107
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	90 93 e7 07 	sts	0x07E7, r25
     b94:	80 93 e6 07 	sts	0x07E6, r24
     b98:	85 e0       	ldi	r24, 0x05	; 5
     b9a:	80 93 06 01 	sts	0x0106, r24
     b9e:	d2 c1       	rjmp	.+932    	; 0xf44 <Move_Tick+0x6c2>
     ba0:	89 30       	cpi	r24, 0x09	; 9
     ba2:	11 f5       	brne	.+68     	; 0xbe8 <Move_Tick+0x366>
     ba4:	c3 e7       	ldi	r28, 0x73	; 115
     ba6:	d7 e0       	ldi	r29, 0x07	; 7
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	44 eb       	ldi	r20, 0xB4	; 180
     bae:	52 e4       	ldi	r21, 0x42	; 66
     bb0:	6c 85       	ldd	r22, Y+12	; 0x0c
     bb2:	7d 85       	ldd	r23, Y+13	; 0x0d
     bb4:	8e 85       	ldd	r24, Y+14	; 0x0e
     bb6:	9f 85       	ldd	r25, Y+15	; 0x0f
     bb8:	a7 d7       	rcall	.+3918   	; 0x1b08 <__addsf3>
     bba:	6c 87       	std	Y+12, r22	; 0x0c
     bbc:	7d 87       	std	Y+13, r23	; 0x0d
     bbe:	8e 87       	std	Y+14, r24	; 0x0e
     bc0:	9f 87       	std	Y+15, r25	; 0x0f
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	80 93 3e 01 	sts	0x013E, r24
     bc8:	8f e7       	ldi	r24, 0x7F	; 127
     bca:	97 e0       	ldi	r25, 0x07	; 7
     bcc:	90 93 f1 07 	sts	0x07F1, r25
     bd0:	80 93 f0 07 	sts	0x07F0, r24
     bd4:	8f e6       	ldi	r24, 0x6F	; 111
     bd6:	97 e0       	ldi	r25, 0x07	; 7
     bd8:	90 93 e7 07 	sts	0x07E7, r25
     bdc:	80 93 e6 07 	sts	0x07E6, r24
     be0:	84 e0       	ldi	r24, 0x04	; 4
     be2:	80 93 06 01 	sts	0x0106, r24
     be6:	ae c1       	rjmp	.+860    	; 0xf44 <Move_Tick+0x6c2>
     be8:	8a 30       	cpi	r24, 0x0A	; 10
     bea:	09 f5       	brne	.+66     	; 0xc2e <Move_Tick+0x3ac>
     bec:	c3 e7       	ldi	r28, 0x73	; 115
     bee:	d7 e0       	ldi	r29, 0x07	; 7
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	44 eb       	ldi	r20, 0xB4	; 180
     bf6:	52 e4       	ldi	r21, 0x42	; 66
     bf8:	6c 85       	ldd	r22, Y+12	; 0x0c
     bfa:	7d 85       	ldd	r23, Y+13	; 0x0d
     bfc:	8e 85       	ldd	r24, Y+14	; 0x0e
     bfe:	9f 85       	ldd	r25, Y+15	; 0x0f
     c00:	82 d7       	rcall	.+3844   	; 0x1b06 <__subsf3>
     c02:	6c 87       	std	Y+12, r22	; 0x0c
     c04:	7d 87       	std	Y+13, r23	; 0x0d
     c06:	8e 87       	std	Y+14, r24	; 0x0e
     c08:	9f 87       	std	Y+15, r25	; 0x0f
     c0a:	10 92 3e 01 	sts	0x013E, r1
     c0e:	8f e7       	ldi	r24, 0x7F	; 127
     c10:	97 e0       	ldi	r25, 0x07	; 7
     c12:	90 93 f1 07 	sts	0x07F1, r25
     c16:	80 93 f0 07 	sts	0x07F0, r24
     c1a:	8f e6       	ldi	r24, 0x6F	; 111
     c1c:	97 e0       	ldi	r25, 0x07	; 7
     c1e:	90 93 e7 07 	sts	0x07E7, r25
     c22:	80 93 e6 07 	sts	0x07E6, r24
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	80 93 06 01 	sts	0x0106, r24
     c2c:	8b c1       	rjmp	.+790    	; 0xf44 <Move_Tick+0x6c2>
     c2e:	8b 30       	cpi	r24, 0x0B	; 11
     c30:	09 f0       	breq	.+2      	; 0xc34 <Move_Tick+0x3b2>
     c32:	88 c1       	rjmp	.+784    	; 0xf44 <Move_Tick+0x6c2>
     c34:	c3 e7       	ldi	r28, 0x73	; 115
     c36:	d7 e0       	ldi	r29, 0x07	; 7
     c38:	20 e0       	ldi	r18, 0x00	; 0
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	44 e3       	ldi	r20, 0x34	; 52
     c3e:	53 e4       	ldi	r21, 0x43	; 67
     c40:	6c 85       	ldd	r22, Y+12	; 0x0c
     c42:	7d 85       	ldd	r23, Y+13	; 0x0d
     c44:	8e 85       	ldd	r24, Y+14	; 0x0e
     c46:	9f 85       	ldd	r25, Y+15	; 0x0f
     c48:	5f d7       	rcall	.+3774   	; 0x1b08 <__addsf3>
     c4a:	6c 87       	std	Y+12, r22	; 0x0c
     c4c:	7d 87       	std	Y+13, r23	; 0x0d
     c4e:	8e 87       	std	Y+14, r24	; 0x0e
     c50:	9f 87       	std	Y+15, r25	; 0x0f
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 3e 01 	sts	0x013E, r24
     c58:	8f e7       	ldi	r24, 0x7F	; 127
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	90 93 f1 07 	sts	0x07F1, r25
     c60:	80 93 f0 07 	sts	0x07F0, r24
     c64:	8f e6       	ldi	r24, 0x6F	; 111
     c66:	97 e0       	ldi	r25, 0x07	; 7
     c68:	90 93 e7 07 	sts	0x07E7, r25
     c6c:	80 93 e6 07 	sts	0x07E6, r24
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	80 93 06 01 	sts	0x0106, r24
     c76:	66 c1       	rjmp	.+716    	; 0xf44 <Move_Tick+0x6c2>
     c78:	e0 91 f0 07 	lds	r30, 0x07F0
     c7c:	f0 91 f1 07 	lds	r31, 0x07F1
     c80:	a0 91 e6 07 	lds	r26, 0x07E6
     c84:	b0 91 e7 07 	lds	r27, 0x07E7
     c88:	2d 91       	ld	r18, X+
     c8a:	3d 91       	ld	r19, X+
     c8c:	4d 91       	ld	r20, X+
     c8e:	5c 91       	ld	r21, X
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	9b d7       	rcall	.+3894   	; 0x1bd0 <__cmpsf2>
     c9a:	81 11       	cpse	r24, r1
     c9c:	53 c1       	rjmp	.+678    	; 0xf44 <Move_Tick+0x6c2>
     c9e:	80 91 61 07 	lds	r24, 0x0761
     ca2:	82 30       	cpi	r24, 0x02	; 2
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <Move_Tick+0x430>
     ca6:	85 30       	cpi	r24, 0x05	; 5
     ca8:	21 f0       	breq	.+8      	; 0xcb2 <Move_Tick+0x430>
     caa:	88 30       	cpi	r24, 0x08	; 8
     cac:	11 f0       	breq	.+4      	; 0xcb2 <Move_Tick+0x430>
     cae:	8b 30       	cpi	r24, 0x0B	; 11
     cb0:	21 f4       	brne	.+8      	; 0xcba <Move_Tick+0x438>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 ee 07 	sts	0x07EE, r24
     cb8:	45 c1       	rjmp	.+650    	; 0xf44 <Move_Tick+0x6c2>
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	80 93 ee 07 	sts	0x07EE, r24
     cc0:	10 92 62 07 	sts	0x0762, r1
     cc4:	3f c1       	rjmp	.+638    	; 0xf44 <Move_Tick+0x6c2>
     cc6:	80 91 62 07 	lds	r24, 0x0762
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	98 0f       	add	r25, r24
     cce:	90 93 62 07 	sts	0x0762, r25
     cd2:	83 33       	cpi	r24, 0x33	; 51
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <Move_Tick+0x456>
     cd6:	36 c1       	rjmp	.+620    	; 0xf44 <Move_Tick+0x6c2>
     cd8:	84 e0       	ldi	r24, 0x04	; 4
     cda:	80 93 ee 07 	sts	0x07EE, r24
     cde:	80 91 61 07 	lds	r24, 0x0761
     ce2:	81 11       	cpse	r24, r1
     ce4:	21 c0       	rjmp	.+66     	; 0xd28 <Move_Tick+0x4a6>
     ce6:	c3 e7       	ldi	r28, 0x73	; 115
     ce8:	d7 e0       	ldi	r29, 0x07	; 7
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	44 eb       	ldi	r20, 0xB4	; 180
     cf0:	52 e4       	ldi	r21, 0x42	; 66
     cf2:	6c 81       	ldd	r22, Y+4	; 0x04
     cf4:	7d 81       	ldd	r23, Y+5	; 0x05
     cf6:	8e 81       	ldd	r24, Y+6	; 0x06
     cf8:	9f 81       	ldd	r25, Y+7	; 0x07
     cfa:	05 d7       	rcall	.+3594   	; 0x1b06 <__subsf3>
     cfc:	6c 83       	std	Y+4, r22	; 0x04
     cfe:	7d 83       	std	Y+5, r23	; 0x05
     d00:	8e 83       	std	Y+6, r24	; 0x06
     d02:	9f 83       	std	Y+7, r25	; 0x07
     d04:	10 92 3c 01 	sts	0x013C, r1
     d08:	87 e7       	ldi	r24, 0x77	; 119
     d0a:	97 e0       	ldi	r25, 0x07	; 7
     d0c:	90 93 f1 07 	sts	0x07F1, r25
     d10:	80 93 f0 07 	sts	0x07F0, r24
     d14:	87 e6       	ldi	r24, 0x67	; 103
     d16:	97 e0       	ldi	r25, 0x07	; 7
     d18:	90 93 e7 07 	sts	0x07E7, r25
     d1c:	80 93 e6 07 	sts	0x07E6, r24
     d20:	86 e0       	ldi	r24, 0x06	; 6
     d22:	80 93 06 01 	sts	0x0106, r24
     d26:	0e c1       	rjmp	.+540    	; 0xf44 <Move_Tick+0x6c2>
     d28:	81 30       	cpi	r24, 0x01	; 1
     d2a:	11 f5       	brne	.+68     	; 0xd70 <Move_Tick+0x4ee>
     d2c:	c3 e7       	ldi	r28, 0x73	; 115
     d2e:	d7 e0       	ldi	r29, 0x07	; 7
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	44 eb       	ldi	r20, 0xB4	; 180
     d36:	52 e4       	ldi	r21, 0x42	; 66
     d38:	6c 81       	ldd	r22, Y+4	; 0x04
     d3a:	7d 81       	ldd	r23, Y+5	; 0x05
     d3c:	8e 81       	ldd	r24, Y+6	; 0x06
     d3e:	9f 81       	ldd	r25, Y+7	; 0x07
     d40:	e3 d6       	rcall	.+3526   	; 0x1b08 <__addsf3>
     d42:	6c 83       	std	Y+4, r22	; 0x04
     d44:	7d 83       	std	Y+5, r23	; 0x05
     d46:	8e 83       	std	Y+6, r24	; 0x06
     d48:	9f 83       	std	Y+7, r25	; 0x07
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 3c 01 	sts	0x013C, r24
     d50:	87 e7       	ldi	r24, 0x77	; 119
     d52:	97 e0       	ldi	r25, 0x07	; 7
     d54:	90 93 f1 07 	sts	0x07F1, r25
     d58:	80 93 f0 07 	sts	0x07F0, r24
     d5c:	87 e6       	ldi	r24, 0x67	; 103
     d5e:	97 e0       	ldi	r25, 0x07	; 7
     d60:	90 93 e7 07 	sts	0x07E7, r25
     d64:	80 93 e6 07 	sts	0x07E6, r24
     d68:	86 e0       	ldi	r24, 0x06	; 6
     d6a:	80 93 06 01 	sts	0x0106, r24
     d6e:	ea c0       	rjmp	.+468    	; 0xf44 <Move_Tick+0x6c2>
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	f9 f4       	brne	.+62     	; 0xdb2 <Move_Tick+0x530>
     d74:	c3 e7       	ldi	r28, 0x73	; 115
     d76:	d7 e0       	ldi	r29, 0x07	; 7
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	44 eb       	ldi	r20, 0xB4	; 180
     d7e:	52 e4       	ldi	r21, 0x42	; 66
     d80:	68 81       	ld	r22, Y
     d82:	79 81       	ldd	r23, Y+1	; 0x01
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	9b 81       	ldd	r25, Y+3	; 0x03
     d88:	be d6       	rcall	.+3452   	; 0x1b06 <__subsf3>
     d8a:	68 83       	st	Y, r22
     d8c:	79 83       	std	Y+1, r23	; 0x01
     d8e:	8a 83       	std	Y+2, r24	; 0x02
     d90:	9b 83       	std	Y+3, r25	; 0x03
     d92:	10 92 3b 01 	sts	0x013B, r1
     d96:	d0 93 f1 07 	sts	0x07F1, r29
     d9a:	c0 93 f0 07 	sts	0x07F0, r28
     d9e:	83 e6       	ldi	r24, 0x63	; 99
     da0:	97 e0       	ldi	r25, 0x07	; 7
     da2:	90 93 e7 07 	sts	0x07E7, r25
     da6:	80 93 e6 07 	sts	0x07E6, r24
     daa:	87 e0       	ldi	r24, 0x07	; 7
     dac:	80 93 06 01 	sts	0x0106, r24
     db0:	c9 c0       	rjmp	.+402    	; 0xf44 <Move_Tick+0x6c2>
     db2:	84 30       	cpi	r24, 0x04	; 4
     db4:	01 f5       	brne	.+64     	; 0xdf6 <Move_Tick+0x574>
     db6:	c3 e7       	ldi	r28, 0x73	; 115
     db8:	d7 e0       	ldi	r29, 0x07	; 7
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	44 eb       	ldi	r20, 0xB4	; 180
     dc0:	52 e4       	ldi	r21, 0x42	; 66
     dc2:	68 81       	ld	r22, Y
     dc4:	79 81       	ldd	r23, Y+1	; 0x01
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	9b 81       	ldd	r25, Y+3	; 0x03
     dca:	9e d6       	rcall	.+3388   	; 0x1b08 <__addsf3>
     dcc:	68 83       	st	Y, r22
     dce:	79 83       	std	Y+1, r23	; 0x01
     dd0:	8a 83       	std	Y+2, r24	; 0x02
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	80 93 3b 01 	sts	0x013B, r24
     dda:	d0 93 f1 07 	sts	0x07F1, r29
     dde:	c0 93 f0 07 	sts	0x07F0, r28
     de2:	83 e6       	ldi	r24, 0x63	; 99
     de4:	97 e0       	ldi	r25, 0x07	; 7
     de6:	90 93 e7 07 	sts	0x07E7, r25
     dea:	80 93 e6 07 	sts	0x07E6, r24
     dee:	87 e0       	ldi	r24, 0x07	; 7
     df0:	80 93 06 01 	sts	0x0106, r24
     df4:	a7 c0       	rjmp	.+334    	; 0xf44 <Move_Tick+0x6c2>
     df6:	86 30       	cpi	r24, 0x06	; 6
     df8:	09 f5       	brne	.+66     	; 0xe3c <Move_Tick+0x5ba>
     dfa:	c3 e7       	ldi	r28, 0x73	; 115
     dfc:	d7 e0       	ldi	r29, 0x07	; 7
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	44 eb       	ldi	r20, 0xB4	; 180
     e04:	52 e4       	ldi	r21, 0x42	; 66
     e06:	68 85       	ldd	r22, Y+8	; 0x08
     e08:	79 85       	ldd	r23, Y+9	; 0x09
     e0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     e0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     e0e:	7b d6       	rcall	.+3318   	; 0x1b06 <__subsf3>
     e10:	68 87       	std	Y+8, r22	; 0x08
     e12:	79 87       	std	Y+9, r23	; 0x09
     e14:	8a 87       	std	Y+10, r24	; 0x0a
     e16:	9b 87       	std	Y+11, r25	; 0x0b
     e18:	10 92 3d 01 	sts	0x013D, r1
     e1c:	8b e7       	ldi	r24, 0x7B	; 123
     e1e:	97 e0       	ldi	r25, 0x07	; 7
     e20:	90 93 f1 07 	sts	0x07F1, r25
     e24:	80 93 f0 07 	sts	0x07F0, r24
     e28:	8b e6       	ldi	r24, 0x6B	; 107
     e2a:	97 e0       	ldi	r25, 0x07	; 7
     e2c:	90 93 e7 07 	sts	0x07E7, r25
     e30:	80 93 e6 07 	sts	0x07E6, r24
     e34:	85 e0       	ldi	r24, 0x05	; 5
     e36:	80 93 06 01 	sts	0x0106, r24
     e3a:	84 c0       	rjmp	.+264    	; 0xf44 <Move_Tick+0x6c2>
     e3c:	87 30       	cpi	r24, 0x07	; 7
     e3e:	11 f5       	brne	.+68     	; 0xe84 <Move_Tick+0x602>
     e40:	c3 e7       	ldi	r28, 0x73	; 115
     e42:	d7 e0       	ldi	r29, 0x07	; 7
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	44 eb       	ldi	r20, 0xB4	; 180
     e4a:	52 e4       	ldi	r21, 0x42	; 66
     e4c:	68 85       	ldd	r22, Y+8	; 0x08
     e4e:	79 85       	ldd	r23, Y+9	; 0x09
     e50:	8a 85       	ldd	r24, Y+10	; 0x0a
     e52:	9b 85       	ldd	r25, Y+11	; 0x0b
     e54:	59 d6       	rcall	.+3250   	; 0x1b08 <__addsf3>
     e56:	68 87       	std	Y+8, r22	; 0x08
     e58:	79 87       	std	Y+9, r23	; 0x09
     e5a:	8a 87       	std	Y+10, r24	; 0x0a
     e5c:	9b 87       	std	Y+11, r25	; 0x0b
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 3d 01 	sts	0x013D, r24
     e64:	8b e7       	ldi	r24, 0x7B	; 123
     e66:	97 e0       	ldi	r25, 0x07	; 7
     e68:	90 93 f1 07 	sts	0x07F1, r25
     e6c:	80 93 f0 07 	sts	0x07F0, r24
     e70:	8b e6       	ldi	r24, 0x6B	; 107
     e72:	97 e0       	ldi	r25, 0x07	; 7
     e74:	90 93 e7 07 	sts	0x07E7, r25
     e78:	80 93 e6 07 	sts	0x07E6, r24
     e7c:	85 e0       	ldi	r24, 0x05	; 5
     e7e:	80 93 06 01 	sts	0x0106, r24
     e82:	60 c0       	rjmp	.+192    	; 0xf44 <Move_Tick+0x6c2>
     e84:	89 30       	cpi	r24, 0x09	; 9
     e86:	09 f5       	brne	.+66     	; 0xeca <Move_Tick+0x648>
     e88:	c3 e7       	ldi	r28, 0x73	; 115
     e8a:	d7 e0       	ldi	r29, 0x07	; 7
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	44 eb       	ldi	r20, 0xB4	; 180
     e92:	52 e4       	ldi	r21, 0x42	; 66
     e94:	6c 85       	ldd	r22, Y+12	; 0x0c
     e96:	7d 85       	ldd	r23, Y+13	; 0x0d
     e98:	8e 85       	ldd	r24, Y+14	; 0x0e
     e9a:	9f 85       	ldd	r25, Y+15	; 0x0f
     e9c:	34 d6       	rcall	.+3176   	; 0x1b06 <__subsf3>
     e9e:	6c 87       	std	Y+12, r22	; 0x0c
     ea0:	7d 87       	std	Y+13, r23	; 0x0d
     ea2:	8e 87       	std	Y+14, r24	; 0x0e
     ea4:	9f 87       	std	Y+15, r25	; 0x0f
     ea6:	10 92 3e 01 	sts	0x013E, r1
     eaa:	8f e7       	ldi	r24, 0x7F	; 127
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	90 93 f1 07 	sts	0x07F1, r25
     eb2:	80 93 f0 07 	sts	0x07F0, r24
     eb6:	8f e6       	ldi	r24, 0x6F	; 111
     eb8:	97 e0       	ldi	r25, 0x07	; 7
     eba:	90 93 e7 07 	sts	0x07E7, r25
     ebe:	80 93 e6 07 	sts	0x07E6, r24
     ec2:	84 e0       	ldi	r24, 0x04	; 4
     ec4:	80 93 06 01 	sts	0x0106, r24
     ec8:	3d c0       	rjmp	.+122    	; 0xf44 <Move_Tick+0x6c2>
     eca:	8a 30       	cpi	r24, 0x0A	; 10
     ecc:	d9 f5       	brne	.+118    	; 0xf44 <Move_Tick+0x6c2>
     ece:	c3 e7       	ldi	r28, 0x73	; 115
     ed0:	d7 e0       	ldi	r29, 0x07	; 7
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	44 eb       	ldi	r20, 0xB4	; 180
     ed8:	52 e4       	ldi	r21, 0x42	; 66
     eda:	6c 85       	ldd	r22, Y+12	; 0x0c
     edc:	7d 85       	ldd	r23, Y+13	; 0x0d
     ede:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee2:	12 d6       	rcall	.+3108   	; 0x1b08 <__addsf3>
     ee4:	6c 87       	std	Y+12, r22	; 0x0c
     ee6:	7d 87       	std	Y+13, r23	; 0x0d
     ee8:	8e 87       	std	Y+14, r24	; 0x0e
     eea:	9f 87       	std	Y+15, r25	; 0x0f
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 3e 01 	sts	0x013E, r24
     ef2:	8f e7       	ldi	r24, 0x7F	; 127
     ef4:	97 e0       	ldi	r25, 0x07	; 7
     ef6:	90 93 f1 07 	sts	0x07F1, r25
     efa:	80 93 f0 07 	sts	0x07F0, r24
     efe:	8f e6       	ldi	r24, 0x6F	; 111
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	90 93 e7 07 	sts	0x07E7, r25
     f06:	80 93 e6 07 	sts	0x07E6, r24
     f0a:	84 e0       	ldi	r24, 0x04	; 4
     f0c:	80 93 06 01 	sts	0x0106, r24
     f10:	19 c0       	rjmp	.+50     	; 0xf44 <Move_Tick+0x6c2>
     f12:	e0 91 f0 07 	lds	r30, 0x07F0
     f16:	f0 91 f1 07 	lds	r31, 0x07F1
     f1a:	a0 91 e6 07 	lds	r26, 0x07E6
     f1e:	b0 91 e7 07 	lds	r27, 0x07E7
     f22:	2d 91       	ld	r18, X+
     f24:	3d 91       	ld	r19, X+
     f26:	4d 91       	ld	r20, X+
     f28:	5c 91       	ld	r21, X
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	4e d6       	rcall	.+3228   	; 0x1bd0 <__cmpsf2>
     f34:	81 11       	cpse	r24, r1
     f36:	06 c0       	rjmp	.+12     	; 0xf44 <Move_Tick+0x6c2>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	80 93 ee 07 	sts	0x07EE, r24
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <Move_Tick+0x6c2>
     f40:	10 92 ee 07 	sts	0x07EE, r1
     f44:	df 91       	pop	r29
     f46:	cf 91       	pop	r28
     f48:	08 95       	ret

00000f4a <Move_Task>:
     f4a:	10 92 ee 07 	sts	0x07EE, r1
     f4e:	99 dc       	rcall	.-1742   	; 0x882 <Move_Tick>
     f50:	8a e0       	ldi	r24, 0x0A	; 10
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	17 d5       	rcall	.+2606   	; 0x1984 <vTaskDelay>
     f56:	fb cf       	rjmp	.-10     	; 0xf4e <Move_Task+0x4>

00000f58 <Joy_Tick>:
     f58:	80 91 ec 07 	lds	r24, 0x07EC
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	41 f0       	breq	.+16     	; 0xf70 <Joy_Tick+0x18>
     f60:	18 f0       	brcs	.+6      	; 0xf68 <Joy_Tick+0x10>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <Joy_Tick+0x7c>
     f66:	43 c0       	rjmp	.+134    	; 0xfee <Joy_Tick+0x96>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 ec 07 	sts	0x07EC, r24
     f6e:	08 95       	ret
     f70:	7c d9       	rcall	.-3336   	; 0x26a <joystickSample>
     f72:	80 91 ef 07 	lds	r24, 0x07EF
     f76:	81 11       	cpse	r24, r1
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <Joy_Tick+0x2a>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 ec 07 	sts	0x07EC, r24
     f80:	08 95       	ret
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	49 f4       	brne	.+18     	; 0xf98 <Joy_Tick+0x40>
     f86:	8b b1       	in	r24, 0x0b	; 11
     f88:	8b b9       	out	0x0b, r24	; 11
     f8a:	69 e0       	ldi	r22, 0x09	; 9
     f8c:	80 91 e1 07 	lds	r24, 0x07E1
     f90:	90 91 e2 07 	lds	r25, 0x07E2
     f94:	7c da       	rcall	.-2824   	; 0x48e <QueueEnqueue>
     f96:	1a c0       	rjmp	.+52     	; 0xfcc <Joy_Tick+0x74>
     f98:	82 30       	cpi	r24, 0x02	; 2
     f9a:	39 f4       	brne	.+14     	; 0xfaa <Joy_Tick+0x52>
     f9c:	6a e0       	ldi	r22, 0x0A	; 10
     f9e:	80 91 e1 07 	lds	r24, 0x07E1
     fa2:	90 91 e2 07 	lds	r25, 0x07E2
     fa6:	73 da       	rcall	.-2842   	; 0x48e <QueueEnqueue>
     fa8:	11 c0       	rjmp	.+34     	; 0xfcc <Joy_Tick+0x74>
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	39 f4       	brne	.+14     	; 0xfbc <Joy_Tick+0x64>
     fae:	6b e0       	ldi	r22, 0x0B	; 11
     fb0:	80 91 e1 07 	lds	r24, 0x07E1
     fb4:	90 91 e2 07 	lds	r25, 0x07E2
     fb8:	6a da       	rcall	.-2860   	; 0x48e <QueueEnqueue>
     fba:	08 c0       	rjmp	.+16     	; 0xfcc <Joy_Tick+0x74>
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	31 f4       	brne	.+12     	; 0xfcc <Joy_Tick+0x74>
     fc0:	6b e0       	ldi	r22, 0x0B	; 11
     fc2:	80 91 e1 07 	lds	r24, 0x07E1
     fc6:	90 91 e2 07 	lds	r25, 0x07E2
     fca:	61 da       	rcall	.-2878   	; 0x48e <QueueEnqueue>
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	80 93 ec 07 	sts	0x07EC, r24
     fd2:	08 95       	ret
     fd4:	4a d9       	rcall	.-3436   	; 0x26a <joystickSample>
     fd6:	80 91 ef 07 	lds	r24, 0x07EF
     fda:	81 11       	cpse	r24, r1
     fdc:	04 c0       	rjmp	.+8      	; 0xfe6 <Joy_Tick+0x8e>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 ec 07 	sts	0x07EC, r24
     fe4:	08 95       	ret
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	80 93 ec 07 	sts	0x07EC, r24
     fec:	08 95       	ret
     fee:	10 92 ec 07 	sts	0x07EC, r1
     ff2:	08 95       	ret

00000ff4 <Joy_Task>:
     ff4:	10 92 ec 07 	sts	0x07EC, r1
     ff8:	af df       	rcall	.-162    	; 0xf58 <Joy_Tick>
     ffa:	84 e1       	ldi	r24, 0x14	; 20
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	c2 d4       	rcall	.+2436   	; 0x1984 <vTaskDelay>
    1000:	fb cf       	rjmp	.-10     	; 0xff8 <Joy_Task+0x4>

00001002 <Receive_Init>:
    1002:	73 da       	rcall	.-2842   	; 0x4ea <SPI_ServantInit>
    1004:	10 92 ed 07 	sts	0x07ED, r1
    1008:	08 95       	ret

0000100a <Reveiced_Tick>:
    100a:	80 91 ed 07 	lds	r24, 0x07ED
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	61 f4       	brne	.+24     	; 0x102a <Reveiced_Tick+0x20>
    1012:	60 91 47 01 	lds	r22, 0x0147
    1016:	6c 30       	cpi	r22, 0x0C	; 12
    1018:	28 f4       	brcc	.+10     	; 0x1024 <Reveiced_Tick+0x1a>
    101a:	80 91 e1 07 	lds	r24, 0x07E1
    101e:	90 91 e2 07 	lds	r25, 0x07E2
    1022:	35 da       	rcall	.-2966   	; 0x48e <QueueEnqueue>
    1024:	8f ef       	ldi	r24, 0xFF	; 255
    1026:	80 93 47 01 	sts	0x0147, r24
    102a:	80 91 ed 07 	lds	r24, 0x07ED
    102e:	88 23       	and	r24, r24
    1030:	19 f0       	breq	.+6      	; 0x1038 <Reveiced_Tick+0x2e>
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	29 f4       	brne	.+10     	; 0x1040 <Reveiced_Tick+0x36>
    1036:	08 95       	ret
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 ed 07 	sts	0x07ED, r24
    103e:	08 95       	ret
    1040:	10 92 ed 07 	sts	0x07ED, r1
    1044:	08 95       	ret

00001046 <Receive_Task>:
    1046:	dd df       	rcall	.-70     	; 0x1002 <Receive_Init>
    1048:	e0 df       	rcall	.-64     	; 0x100a <Reveiced_Tick>
    104a:	8a e0       	ldi	r24, 0x0A	; 10
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	9a d4       	rcall	.+2356   	; 0x1984 <vTaskDelay>
    1050:	fb cf       	rjmp	.-10     	; 0x1048 <Receive_Task+0x2>

00001052 <But_Tick>:
}

//If the button is pressed, execute all moves currently in the queue
void But_Tick() {
	switch(but_state) {
    1052:	80 91 e5 07 	lds	r24, 0x07E5
    1056:	82 30       	cpi	r24, 0x02	; 2
    1058:	41 f4       	brne	.+16     	; 0x106a <But_Tick+0x18>
		case BINIT:
			break;
		case BWAIT:
			break;
		case BPRESSED:
			num_to_execute = moves->num_objects;
    105a:	e0 91 e1 07 	lds	r30, 0x07E1
    105e:	f0 91 e2 07 	lds	r31, 0x07E2
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	80 93 60 07 	sts	0x0760, r24
    1068:	12 c0       	rjmp	.+36     	; 0x108e <But_Tick+0x3c>
			break;
		case BPWAIT:
			break;
	}
	
	switch(but_state) {
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	51 f0       	breq	.+20     	; 0x1082 <But_Tick+0x30>
    106e:	28 f0       	brcs	.+10     	; 0x107a <But_Tick+0x28>
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	69 f0       	breq	.+26     	; 0x108e <But_Tick+0x3c>
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	79 f0       	breq	.+30     	; 0x1096 <But_Tick+0x44>
    1078:	08 95       	ret
		case BINIT:
			but_state = BWAIT;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	80 93 e5 07 	sts	0x07E5, r24
			break;
    1080:	08 95       	ret
		case BWAIT:
			if(~BUTBUS & (1 << BUTPIN)) but_state = BPRESSED;
    1082:	05 99       	sbic	0x00, 5	; 0
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <But_Tick+0x4e>
    1086:	82 e0       	ldi	r24, 0x02	; 2
    1088:	80 93 e5 07 	sts	0x07E5, r24
    108c:	08 95       	ret
			break;
		case BPRESSED:
			but_state = BPWAIT;
    108e:	83 e0       	ldi	r24, 0x03	; 3
    1090:	80 93 e5 07 	sts	0x07E5, r24
			break;
    1094:	08 95       	ret
		case BPWAIT:
			if(!(~BUTBUS & (1 << BUTPIN))) but_state = BWAIT;
    1096:	05 9b       	sbis	0x00, 5	; 0
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <But_Tick+0x4e>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 e5 07 	sts	0x07E5, r24
    10a0:	08 95       	ret

000010a2 <But_Task>:
#define BUTBUS PINA
#define BUTPIN 5
enum ButState {BINIT, BWAIT, BPRESSED, BPWAIT} but_state;

void But_Init() {
	but_state = BINIT;
    10a2:	10 92 e5 07 	sts	0x07E5, r1
}

void But_Task() {
	But_Init();
	for(;;) {
		But_Tick();
    10a6:	d5 df       	rcall	.-86     	; 0x1052 <But_Tick>
		vTaskDelay(50);
    10a8:	82 e3       	ldi	r24, 0x32	; 50
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	6b d4       	rcall	.+2262   	; 0x1984 <vTaskDelay>
	}
    10ae:	fb cf       	rjmp	.-10     	; 0x10a6 <But_Task+0x4>

000010b0 <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	cf 93       	push	r28
	xTaskCreate(Motor_Task, (signed portCHAR *)"Motorer", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    10c0:	a1 2c       	mov	r10, r1
    10c2:	b1 2c       	mov	r11, r1
    10c4:	c1 2c       	mov	r12, r1
    10c6:	d1 2c       	mov	r13, r1
    10c8:	e1 2c       	mov	r14, r1
    10ca:	f1 2c       	mov	r15, r1
    10cc:	08 2f       	mov	r16, r24
    10ce:	20 e0       	ldi	r18, 0x00	; 0
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	45 e5       	ldi	r20, 0x55	; 85
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	6a e4       	ldi	r22, 0x4A	; 74
    10d8:	71 e0       	ldi	r23, 0x01	; 1
    10da:	89 e3       	ldi	r24, 0x39	; 57
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	da d1       	rcall	.+948    	; 0x1494 <xTaskGenericCreate>
	xTaskCreate(Move_Task, (signed portCHAR *)"Mover", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	45 e5       	ldi	r20, 0x55	; 85
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	62 e5       	ldi	r22, 0x52	; 82
    10ea:	71 e0       	ldi	r23, 0x01	; 1
    10ec:	85 ea       	ldi	r24, 0xA5	; 165
    10ee:	97 e0       	ldi	r25, 0x07	; 7
    10f0:	d1 d1       	rcall	.+930    	; 0x1494 <xTaskGenericCreate>
	xTaskCreate(Shift_Task, (signed portCHAR *)"Shifter", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	45 e5       	ldi	r20, 0x55	; 85
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	68 e5       	ldi	r22, 0x58	; 88
    10fc:	71 e0       	ldi	r23, 0x01	; 1
    10fe:	8a ec       	ldi	r24, 0xCA	; 202
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	c8 d1       	rcall	.+912    	; 0x1494 <xTaskGenericCreate>
	xTaskCreate(Joy_Task, (signed portCHAR *)"JoySticker", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	45 e5       	ldi	r20, 0x55	; 85
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	60 e6       	ldi	r22, 0x60	; 96
    110e:	71 e0       	ldi	r23, 0x01	; 1
    1110:	8a ef       	ldi	r24, 0xFA	; 250
    1112:	97 e0       	ldi	r25, 0x07	; 7
    1114:	bf d1       	rcall	.+894    	; 0x1494 <xTaskGenericCreate>
	xTaskCreate(Receive_Task, (signed portCHAR *)"Receiver", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	45 e5       	ldi	r20, 0x55	; 85
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	6b e6       	ldi	r22, 0x6B	; 107
    1120:	71 e0       	ldi	r23, 0x01	; 1
    1122:	83 e2       	ldi	r24, 0x23	; 35
    1124:	98 e0       	ldi	r25, 0x08	; 8
    1126:	b6 d1       	rcall	.+876    	; 0x1494 <xTaskGenericCreate>
	xTaskCreate(But_Task, (signed portCHAR *)"Buttoner", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	45 e5       	ldi	r20, 0x55	; 85
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	64 e7       	ldi	r22, 0x74	; 116
    1132:	71 e0       	ldi	r23, 0x01	; 1
    1134:	81 e5       	ldi	r24, 0x51	; 81
    1136:	98 e0       	ldi	r25, 0x08	; 8
    1138:	ad d1       	rcall	.+858    	; 0x1494 <xTaskGenericCreate>
}
    113a:	cf 91       	pop	r28
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	bf 90       	pop	r11
    1148:	af 90       	pop	r10
    114a:	08 95       	ret

0000114c <main>:



int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
    114c:	11 b8       	out	0x01, r1	; 1
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
    1152:	87 b9       	out	0x07, r24	; 7
    1154:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
    1156:	8a b9       	out	0x0a, r24	; 10
    1158:	1b b8       	out	0x0b, r1	; 11
	
	
	moves = QueueInit(30);
    115a:	8e e1       	ldi	r24, 0x1E	; 30
    115c:	80 d9       	rcall	.-3328   	; 0x45e <QueueInit>
    115e:	90 93 e2 07 	sts	0x07E2, r25
    1162:	80 93 e1 07 	sts	0x07E1, r24
	
	joystickInit();
    1166:	73 d8       	rcall	.-3866   	; 0x24e <joystickInit>
	StartSecPulse(1);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	a2 df       	rcall	.-188    	; 0x10b0 <StartSecPulse>
	vTaskStartScheduler();
    116c:	94 d2       	rcall	.+1320   	; 0x1696 <vTaskStartScheduler>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	08 95       	ret

00001174 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1174:	31 e1       	ldi	r19, 0x11	; 17
    1176:	fc 01       	movw	r30, r24
    1178:	30 83       	st	Z, r19
    117a:	31 97       	sbiw	r30, 0x01	; 1
    117c:	22 e2       	ldi	r18, 0x22	; 34
    117e:	20 83       	st	Z, r18
    1180:	31 97       	sbiw	r30, 0x01	; 1
    1182:	a3 e3       	ldi	r26, 0x33	; 51
    1184:	a0 83       	st	Z, r26
    1186:	31 97       	sbiw	r30, 0x01	; 1
    1188:	60 83       	st	Z, r22
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	70 83       	st	Z, r23
    118e:	31 97       	sbiw	r30, 0x01	; 1
    1190:	10 82       	st	Z, r1
    1192:	31 97       	sbiw	r30, 0x01	; 1
    1194:	60 e8       	ldi	r22, 0x80	; 128
    1196:	60 83       	st	Z, r22
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	10 82       	st	Z, r1
    119c:	31 97       	sbiw	r30, 0x01	; 1
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	60 83       	st	Z, r22
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	63 e0       	ldi	r22, 0x03	; 3
    11a6:	60 83       	st	Z, r22
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	64 e0       	ldi	r22, 0x04	; 4
    11ac:	60 83       	st	Z, r22
    11ae:	31 97       	sbiw	r30, 0x01	; 1
    11b0:	65 e0       	ldi	r22, 0x05	; 5
    11b2:	60 83       	st	Z, r22
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	66 e0       	ldi	r22, 0x06	; 6
    11b8:	60 83       	st	Z, r22
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	67 e0       	ldi	r22, 0x07	; 7
    11be:	60 83       	st	Z, r22
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	68 e0       	ldi	r22, 0x08	; 8
    11c4:	60 83       	st	Z, r22
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	69 e0       	ldi	r22, 0x09	; 9
    11ca:	60 83       	st	Z, r22
    11cc:	31 97       	sbiw	r30, 0x01	; 1
    11ce:	60 e1       	ldi	r22, 0x10	; 16
    11d0:	60 83       	st	Z, r22
    11d2:	31 97       	sbiw	r30, 0x01	; 1
    11d4:	30 83       	st	Z, r19
    11d6:	31 97       	sbiw	r30, 0x01	; 1
    11d8:	32 e1       	ldi	r19, 0x12	; 18
    11da:	30 83       	st	Z, r19
    11dc:	31 97       	sbiw	r30, 0x01	; 1
    11de:	33 e1       	ldi	r19, 0x13	; 19
    11e0:	30 83       	st	Z, r19
    11e2:	31 97       	sbiw	r30, 0x01	; 1
    11e4:	34 e1       	ldi	r19, 0x14	; 20
    11e6:	30 83       	st	Z, r19
    11e8:	31 97       	sbiw	r30, 0x01	; 1
    11ea:	35 e1       	ldi	r19, 0x15	; 21
    11ec:	30 83       	st	Z, r19
    11ee:	31 97       	sbiw	r30, 0x01	; 1
    11f0:	36 e1       	ldi	r19, 0x16	; 22
    11f2:	30 83       	st	Z, r19
    11f4:	31 97       	sbiw	r30, 0x01	; 1
    11f6:	37 e1       	ldi	r19, 0x17	; 23
    11f8:	30 83       	st	Z, r19
    11fa:	31 97       	sbiw	r30, 0x01	; 1
    11fc:	38 e1       	ldi	r19, 0x18	; 24
    11fe:	30 83       	st	Z, r19
    1200:	31 97       	sbiw	r30, 0x01	; 1
    1202:	39 e1       	ldi	r19, 0x19	; 25
    1204:	30 83       	st	Z, r19
    1206:	31 97       	sbiw	r30, 0x01	; 1
    1208:	30 e2       	ldi	r19, 0x20	; 32
    120a:	30 83       	st	Z, r19
    120c:	31 97       	sbiw	r30, 0x01	; 1
    120e:	31 e2       	ldi	r19, 0x21	; 33
    1210:	30 83       	st	Z, r19
    1212:	31 97       	sbiw	r30, 0x01	; 1
    1214:	20 83       	st	Z, r18
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	23 e2       	ldi	r18, 0x23	; 35
    121a:	20 83       	st	Z, r18
    121c:	31 97       	sbiw	r30, 0x01	; 1
    121e:	40 83       	st	Z, r20
    1220:	31 97       	sbiw	r30, 0x01	; 1
    1222:	50 83       	st	Z, r21
    1224:	31 97       	sbiw	r30, 0x01	; 1
    1226:	26 e2       	ldi	r18, 0x26	; 38
    1228:	20 83       	st	Z, r18
    122a:	31 97       	sbiw	r30, 0x01	; 1
    122c:	27 e2       	ldi	r18, 0x27	; 39
    122e:	20 83       	st	Z, r18
    1230:	31 97       	sbiw	r30, 0x01	; 1
    1232:	28 e2       	ldi	r18, 0x28	; 40
    1234:	20 83       	st	Z, r18
    1236:	31 97       	sbiw	r30, 0x01	; 1
    1238:	29 e2       	ldi	r18, 0x29	; 41
    123a:	20 83       	st	Z, r18
    123c:	31 97       	sbiw	r30, 0x01	; 1
    123e:	20 e3       	ldi	r18, 0x30	; 48
    1240:	20 83       	st	Z, r18
    1242:	31 97       	sbiw	r30, 0x01	; 1
    1244:	21 e3       	ldi	r18, 0x31	; 49
    1246:	20 83       	st	Z, r18
    1248:	86 97       	sbiw	r24, 0x26	; 38
    124a:	08 95       	ret

0000124c <xPortStartScheduler>:
    124c:	10 92 89 00 	sts	0x0089, r1
    1250:	8c e7       	ldi	r24, 0x7C	; 124
    1252:	80 93 88 00 	sts	0x0088, r24
    1256:	8b e0       	ldi	r24, 0x0B	; 11
    1258:	80 93 81 00 	sts	0x0081, r24
    125c:	ef e6       	ldi	r30, 0x6F	; 111
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	82 60       	ori	r24, 0x02	; 2
    1264:	80 83       	st	Z, r24
    1266:	a0 91 df 07 	lds	r26, 0x07DF
    126a:	b0 91 e0 07 	lds	r27, 0x07E0
    126e:	cd 91       	ld	r28, X+
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	dd 91       	ld	r29, X+
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	ff 91       	pop	r31
    1278:	ef 91       	pop	r30
    127a:	df 91       	pop	r29
    127c:	cf 91       	pop	r28
    127e:	bf 91       	pop	r27
    1280:	af 91       	pop	r26
    1282:	9f 91       	pop	r25
    1284:	8f 91       	pop	r24
    1286:	7f 91       	pop	r23
    1288:	6f 91       	pop	r22
    128a:	5f 91       	pop	r21
    128c:	4f 91       	pop	r20
    128e:	3f 91       	pop	r19
    1290:	2f 91       	pop	r18
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	9f 90       	pop	r9
    12a4:	8f 90       	pop	r8
    12a6:	7f 90       	pop	r7
    12a8:	6f 90       	pop	r6
    12aa:	5f 90       	pop	r5
    12ac:	4f 90       	pop	r4
    12ae:	3f 90       	pop	r3
    12b0:	2f 90       	pop	r2
    12b2:	1f 90       	pop	r1
    12b4:	0f 90       	pop	r0
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	0f 90       	pop	r0
    12ba:	08 95       	ret
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	08 95       	ret

000012c0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    12c0:	0f 92       	push	r0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	0f 92       	push	r0
    12c8:	1f 92       	push	r1
    12ca:	11 24       	eor	r1, r1
    12cc:	2f 92       	push	r2
    12ce:	3f 92       	push	r3
    12d0:	4f 92       	push	r4
    12d2:	5f 92       	push	r5
    12d4:	6f 92       	push	r6
    12d6:	7f 92       	push	r7
    12d8:	8f 92       	push	r8
    12da:	9f 92       	push	r9
    12dc:	af 92       	push	r10
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	2f 93       	push	r18
    12ee:	3f 93       	push	r19
    12f0:	4f 93       	push	r20
    12f2:	5f 93       	push	r21
    12f4:	6f 93       	push	r22
    12f6:	7f 93       	push	r23
    12f8:	8f 93       	push	r24
    12fa:	9f 93       	push	r25
    12fc:	af 93       	push	r26
    12fe:	bf 93       	push	r27
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
    1308:	a0 91 df 07 	lds	r26, 0x07DF
    130c:	b0 91 e0 07 	lds	r27, 0x07E0
    1310:	0d b6       	in	r0, 0x3d	; 61
    1312:	0d 92       	st	X+, r0
    1314:	0e b6       	in	r0, 0x3e	; 62
    1316:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1318:	8a d3       	rcall	.+1812   	; 0x1a2e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    131a:	a0 91 df 07 	lds	r26, 0x07DF
    131e:	b0 91 e0 07 	lds	r27, 0x07E0
    1322:	cd 91       	ld	r28, X+
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	dd 91       	ld	r29, X+
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	bf 91       	pop	r27
    1334:	af 91       	pop	r26
    1336:	9f 91       	pop	r25
    1338:	8f 91       	pop	r24
    133a:	7f 91       	pop	r23
    133c:	6f 91       	pop	r22
    133e:	5f 91       	pop	r21
    1340:	4f 91       	pop	r20
    1342:	3f 91       	pop	r19
    1344:	2f 91       	pop	r18
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	9f 90       	pop	r9
    1358:	8f 90       	pop	r8
    135a:	7f 90       	pop	r7
    135c:	6f 90       	pop	r6
    135e:	5f 90       	pop	r5
    1360:	4f 90       	pop	r4
    1362:	3f 90       	pop	r3
    1364:	2f 90       	pop	r2
    1366:	1f 90       	pop	r1
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    136e:	08 95       	ret

00001370 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	0f 92       	push	r0
    1378:	1f 92       	push	r1
    137a:	11 24       	eor	r1, r1
    137c:	2f 92       	push	r2
    137e:	3f 92       	push	r3
    1380:	4f 92       	push	r4
    1382:	5f 92       	push	r5
    1384:	6f 92       	push	r6
    1386:	7f 92       	push	r7
    1388:	8f 92       	push	r8
    138a:	9f 92       	push	r9
    138c:	af 92       	push	r10
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ef 93       	push	r30
    13b6:	ff 93       	push	r31
    13b8:	a0 91 df 07 	lds	r26, 0x07DF
    13bc:	b0 91 e0 07 	lds	r27, 0x07E0
    13c0:	0d b6       	in	r0, 0x3d	; 61
    13c2:	0d 92       	st	X+, r0
    13c4:	0e b6       	in	r0, 0x3e	; 62
    13c6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    13c8:	95 d1       	rcall	.+810    	; 0x16f4 <vTaskIncrementTick>
	vTaskSwitchContext();
    13ca:	31 d3       	rcall	.+1634   	; 0x1a2e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13cc:	a0 91 df 07 	lds	r26, 0x07DF
    13d0:	b0 91 e0 07 	lds	r27, 0x07E0
    13d4:	cd 91       	ld	r28, X+
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	dd 91       	ld	r29, X+
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	7f 90       	pop	r7
    140e:	6f 90       	pop	r6
    1410:	5f 90       	pop	r5
    1412:	4f 90       	pop	r4
    1414:	3f 90       	pop	r3
    1416:	2f 90       	pop	r2
    1418:	1f 90       	pop	r1
    141a:	0f 90       	pop	r0
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1420:	08 95       	ret

00001422 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1422:	a6 df       	rcall	.-180    	; 0x1370 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1424:	18 95       	reti

00001426 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ec 01       	movw	r28, r24
    142c:	e0 91 df 07 	lds	r30, 0x07DF
    1430:	f0 91 e0 07 	lds	r31, 0x07E0
    1434:	93 83       	std	Z+3, r25	; 0x03
    1436:	82 83       	std	Z+2, r24	; 0x02
    1438:	80 91 8f 07 	lds	r24, 0x078F
    143c:	90 91 90 07 	lds	r25, 0x0790
    1440:	c8 17       	cp	r28, r24
    1442:	d9 07       	cpc	r29, r25
    1444:	68 f4       	brcc	.+26     	; 0x1460 <prvAddCurrentTaskToDelayedList+0x3a>
    1446:	60 91 df 07 	lds	r22, 0x07DF
    144a:	70 91 e0 07 	lds	r23, 0x07E0
    144e:	80 91 a5 07 	lds	r24, 0x07A5
    1452:	90 91 a6 07 	lds	r25, 0x07A6
    1456:	6e 5f       	subi	r22, 0xFE	; 254
    1458:	7f 4f       	sbci	r23, 0xFF	; 255
    145a:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    145e:	17 c0       	rjmp	.+46     	; 0x148e <prvAddCurrentTaskToDelayedList+0x68>
    1460:	60 91 df 07 	lds	r22, 0x07DF
    1464:	70 91 e0 07 	lds	r23, 0x07E0
    1468:	80 91 a7 07 	lds	r24, 0x07A7
    146c:	90 91 a8 07 	lds	r25, 0x07A8
    1470:	6e 5f       	subi	r22, 0xFE	; 254
    1472:	7f 4f       	sbci	r23, 0xFF	; 255
    1474:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    1478:	80 91 48 01 	lds	r24, 0x0148
    147c:	90 91 49 01 	lds	r25, 0x0149
    1480:	c8 17       	cp	r28, r24
    1482:	d9 07       	cpc	r29, r25
    1484:	20 f4       	brcc	.+8      	; 0x148e <prvAddCurrentTaskToDelayedList+0x68>
    1486:	d0 93 49 01 	sts	0x0149, r29
    148a:	c0 93 48 01 	sts	0x0148, r28
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <xTaskGenericCreate>:
    1494:	4f 92       	push	r4
    1496:	5f 92       	push	r5
    1498:	6f 92       	push	r6
    149a:	7f 92       	push	r7
    149c:	8f 92       	push	r8
    149e:	9f 92       	push	r9
    14a0:	af 92       	push	r10
    14a2:	bf 92       	push	r11
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	5c 01       	movw	r10, r24
    14b6:	4b 01       	movw	r8, r22
    14b8:	3a 01       	movw	r6, r20
    14ba:	29 01       	movw	r4, r18
    14bc:	81 e2       	ldi	r24, 0x21	; 33
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    14c4:	ec 01       	movw	r28, r24
    14c6:	89 2b       	or	r24, r25
    14c8:	09 f4       	brne	.+2      	; 0x14cc <xTaskGenericCreate+0x38>
    14ca:	d3 c0       	rjmp	.+422    	; 0x1672 <xTaskGenericCreate+0x1de>
    14cc:	c1 14       	cp	r12, r1
    14ce:	d1 04       	cpc	r13, r1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <xTaskGenericCreate+0x40>
    14d2:	cb c0       	rjmp	.+406    	; 0x166a <xTaskGenericCreate+0x1d6>
    14d4:	c3 01       	movw	r24, r6
    14d6:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    14da:	98 8f       	std	Y+24, r25	; 0x18
    14dc:	8f 8b       	std	Y+23, r24	; 0x17
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	21 f4       	brne	.+8      	; 0x14ea <xTaskGenericCreate+0x56>
    14e2:	ce 01       	movw	r24, r28
    14e4:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    14e8:	c4 c0       	rjmp	.+392    	; 0x1672 <xTaskGenericCreate+0x1de>
    14ea:	a3 01       	movw	r20, r6
    14ec:	65 ea       	ldi	r22, 0xA5	; 165
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	e6 d5       	rcall	.+3020   	; 0x20be <memset>
    14f2:	93 01       	movw	r18, r6
    14f4:	21 50       	subi	r18, 0x01	; 1
    14f6:	31 09       	sbc	r19, r1
    14f8:	8f 89       	ldd	r24, Y+23	; 0x17
    14fa:	98 8d       	ldd	r25, Y+24	; 0x18
    14fc:	3c 01       	movw	r6, r24
    14fe:	62 0e       	add	r6, r18
    1500:	73 1e       	adc	r7, r19
    1502:	48 e0       	ldi	r20, 0x08	; 8
    1504:	50 e0       	ldi	r21, 0x00	; 0
    1506:	b4 01       	movw	r22, r8
    1508:	ce 01       	movw	r24, r28
    150a:	49 96       	adiw	r24, 0x19	; 25
    150c:	df d5       	rcall	.+3006   	; 0x20cc <strncpy>
    150e:	18 a2       	std	Y+32, r1	; 0x20
    1510:	10 2f       	mov	r17, r16
    1512:	04 30       	cpi	r16, 0x04	; 4
    1514:	08 f0       	brcs	.+2      	; 0x1518 <xTaskGenericCreate+0x84>
    1516:	13 e0       	ldi	r17, 0x03	; 3
    1518:	1e 8b       	std	Y+22, r17	; 0x16
    151a:	6e 01       	movw	r12, r28
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	c8 0e       	add	r12, r24
    1520:	d1 1c       	adc	r13, r1
    1522:	c6 01       	movw	r24, r12
    1524:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    1528:	ce 01       	movw	r24, r28
    152a:	0c 96       	adiw	r24, 0x0c	; 12
    152c:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    1530:	d9 87       	std	Y+9, r29	; 0x09
    1532:	c8 87       	std	Y+8, r28	; 0x08
    1534:	84 e0       	ldi	r24, 0x04	; 4
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	81 1b       	sub	r24, r17
    153a:	91 09       	sbc	r25, r1
    153c:	9d 87       	std	Y+13, r25	; 0x0d
    153e:	8c 87       	std	Y+12, r24	; 0x0c
    1540:	db 8b       	std	Y+19, r29	; 0x13
    1542:	ca 8b       	std	Y+18, r28	; 0x12
    1544:	a2 01       	movw	r20, r4
    1546:	b5 01       	movw	r22, r10
    1548:	c3 01       	movw	r24, r6
    154a:	14 de       	rcall	.-984    	; 0x1174 <pxPortInitialiseStack>
    154c:	99 83       	std	Y+1, r25	; 0x01
    154e:	88 83       	st	Y, r24
    1550:	e1 14       	cp	r14, r1
    1552:	f1 04       	cpc	r15, r1
    1554:	19 f0       	breq	.+6      	; 0x155c <xTaskGenericCreate+0xc8>
    1556:	f7 01       	movw	r30, r14
    1558:	d1 83       	std	Z+1, r29	; 0x01
    155a:	c0 83       	st	Z, r28
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	0f 92       	push	r0
    1562:	80 91 91 07 	lds	r24, 0x0791
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	80 93 91 07 	sts	0x0791, r24
    156c:	80 91 df 07 	lds	r24, 0x07DF
    1570:	90 91 e0 07 	lds	r25, 0x07E0
    1574:	89 2b       	or	r24, r25
    1576:	a9 f5       	brne	.+106    	; 0x15e2 <xTaskGenericCreate+0x14e>
    1578:	d0 93 e0 07 	sts	0x07E0, r29
    157c:	c0 93 df 07 	sts	0x07DF, r28
    1580:	80 91 91 07 	lds	r24, 0x0791
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	e1 f5       	brne	.+120    	; 0x1600 <xTaskGenericCreate+0x16c>
    1588:	8b eb       	ldi	r24, 0xBB	; 187
    158a:	97 e0       	ldi	r25, 0x07	; 7
    158c:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1590:	84 ec       	ldi	r24, 0xC4	; 196
    1592:	97 e0       	ldi	r25, 0x07	; 7
    1594:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1598:	8d ec       	ldi	r24, 0xCD	; 205
    159a:	97 e0       	ldi	r25, 0x07	; 7
    159c:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15a0:	86 ed       	ldi	r24, 0xD6	; 214
    15a2:	97 e0       	ldi	r25, 0x07	; 7
    15a4:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15a8:	82 eb       	ldi	r24, 0xB2	; 178
    15aa:	97 e0       	ldi	r25, 0x07	; 7
    15ac:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15b0:	89 ea       	ldi	r24, 0xA9	; 169
    15b2:	97 e0       	ldi	r25, 0x07	; 7
    15b4:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15b8:	8c e9       	ldi	r24, 0x9C	; 156
    15ba:	97 e0       	ldi	r25, 0x07	; 7
    15bc:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15c0:	83 e9       	ldi	r24, 0x93	; 147
    15c2:	97 e0       	ldi	r25, 0x07	; 7
    15c4:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    15c8:	82 eb       	ldi	r24, 0xB2	; 178
    15ca:	97 e0       	ldi	r25, 0x07	; 7
    15cc:	90 93 a8 07 	sts	0x07A8, r25
    15d0:	80 93 a7 07 	sts	0x07A7, r24
    15d4:	89 ea       	ldi	r24, 0xA9	; 169
    15d6:	97 e0       	ldi	r25, 0x07	; 7
    15d8:	90 93 a6 07 	sts	0x07A6, r25
    15dc:	80 93 a5 07 	sts	0x07A5, r24
    15e0:	0f c0       	rjmp	.+30     	; 0x1600 <xTaskGenericCreate+0x16c>
    15e2:	80 91 8c 07 	lds	r24, 0x078C
    15e6:	81 11       	cpse	r24, r1
    15e8:	0b c0       	rjmp	.+22     	; 0x1600 <xTaskGenericCreate+0x16c>
    15ea:	e0 91 df 07 	lds	r30, 0x07DF
    15ee:	f0 91 e0 07 	lds	r31, 0x07E0
    15f2:	86 89       	ldd	r24, Z+22	; 0x16
    15f4:	08 17       	cp	r16, r24
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <xTaskGenericCreate+0x16c>
    15f8:	d0 93 e0 07 	sts	0x07E0, r29
    15fc:	c0 93 df 07 	sts	0x07DF, r28
    1600:	8e 89       	ldd	r24, Y+22	; 0x16
    1602:	90 91 8e 07 	lds	r25, 0x078E
    1606:	98 17       	cp	r25, r24
    1608:	10 f4       	brcc	.+4      	; 0x160e <xTaskGenericCreate+0x17a>
    160a:	80 93 8e 07 	sts	0x078E, r24
    160e:	90 91 87 07 	lds	r25, 0x0787
    1612:	9f 5f       	subi	r25, 0xFF	; 255
    1614:	90 93 87 07 	sts	0x0787, r25
    1618:	90 91 8d 07 	lds	r25, 0x078D
    161c:	98 17       	cp	r25, r24
    161e:	10 f4       	brcc	.+4      	; 0x1624 <xTaskGenericCreate+0x190>
    1620:	80 93 8d 07 	sts	0x078D, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	9c 01       	movw	r18, r24
    1628:	22 0f       	add	r18, r18
    162a:	33 1f       	adc	r19, r19
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	22 0f       	add	r18, r18
    1632:	33 1f       	adc	r19, r19
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	b6 01       	movw	r22, r12
    163a:	85 54       	subi	r24, 0x45	; 69
    163c:	98 4f       	sbci	r25, 0xF8	; 248
    163e:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	80 91 8c 07 	lds	r24, 0x078C
    164a:	88 23       	and	r24, r24
    164c:	51 f0       	breq	.+20     	; 0x1662 <xTaskGenericCreate+0x1ce>
    164e:	e0 91 df 07 	lds	r30, 0x07DF
    1652:	f0 91 e0 07 	lds	r31, 0x07E0
    1656:	86 89       	ldd	r24, Z+22	; 0x16
    1658:	80 17       	cp	r24, r16
    165a:	28 f4       	brcc	.+10     	; 0x1666 <xTaskGenericCreate+0x1d2>
    165c:	31 de       	rcall	.-926    	; 0x12c0 <vPortYield>
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	09 c0       	rjmp	.+18     	; 0x1674 <xTaskGenericCreate+0x1e0>
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	07 c0       	rjmp	.+14     	; 0x1674 <xTaskGenericCreate+0x1e0>
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	05 c0       	rjmp	.+10     	; 0x1674 <xTaskGenericCreate+0x1e0>
    166a:	d8 8e       	std	Y+24, r13	; 0x18
    166c:	cf 8a       	std	Y+23, r12	; 0x17
    166e:	c6 01       	movw	r24, r12
    1670:	3c cf       	rjmp	.-392    	; 0x14ea <xTaskGenericCreate+0x56>
    1672:	8f ef       	ldi	r24, 0xFF	; 255
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	08 95       	ret

00001696 <vTaskStartScheduler>:
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	a1 2c       	mov	r10, r1
    16a6:	b1 2c       	mov	r11, r1
    16a8:	c1 2c       	mov	r12, r1
    16aa:	d1 2c       	mov	r13, r1
    16ac:	e1 2c       	mov	r14, r1
    16ae:	f1 2c       	mov	r15, r1
    16b0:	00 e0       	ldi	r16, 0x00	; 0
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	45 e5       	ldi	r20, 0x55	; 85
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	6d e7       	ldi	r22, 0x7D	; 125
    16bc:	71 e0       	ldi	r23, 0x01	; 1
    16be:	8e ed       	ldi	r24, 0xDE	; 222
    16c0:	9c e0       	ldi	r25, 0x0C	; 12
    16c2:	e8 de       	rcall	.-560    	; 0x1494 <xTaskGenericCreate>
    16c4:	81 30       	cpi	r24, 0x01	; 1
    16c6:	41 f4       	brne	.+16     	; 0x16d8 <vTaskStartScheduler+0x42>
    16c8:	f8 94       	cli
    16ca:	80 93 8c 07 	sts	0x078C, r24
    16ce:	10 92 90 07 	sts	0x0790, r1
    16d2:	10 92 8f 07 	sts	0x078F, r1
    16d6:	ba dd       	rcall	.-1164   	; 0x124c <xPortStartScheduler>
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	08 95       	ret

000016e8 <vTaskSuspendAll>:
    16e8:	80 91 8b 07 	lds	r24, 0x078B
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	80 93 8b 07 	sts	0x078B, r24
    16f2:	08 95       	ret

000016f4 <vTaskIncrementTick>:
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	80 91 8b 07 	lds	r24, 0x078B
    1700:	81 11       	cpse	r24, r1
    1702:	b2 c0       	rjmp	.+356    	; 0x1868 <vTaskIncrementTick+0x174>
    1704:	80 91 8f 07 	lds	r24, 0x078F
    1708:	90 91 90 07 	lds	r25, 0x0790
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	90 93 90 07 	sts	0x0790, r25
    1712:	80 93 8f 07 	sts	0x078F, r24
    1716:	80 91 8f 07 	lds	r24, 0x078F
    171a:	90 91 90 07 	lds	r25, 0x0790
    171e:	89 2b       	or	r24, r25
    1720:	99 f5       	brne	.+102    	; 0x1788 <vTaskIncrementTick+0x94>
    1722:	80 91 a7 07 	lds	r24, 0x07A7
    1726:	90 91 a8 07 	lds	r25, 0x07A8
    172a:	20 91 a5 07 	lds	r18, 0x07A5
    172e:	30 91 a6 07 	lds	r19, 0x07A6
    1732:	30 93 a8 07 	sts	0x07A8, r19
    1736:	20 93 a7 07 	sts	0x07A7, r18
    173a:	90 93 a6 07 	sts	0x07A6, r25
    173e:	80 93 a5 07 	sts	0x07A5, r24
    1742:	80 91 88 07 	lds	r24, 0x0788
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	80 93 88 07 	sts	0x0788, r24
    174c:	e0 91 a7 07 	lds	r30, 0x07A7
    1750:	f0 91 a8 07 	lds	r31, 0x07A8
    1754:	80 81       	ld	r24, Z
    1756:	81 11       	cpse	r24, r1
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <vTaskIncrementTick+0x74>
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	9f ef       	ldi	r25, 0xFF	; 255
    175e:	90 93 49 01 	sts	0x0149, r25
    1762:	80 93 48 01 	sts	0x0148, r24
    1766:	10 c0       	rjmp	.+32     	; 0x1788 <vTaskIncrementTick+0x94>
    1768:	e0 91 a7 07 	lds	r30, 0x07A7
    176c:	f0 91 a8 07 	lds	r31, 0x07A8
    1770:	05 80       	ldd	r0, Z+5	; 0x05
    1772:	f6 81       	ldd	r31, Z+6	; 0x06
    1774:	e0 2d       	mov	r30, r0
    1776:	06 80       	ldd	r0, Z+6	; 0x06
    1778:	f7 81       	ldd	r31, Z+7	; 0x07
    177a:	e0 2d       	mov	r30, r0
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	90 93 49 01 	sts	0x0149, r25
    1784:	80 93 48 01 	sts	0x0148, r24
    1788:	20 91 8f 07 	lds	r18, 0x078F
    178c:	30 91 90 07 	lds	r19, 0x0790
    1790:	80 91 48 01 	lds	r24, 0x0148
    1794:	90 91 49 01 	lds	r25, 0x0149
    1798:	28 17       	cp	r18, r24
    179a:	39 07       	cpc	r19, r25
    179c:	08 f4       	brcc	.+2      	; 0x17a0 <vTaskIncrementTick+0xac>
    179e:	69 c0       	rjmp	.+210    	; 0x1872 <vTaskIncrementTick+0x17e>
    17a0:	e0 91 a7 07 	lds	r30, 0x07A7
    17a4:	f0 91 a8 07 	lds	r31, 0x07A8
    17a8:	80 81       	ld	r24, Z
    17aa:	88 23       	and	r24, r24
    17ac:	99 f0       	breq	.+38     	; 0x17d4 <vTaskIncrementTick+0xe0>
    17ae:	e0 91 a7 07 	lds	r30, 0x07A7
    17b2:	f0 91 a8 07 	lds	r31, 0x07A8
    17b6:	05 80       	ldd	r0, Z+5	; 0x05
    17b8:	f6 81       	ldd	r31, Z+6	; 0x06
    17ba:	e0 2d       	mov	r30, r0
    17bc:	c6 81       	ldd	r28, Z+6	; 0x06
    17be:	d7 81       	ldd	r29, Z+7	; 0x07
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	20 91 8f 07 	lds	r18, 0x078F
    17c8:	30 91 90 07 	lds	r19, 0x0790
    17cc:	28 17       	cp	r18, r24
    17ce:	39 07       	cpc	r19, r25
    17d0:	f8 f4       	brcc	.+62     	; 0x1810 <vTaskIncrementTick+0x11c>
    17d2:	19 c0       	rjmp	.+50     	; 0x1806 <vTaskIncrementTick+0x112>
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	9f ef       	ldi	r25, 0xFF	; 255
    17d8:	90 93 49 01 	sts	0x0149, r25
    17dc:	80 93 48 01 	sts	0x0148, r24
    17e0:	48 c0       	rjmp	.+144    	; 0x1872 <vTaskIncrementTick+0x17e>
    17e2:	e0 91 a7 07 	lds	r30, 0x07A7
    17e6:	f0 91 a8 07 	lds	r31, 0x07A8
    17ea:	05 80       	ldd	r0, Z+5	; 0x05
    17ec:	f6 81       	ldd	r31, Z+6	; 0x06
    17ee:	e0 2d       	mov	r30, r0
    17f0:	c6 81       	ldd	r28, Z+6	; 0x06
    17f2:	d7 81       	ldd	r29, Z+7	; 0x07
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	9b 81       	ldd	r25, Y+3	; 0x03
    17f8:	20 91 8f 07 	lds	r18, 0x078F
    17fc:	30 91 90 07 	lds	r19, 0x0790
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	28 f4       	brcc	.+10     	; 0x1810 <vTaskIncrementTick+0x11c>
    1806:	90 93 49 01 	sts	0x0149, r25
    180a:	80 93 48 01 	sts	0x0148, r24
    180e:	31 c0       	rjmp	.+98     	; 0x1872 <vTaskIncrementTick+0x17e>
    1810:	8e 01       	movw	r16, r28
    1812:	0e 5f       	subi	r16, 0xFE	; 254
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    181c:	8c 89       	ldd	r24, Y+20	; 0x14
    181e:	9d 89       	ldd	r25, Y+21	; 0x15
    1820:	89 2b       	or	r24, r25
    1822:	21 f0       	breq	.+8      	; 0x182c <vTaskIncrementTick+0x138>
    1824:	ce 01       	movw	r24, r28
    1826:	0c 96       	adiw	r24, 0x0c	; 12
    1828:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    182c:	2e 89       	ldd	r18, Y+22	; 0x16
    182e:	80 91 8d 07 	lds	r24, 0x078D
    1832:	82 17       	cp	r24, r18
    1834:	10 f4       	brcc	.+4      	; 0x183a <vTaskIncrementTick+0x146>
    1836:	20 93 8d 07 	sts	0x078D, r18
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	c9 01       	movw	r24, r18
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	b8 01       	movw	r22, r16
    1850:	85 54       	subi	r24, 0x45	; 69
    1852:	98 4f       	sbci	r25, 0xF8	; 248
    1854:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    1858:	e0 91 a7 07 	lds	r30, 0x07A7
    185c:	f0 91 a8 07 	lds	r31, 0x07A8
    1860:	80 81       	ld	r24, Z
    1862:	81 11       	cpse	r24, r1
    1864:	be cf       	rjmp	.-132    	; 0x17e2 <vTaskIncrementTick+0xee>
    1866:	b6 cf       	rjmp	.-148    	; 0x17d4 <vTaskIncrementTick+0xe0>
    1868:	80 91 8a 07 	lds	r24, 0x078A
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	80 93 8a 07 	sts	0x078A, r24
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	08 95       	ret

0000187c <xTaskResumeAll>:
    187c:	cf 92       	push	r12
    187e:	df 92       	push	r13
    1880:	ef 92       	push	r14
    1882:	ff 92       	push	r15
    1884:	0f 93       	push	r16
    1886:	1f 93       	push	r17
    1888:	cf 93       	push	r28
    188a:	df 93       	push	r29
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	0f 92       	push	r0
    1892:	80 91 8b 07 	lds	r24, 0x078B
    1896:	81 50       	subi	r24, 0x01	; 1
    1898:	80 93 8b 07 	sts	0x078B, r24
    189c:	80 91 8b 07 	lds	r24, 0x078B
    18a0:	81 11       	cpse	r24, r1
    18a2:	62 c0       	rjmp	.+196    	; 0x1968 <xTaskResumeAll+0xec>
    18a4:	80 91 91 07 	lds	r24, 0x0791
    18a8:	81 11       	cpse	r24, r1
    18aa:	32 c0       	rjmp	.+100    	; 0x1910 <xTaskResumeAll+0x94>
    18ac:	60 c0       	rjmp	.+192    	; 0x196e <xTaskResumeAll+0xf2>
    18ae:	d7 01       	movw	r26, r14
    18b0:	15 96       	adiw	r26, 0x05	; 5
    18b2:	ed 91       	ld	r30, X+
    18b4:	fc 91       	ld	r31, X
    18b6:	16 97       	sbiw	r26, 0x06	; 6
    18b8:	c6 81       	ldd	r28, Z+6	; 0x06
    18ba:	d7 81       	ldd	r29, Z+7	; 0x07
    18bc:	ce 01       	movw	r24, r28
    18be:	0c 96       	adiw	r24, 0x0c	; 12
    18c0:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18c4:	8e 01       	movw	r16, r28
    18c6:	0e 5f       	subi	r16, 0xFE	; 254
    18c8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ca:	c8 01       	movw	r24, r16
    18cc:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    18d0:	2e 89       	ldd	r18, Y+22	; 0x16
    18d2:	80 91 8d 07 	lds	r24, 0x078D
    18d6:	82 17       	cp	r24, r18
    18d8:	10 f4       	brcc	.+4      	; 0x18de <xTaskResumeAll+0x62>
    18da:	20 93 8d 07 	sts	0x078D, r18
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	c9 01       	movw	r24, r18
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	82 0f       	add	r24, r18
    18f0:	93 1f       	adc	r25, r19
    18f2:	b8 01       	movw	r22, r16
    18f4:	85 54       	subi	r24, 0x45	; 69
    18f6:	98 4f       	sbci	r25, 0xF8	; 248
    18f8:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    18fc:	e0 91 df 07 	lds	r30, 0x07DF
    1900:	f0 91 e0 07 	lds	r31, 0x07E0
    1904:	9e 89       	ldd	r25, Y+22	; 0x16
    1906:	86 89       	ldd	r24, Z+22	; 0x16
    1908:	98 17       	cp	r25, r24
    190a:	58 f0       	brcs	.+22     	; 0x1922 <xTaskResumeAll+0xa6>
    190c:	dc 2c       	mov	r13, r12
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <xTaskResumeAll+0xa6>
    1910:	d1 2c       	mov	r13, r1
    1912:	0f 2e       	mov	r0, r31
    1914:	fc e9       	ldi	r31, 0x9C	; 156
    1916:	ef 2e       	mov	r14, r31
    1918:	f7 e0       	ldi	r31, 0x07	; 7
    191a:	ff 2e       	mov	r15, r31
    191c:	f0 2d       	mov	r31, r0
    191e:	cc 24       	eor	r12, r12
    1920:	c3 94       	inc	r12
    1922:	f7 01       	movw	r30, r14
    1924:	80 81       	ld	r24, Z
    1926:	81 11       	cpse	r24, r1
    1928:	c2 cf       	rjmp	.-124    	; 0x18ae <xTaskResumeAll+0x32>
    192a:	80 91 8a 07 	lds	r24, 0x078A
    192e:	88 23       	and	r24, r24
    1930:	79 f0       	breq	.+30     	; 0x1950 <xTaskResumeAll+0xd4>
    1932:	80 91 8a 07 	lds	r24, 0x078A
    1936:	88 23       	and	r24, r24
    1938:	91 f0       	breq	.+36     	; 0x195e <xTaskResumeAll+0xe2>
    193a:	dc de       	rcall	.-584    	; 0x16f4 <vTaskIncrementTick>
    193c:	80 91 8a 07 	lds	r24, 0x078A
    1940:	81 50       	subi	r24, 0x01	; 1
    1942:	80 93 8a 07 	sts	0x078A, r24
    1946:	80 91 8a 07 	lds	r24, 0x078A
    194a:	81 11       	cpse	r24, r1
    194c:	f6 cf       	rjmp	.-20     	; 0x193a <xTaskResumeAll+0xbe>
    194e:	07 c0       	rjmp	.+14     	; 0x195e <xTaskResumeAll+0xe2>
    1950:	f1 e0       	ldi	r31, 0x01	; 1
    1952:	df 16       	cp	r13, r31
    1954:	21 f0       	breq	.+8      	; 0x195e <xTaskResumeAll+0xe2>
    1956:	80 91 89 07 	lds	r24, 0x0789
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	39 f4       	brne	.+14     	; 0x196c <xTaskResumeAll+0xf0>
    195e:	10 92 89 07 	sts	0x0789, r1
    1962:	ae dc       	rcall	.-1700   	; 0x12c0 <vPortYield>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	03 c0       	rjmp	.+6      	; 0x196e <xTaskResumeAll+0xf2>
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	01 c0       	rjmp	.+2      	; 0x196e <xTaskResumeAll+0xf2>
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret

00001984 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    198a:	89 2b       	or	r24, r25
    198c:	99 f0       	breq	.+38     	; 0x19b4 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    198e:	ac de       	rcall	.-680    	; 0x16e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1990:	80 91 8f 07 	lds	r24, 0x078F
    1994:	90 91 90 07 	lds	r25, 0x0790
    1998:	c8 0f       	add	r28, r24
    199a:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    199c:	80 91 df 07 	lds	r24, 0x07DF
    19a0:	90 91 e0 07 	lds	r25, 0x07E0
    19a4:	02 96       	adiw	r24, 0x02	; 2
    19a6:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    19aa:	ce 01       	movw	r24, r28
    19ac:	3c dd       	rcall	.-1416   	; 0x1426 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    19ae:	66 df       	rcall	.-308    	; 0x187c <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    19b0:	81 11       	cpse	r24, r1
    19b2:	01 c0       	rjmp	.+2      	; 0x19b6 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    19b4:	85 dc       	rcall	.-1782   	; 0x12c0 <vPortYield>
		}
	}
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    19bc:	0f 2e       	mov	r0, r31
    19be:	f3 e9       	ldi	r31, 0x93	; 147
    19c0:	ef 2e       	mov	r14, r31
    19c2:	f7 e0       	ldi	r31, 0x07	; 7
    19c4:	ff 2e       	mov	r15, r31
    19c6:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    19c8:	cb eb       	ldi	r28, 0xBB	; 187
    19ca:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    19cc:	80 91 92 07 	lds	r24, 0x0792
    19d0:	88 23       	and	r24, r24
    19d2:	41 f1       	breq	.+80     	; 0x1a24 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    19d4:	89 de       	rcall	.-750    	; 0x16e8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    19d6:	d7 01       	movw	r26, r14
    19d8:	1c 91       	ld	r17, X
			xTaskResumeAll();
    19da:	50 df       	rcall	.-352    	; 0x187c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    19dc:	11 23       	and	r17, r17
    19de:	11 f1       	breq	.+68     	; 0x1a24 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    19e6:	d7 01       	movw	r26, r14
    19e8:	15 96       	adiw	r26, 0x05	; 5
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	16 97       	sbiw	r26, 0x06	; 6
    19f0:	06 81       	ldd	r16, Z+6	; 0x06
    19f2:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    19f4:	c8 01       	movw	r24, r16
    19f6:	02 96       	adiw	r24, 0x02	; 2
    19f8:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
					--uxCurrentNumberOfTasks;
    19fc:	80 91 91 07 	lds	r24, 0x0791
    1a00:	81 50       	subi	r24, 0x01	; 1
    1a02:	80 93 91 07 	sts	0x0791, r24
					--uxTasksDeleted;
    1a06:	80 91 92 07 	lds	r24, 0x0792
    1a0a:	81 50       	subi	r24, 0x01	; 1
    1a0c:	80 93 92 07 	sts	0x0792, r24
				}
				taskEXIT_CRITICAL();
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1a14:	f8 01       	movw	r30, r16
    1a16:	87 89       	ldd	r24, Z+23	; 0x17
    1a18:	90 8d       	ldd	r25, Z+24	; 0x18
    1a1a:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
		vPortFree( pxTCB );
    1a1e:	c8 01       	movw	r24, r16
    1a20:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1a24:	88 81       	ld	r24, Y
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	88 f2       	brcs	.-94     	; 0x19cc <prvIdleTask+0x10>
			{
				taskYIELD();
    1a2a:	4a dc       	rcall	.-1900   	; 0x12c0 <vPortYield>
    1a2c:	cf cf       	rjmp	.-98     	; 0x19cc <prvIdleTask+0x10>

00001a2e <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    1a2e:	80 91 8b 07 	lds	r24, 0x078B
    1a32:	81 11       	cpse	r24, r1
    1a34:	13 c0       	rjmp	.+38     	; 0x1a5c <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1a36:	80 91 8d 07 	lds	r24, 0x078D
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	ee 0f       	add	r30, r30
    1a48:	ff 1f       	adc	r31, r31
    1a4a:	8e 0f       	add	r24, r30
    1a4c:	9f 1f       	adc	r25, r31
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e5 54       	subi	r30, 0x45	; 69
    1a52:	f8 4f       	sbci	r31, 0xF8	; 248
    1a54:	80 81       	ld	r24, Z
    1a56:	88 23       	and	r24, r24
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <vTaskSwitchContext+0x36>
    1a5a:	1b c0       	rjmp	.+54     	; 0x1a92 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	80 93 89 07 	sts	0x0789, r24
    1a62:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1a64:	80 91 8d 07 	lds	r24, 0x078D
    1a68:	81 50       	subi	r24, 0x01	; 1
    1a6a:	80 93 8d 07 	sts	0x078D, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1a6e:	80 91 8d 07 	lds	r24, 0x078D
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	fc 01       	movw	r30, r24
    1a76:	ee 0f       	add	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	ee 0f       	add	r30, r30
    1a80:	ff 1f       	adc	r31, r31
    1a82:	8e 0f       	add	r24, r30
    1a84:	9f 1f       	adc	r25, r31
    1a86:	fc 01       	movw	r30, r24
    1a88:	e5 54       	subi	r30, 0x45	; 69
    1a8a:	f8 4f       	sbci	r31, 0xF8	; 248
    1a8c:	80 81       	ld	r24, Z
    1a8e:	88 23       	and	r24, r24
    1a90:	49 f3       	breq	.-46     	; 0x1a64 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1a92:	80 91 8d 07 	lds	r24, 0x078D
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9c 01       	movw	r18, r24
    1a9a:	22 0f       	add	r18, r18
    1a9c:	33 1f       	adc	r19, r19
    1a9e:	22 0f       	add	r18, r18
    1aa0:	33 1f       	adc	r19, r19
    1aa2:	22 0f       	add	r18, r18
    1aa4:	33 1f       	adc	r19, r19
    1aa6:	28 0f       	add	r18, r24
    1aa8:	39 1f       	adc	r19, r25
    1aaa:	d9 01       	movw	r26, r18
    1aac:	a5 54       	subi	r26, 0x45	; 69
    1aae:	b8 4f       	sbci	r27, 0xF8	; 248
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	ed 91       	ld	r30, X+
    1ab4:	fc 91       	ld	r31, X
    1ab6:	12 97       	sbiw	r26, 0x02	; 2
    1ab8:	02 80       	ldd	r0, Z+2	; 0x02
    1aba:	f3 81       	ldd	r31, Z+3	; 0x03
    1abc:	e0 2d       	mov	r30, r0
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	fc 93       	st	X, r31
    1ac2:	ee 93       	st	-X, r30
    1ac4:	11 97       	sbiw	r26, 0x01	; 1
    1ac6:	22 54       	subi	r18, 0x42	; 66
    1ac8:	38 4f       	sbci	r19, 0xF8	; 248
    1aca:	e2 17       	cp	r30, r18
    1acc:	f3 07       	cpc	r31, r19
    1ace:	29 f4       	brne	.+10     	; 0x1ada <vTaskSwitchContext+0xac>
    1ad0:	22 81       	ldd	r18, Z+2	; 0x02
    1ad2:	33 81       	ldd	r19, Z+3	; 0x03
    1ad4:	fd 01       	movw	r30, r26
    1ad6:	32 83       	std	Z+2, r19	; 0x02
    1ad8:	21 83       	std	Z+1, r18	; 0x01
    1ada:	fc 01       	movw	r30, r24
    1adc:	ee 0f       	add	r30, r30
    1ade:	ff 1f       	adc	r31, r31
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	ee 0f       	add	r30, r30
    1ae6:	ff 1f       	adc	r31, r31
    1ae8:	8e 0f       	add	r24, r30
    1aea:	9f 1f       	adc	r25, r31
    1aec:	fc 01       	movw	r30, r24
    1aee:	e5 54       	subi	r30, 0x45	; 69
    1af0:	f8 4f       	sbci	r31, 0xF8	; 248
    1af2:	01 80       	ldd	r0, Z+1	; 0x01
    1af4:	f2 81       	ldd	r31, Z+2	; 0x02
    1af6:	e0 2d       	mov	r30, r0
    1af8:	86 81       	ldd	r24, Z+6	; 0x06
    1afa:	97 81       	ldd	r25, Z+7	; 0x07
    1afc:	90 93 e0 07 	sts	0x07E0, r25
    1b00:	80 93 df 07 	sts	0x07DF, r24
    1b04:	08 95       	ret

00001b06 <__subsf3>:
    1b06:	50 58       	subi	r21, 0x80	; 128

00001b08 <__addsf3>:
    1b08:	bb 27       	eor	r27, r27
    1b0a:	aa 27       	eor	r26, r26
    1b0c:	0e d0       	rcall	.+28     	; 0x1b2a <__addsf3x>
    1b0e:	fb c0       	rjmp	.+502    	; 0x1d06 <__fp_round>
    1b10:	ec d0       	rcall	.+472    	; 0x1cea <__fp_pscA>
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <__addsf3+0x18>
    1b14:	f1 d0       	rcall	.+482    	; 0x1cf8 <__fp_pscB>
    1b16:	20 f0       	brcs	.+8      	; 0x1b20 <__addsf3+0x18>
    1b18:	31 f4       	brne	.+12     	; 0x1b26 <__addsf3+0x1e>
    1b1a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <__addsf3+0x1a>
    1b1e:	1e f4       	brtc	.+6      	; 0x1b26 <__addsf3+0x1e>
    1b20:	e1 c0       	rjmp	.+450    	; 0x1ce4 <__fp_nan>
    1b22:	0e f4       	brtc	.+2      	; 0x1b26 <__addsf3+0x1e>
    1b24:	e0 95       	com	r30
    1b26:	e7 fb       	bst	r30, 7
    1b28:	c9 c0       	rjmp	.+402    	; 0x1cbc <__fp_inf>

00001b2a <__addsf3x>:
    1b2a:	e9 2f       	mov	r30, r25
    1b2c:	fd d0       	rcall	.+506    	; 0x1d28 <__fp_split3>
    1b2e:	80 f3       	brcs	.-32     	; 0x1b10 <__addsf3+0x8>
    1b30:	ba 17       	cp	r27, r26
    1b32:	62 07       	cpc	r22, r18
    1b34:	73 07       	cpc	r23, r19
    1b36:	84 07       	cpc	r24, r20
    1b38:	95 07       	cpc	r25, r21
    1b3a:	18 f0       	brcs	.+6      	; 0x1b42 <__addsf3x+0x18>
    1b3c:	71 f4       	brne	.+28     	; 0x1b5a <__addsf3x+0x30>
    1b3e:	9e f5       	brtc	.+102    	; 0x1ba6 <__addsf3x+0x7c>
    1b40:	15 c1       	rjmp	.+554    	; 0x1d6c <__fp_zero>
    1b42:	0e f4       	brtc	.+2      	; 0x1b46 <__addsf3x+0x1c>
    1b44:	e0 95       	com	r30
    1b46:	0b 2e       	mov	r0, r27
    1b48:	ba 2f       	mov	r27, r26
    1b4a:	a0 2d       	mov	r26, r0
    1b4c:	0b 01       	movw	r0, r22
    1b4e:	b9 01       	movw	r22, r18
    1b50:	90 01       	movw	r18, r0
    1b52:	0c 01       	movw	r0, r24
    1b54:	ca 01       	movw	r24, r20
    1b56:	a0 01       	movw	r20, r0
    1b58:	11 24       	eor	r1, r1
    1b5a:	ff 27       	eor	r31, r31
    1b5c:	59 1b       	sub	r21, r25
    1b5e:	99 f0       	breq	.+38     	; 0x1b86 <__addsf3x+0x5c>
    1b60:	59 3f       	cpi	r21, 0xF9	; 249
    1b62:	50 f4       	brcc	.+20     	; 0x1b78 <__addsf3x+0x4e>
    1b64:	50 3e       	cpi	r21, 0xE0	; 224
    1b66:	68 f1       	brcs	.+90     	; 0x1bc2 <__addsf3x+0x98>
    1b68:	1a 16       	cp	r1, r26
    1b6a:	f0 40       	sbci	r31, 0x00	; 0
    1b6c:	a2 2f       	mov	r26, r18
    1b6e:	23 2f       	mov	r18, r19
    1b70:	34 2f       	mov	r19, r20
    1b72:	44 27       	eor	r20, r20
    1b74:	58 5f       	subi	r21, 0xF8	; 248
    1b76:	f3 cf       	rjmp	.-26     	; 0x1b5e <__addsf3x+0x34>
    1b78:	46 95       	lsr	r20
    1b7a:	37 95       	ror	r19
    1b7c:	27 95       	ror	r18
    1b7e:	a7 95       	ror	r26
    1b80:	f0 40       	sbci	r31, 0x00	; 0
    1b82:	53 95       	inc	r21
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__addsf3x+0x4e>
    1b86:	7e f4       	brtc	.+30     	; 0x1ba6 <__addsf3x+0x7c>
    1b88:	1f 16       	cp	r1, r31
    1b8a:	ba 0b       	sbc	r27, r26
    1b8c:	62 0b       	sbc	r22, r18
    1b8e:	73 0b       	sbc	r23, r19
    1b90:	84 0b       	sbc	r24, r20
    1b92:	ba f0       	brmi	.+46     	; 0x1bc2 <__addsf3x+0x98>
    1b94:	91 50       	subi	r25, 0x01	; 1
    1b96:	a1 f0       	breq	.+40     	; 0x1bc0 <__addsf3x+0x96>
    1b98:	ff 0f       	add	r31, r31
    1b9a:	bb 1f       	adc	r27, r27
    1b9c:	66 1f       	adc	r22, r22
    1b9e:	77 1f       	adc	r23, r23
    1ba0:	88 1f       	adc	r24, r24
    1ba2:	c2 f7       	brpl	.-16     	; 0x1b94 <__addsf3x+0x6a>
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <__addsf3x+0x98>
    1ba6:	ba 0f       	add	r27, r26
    1ba8:	62 1f       	adc	r22, r18
    1baa:	73 1f       	adc	r23, r19
    1bac:	84 1f       	adc	r24, r20
    1bae:	48 f4       	brcc	.+18     	; 0x1bc2 <__addsf3x+0x98>
    1bb0:	87 95       	ror	r24
    1bb2:	77 95       	ror	r23
    1bb4:	67 95       	ror	r22
    1bb6:	b7 95       	ror	r27
    1bb8:	f7 95       	ror	r31
    1bba:	9e 3f       	cpi	r25, 0xFE	; 254
    1bbc:	08 f0       	brcs	.+2      	; 0x1bc0 <__addsf3x+0x96>
    1bbe:	b3 cf       	rjmp	.-154    	; 0x1b26 <__addsf3+0x1e>
    1bc0:	93 95       	inc	r25
    1bc2:	88 0f       	add	r24, r24
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <__addsf3x+0x9e>
    1bc6:	99 27       	eor	r25, r25
    1bc8:	ee 0f       	add	r30, r30
    1bca:	97 95       	ror	r25
    1bcc:	87 95       	ror	r24
    1bce:	08 95       	ret

00001bd0 <__cmpsf2>:
    1bd0:	51 d0       	rcall	.+162    	; 0x1c74 <__fp_cmp>
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <__cmpsf2+0x6>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	08 95       	ret
    1bd8:	88 d0       	rcall	.+272    	; 0x1cea <__fp_pscA>
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <__cmpsf2+0x12>
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <__cmpsf2+0x12>
    1bde:	8c d0       	rcall	.+280    	; 0x1cf8 <__fp_pscB>
    1be0:	38 f4       	brcc	.+14     	; 0x1bf0 <fmod+0xa>
    1be2:	80 c0       	rjmp	.+256    	; 0x1ce4 <__fp_nan>
    1be4:	c4 c0       	rjmp	.+392    	; 0x1d6e <__fp_szero>

00001be6 <fmod>:
    1be6:	e9 2f       	mov	r30, r25
    1be8:	9f d0       	rcall	.+318    	; 0x1d28 <__fp_split3>
    1bea:	b0 f3       	brcs	.-20     	; 0x1bd8 <__cmpsf2+0x8>
    1bec:	55 23       	and	r21, r21
    1bee:	c9 f3       	breq	.-14     	; 0x1be2 <__cmpsf2+0x12>
    1bf0:	e7 fb       	bst	r30, 7
    1bf2:	62 17       	cp	r22, r18
    1bf4:	73 07       	cpc	r23, r19
    1bf6:	84 07       	cpc	r24, r20
    1bf8:	95 07       	cpc	r25, r21
    1bfa:	a8 f1       	brcs	.+106    	; 0x1c66 <fmod+0x80>
    1bfc:	99 f3       	breq	.-26     	; 0x1be4 <__cmpsf2+0x14>
    1bfe:	e9 2f       	mov	r30, r25
    1c00:	ff 27       	eor	r31, r31
    1c02:	88 23       	and	r24, r24
    1c04:	2a f0       	brmi	.+10     	; 0x1c10 <fmod+0x2a>
    1c06:	31 97       	sbiw	r30, 0x01	; 1
    1c08:	66 0f       	add	r22, r22
    1c0a:	77 1f       	adc	r23, r23
    1c0c:	88 1f       	adc	r24, r24
    1c0e:	da f7       	brpl	.-10     	; 0x1c06 <fmod+0x20>
    1c10:	95 2f       	mov	r25, r21
    1c12:	55 27       	eor	r21, r21
    1c14:	44 23       	and	r20, r20
    1c16:	32 f0       	brmi	.+12     	; 0x1c24 <fmod+0x3e>
    1c18:	91 50       	subi	r25, 0x01	; 1
    1c1a:	50 40       	sbci	r21, 0x00	; 0
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	44 1f       	adc	r20, r20
    1c22:	d2 f7       	brpl	.-12     	; 0x1c18 <fmod+0x32>
    1c24:	bb 27       	eor	r27, r27
    1c26:	e9 1b       	sub	r30, r25
    1c28:	f5 0b       	sbc	r31, r21
    1c2a:	62 1b       	sub	r22, r18
    1c2c:	73 0b       	sbc	r23, r19
    1c2e:	84 0b       	sbc	r24, r20
    1c30:	b1 09       	sbc	r27, r1
    1c32:	c1 f2       	breq	.-80     	; 0x1be4 <__cmpsf2+0x14>
    1c34:	22 f4       	brpl	.+8      	; 0x1c3e <fmod+0x58>
    1c36:	62 0f       	add	r22, r18
    1c38:	73 1f       	adc	r23, r19
    1c3a:	84 1f       	adc	r24, r20
    1c3c:	b1 1d       	adc	r27, r1
    1c3e:	31 97       	sbiw	r30, 0x01	; 1
    1c40:	2a f0       	brmi	.+10     	; 0x1c4c <fmod+0x66>
    1c42:	66 0f       	add	r22, r22
    1c44:	77 1f       	adc	r23, r23
    1c46:	88 1f       	adc	r24, r24
    1c48:	bb 1f       	adc	r27, r27
    1c4a:	ef cf       	rjmp	.-34     	; 0x1c2a <fmod+0x44>
    1c4c:	91 50       	subi	r25, 0x01	; 1
    1c4e:	50 40       	sbci	r21, 0x00	; 0
    1c50:	5a f0       	brmi	.+22     	; 0x1c68 <fmod+0x82>
    1c52:	41 f0       	breq	.+16     	; 0x1c64 <fmod+0x7e>
    1c54:	88 23       	and	r24, r24
    1c56:	32 f0       	brmi	.+12     	; 0x1c64 <fmod+0x7e>
    1c58:	66 0f       	add	r22, r22
    1c5a:	77 1f       	adc	r23, r23
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	91 50       	subi	r25, 0x01	; 1
    1c60:	50 40       	sbci	r21, 0x00	; 0
    1c62:	c1 f7       	brne	.-16     	; 0x1c54 <fmod+0x6e>
    1c64:	93 95       	inc	r25
    1c66:	30 c0       	rjmp	.+96     	; 0x1cc8 <__fp_mpack>
    1c68:	86 95       	lsr	r24
    1c6a:	77 95       	ror	r23
    1c6c:	67 95       	ror	r22
    1c6e:	9f 5f       	subi	r25, 0xFF	; 255
    1c70:	d9 f7       	brne	.-10     	; 0x1c68 <fmod+0x82>
    1c72:	f8 cf       	rjmp	.-16     	; 0x1c64 <fmod+0x7e>

00001c74 <__fp_cmp>:
    1c74:	99 0f       	add	r25, r25
    1c76:	00 08       	sbc	r0, r0
    1c78:	55 0f       	add	r21, r21
    1c7a:	aa 0b       	sbc	r26, r26
    1c7c:	e0 e8       	ldi	r30, 0x80	; 128
    1c7e:	fe ef       	ldi	r31, 0xFE	; 254
    1c80:	16 16       	cp	r1, r22
    1c82:	17 06       	cpc	r1, r23
    1c84:	e8 07       	cpc	r30, r24
    1c86:	f9 07       	cpc	r31, r25
    1c88:	c0 f0       	brcs	.+48     	; 0x1cba <__fp_cmp+0x46>
    1c8a:	12 16       	cp	r1, r18
    1c8c:	13 06       	cpc	r1, r19
    1c8e:	e4 07       	cpc	r30, r20
    1c90:	f5 07       	cpc	r31, r21
    1c92:	98 f0       	brcs	.+38     	; 0x1cba <__fp_cmp+0x46>
    1c94:	62 1b       	sub	r22, r18
    1c96:	73 0b       	sbc	r23, r19
    1c98:	84 0b       	sbc	r24, r20
    1c9a:	95 0b       	sbc	r25, r21
    1c9c:	39 f4       	brne	.+14     	; 0x1cac <__fp_cmp+0x38>
    1c9e:	0a 26       	eor	r0, r26
    1ca0:	61 f0       	breq	.+24     	; 0x1cba <__fp_cmp+0x46>
    1ca2:	23 2b       	or	r18, r19
    1ca4:	24 2b       	or	r18, r20
    1ca6:	25 2b       	or	r18, r21
    1ca8:	21 f4       	brne	.+8      	; 0x1cb2 <__fp_cmp+0x3e>
    1caa:	08 95       	ret
    1cac:	0a 26       	eor	r0, r26
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <__fp_cmp+0x3e>
    1cb0:	a1 40       	sbci	r26, 0x01	; 1
    1cb2:	a6 95       	lsr	r26
    1cb4:	8f ef       	ldi	r24, 0xFF	; 255
    1cb6:	81 1d       	adc	r24, r1
    1cb8:	81 1d       	adc	r24, r1
    1cba:	08 95       	ret

00001cbc <__fp_inf>:
    1cbc:	97 f9       	bld	r25, 7
    1cbe:	9f 67       	ori	r25, 0x7F	; 127
    1cc0:	80 e8       	ldi	r24, 0x80	; 128
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	08 95       	ret

00001cc8 <__fp_mpack>:
    1cc8:	9f 3f       	cpi	r25, 0xFF	; 255
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <__fp_mpack_finite+0xc>

00001ccc <__fp_mpack_finite>:
    1ccc:	91 50       	subi	r25, 0x01	; 1
    1cce:	20 f4       	brcc	.+8      	; 0x1cd8 <__fp_mpack_finite+0xc>
    1cd0:	87 95       	ror	r24
    1cd2:	77 95       	ror	r23
    1cd4:	67 95       	ror	r22
    1cd6:	b7 95       	ror	r27
    1cd8:	88 0f       	add	r24, r24
    1cda:	91 1d       	adc	r25, r1
    1cdc:	96 95       	lsr	r25
    1cde:	87 95       	ror	r24
    1ce0:	97 f9       	bld	r25, 7
    1ce2:	08 95       	ret

00001ce4 <__fp_nan>:
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	80 ec       	ldi	r24, 0xC0	; 192
    1ce8:	08 95       	ret

00001cea <__fp_pscA>:
    1cea:	00 24       	eor	r0, r0
    1cec:	0a 94       	dec	r0
    1cee:	16 16       	cp	r1, r22
    1cf0:	17 06       	cpc	r1, r23
    1cf2:	18 06       	cpc	r1, r24
    1cf4:	09 06       	cpc	r0, r25
    1cf6:	08 95       	ret

00001cf8 <__fp_pscB>:
    1cf8:	00 24       	eor	r0, r0
    1cfa:	0a 94       	dec	r0
    1cfc:	12 16       	cp	r1, r18
    1cfe:	13 06       	cpc	r1, r19
    1d00:	14 06       	cpc	r1, r20
    1d02:	05 06       	cpc	r0, r21
    1d04:	08 95       	ret

00001d06 <__fp_round>:
    1d06:	09 2e       	mov	r0, r25
    1d08:	03 94       	inc	r0
    1d0a:	00 0c       	add	r0, r0
    1d0c:	11 f4       	brne	.+4      	; 0x1d12 <__fp_round+0xc>
    1d0e:	88 23       	and	r24, r24
    1d10:	52 f0       	brmi	.+20     	; 0x1d26 <__fp_round+0x20>
    1d12:	bb 0f       	add	r27, r27
    1d14:	40 f4       	brcc	.+16     	; 0x1d26 <__fp_round+0x20>
    1d16:	bf 2b       	or	r27, r31
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <__fp_round+0x18>
    1d1a:	60 ff       	sbrs	r22, 0
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <__fp_round+0x20>
    1d1e:	6f 5f       	subi	r22, 0xFF	; 255
    1d20:	7f 4f       	sbci	r23, 0xFF	; 255
    1d22:	8f 4f       	sbci	r24, 0xFF	; 255
    1d24:	9f 4f       	sbci	r25, 0xFF	; 255
    1d26:	08 95       	ret

00001d28 <__fp_split3>:
    1d28:	57 fd       	sbrc	r21, 7
    1d2a:	90 58       	subi	r25, 0x80	; 128
    1d2c:	44 0f       	add	r20, r20
    1d2e:	55 1f       	adc	r21, r21
    1d30:	59 f0       	breq	.+22     	; 0x1d48 <__fp_splitA+0x10>
    1d32:	5f 3f       	cpi	r21, 0xFF	; 255
    1d34:	71 f0       	breq	.+28     	; 0x1d52 <__fp_splitA+0x1a>
    1d36:	47 95       	ror	r20

00001d38 <__fp_splitA>:
    1d38:	88 0f       	add	r24, r24
    1d3a:	97 fb       	bst	r25, 7
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <__fp_splitA+0x20>
    1d40:	9f 3f       	cpi	r25, 0xFF	; 255
    1d42:	79 f0       	breq	.+30     	; 0x1d62 <__fp_splitA+0x2a>
    1d44:	87 95       	ror	r24
    1d46:	08 95       	ret
    1d48:	12 16       	cp	r1, r18
    1d4a:	13 06       	cpc	r1, r19
    1d4c:	14 06       	cpc	r1, r20
    1d4e:	55 1f       	adc	r21, r21
    1d50:	f2 cf       	rjmp	.-28     	; 0x1d36 <__fp_split3+0xe>
    1d52:	46 95       	lsr	r20
    1d54:	f1 df       	rcall	.-30     	; 0x1d38 <__fp_splitA>
    1d56:	08 c0       	rjmp	.+16     	; 0x1d68 <__fp_splitA+0x30>
    1d58:	16 16       	cp	r1, r22
    1d5a:	17 06       	cpc	r1, r23
    1d5c:	18 06       	cpc	r1, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	f1 cf       	rjmp	.-30     	; 0x1d44 <__fp_splitA+0xc>
    1d62:	86 95       	lsr	r24
    1d64:	71 05       	cpc	r23, r1
    1d66:	61 05       	cpc	r22, r1
    1d68:	08 94       	sec
    1d6a:	08 95       	ret

00001d6c <__fp_zero>:
    1d6c:	e8 94       	clt

00001d6e <__fp_szero>:
    1d6e:	bb 27       	eor	r27, r27
    1d70:	66 27       	eor	r22, r22
    1d72:	77 27       	eor	r23, r23
    1d74:	cb 01       	movw	r24, r22
    1d76:	97 f9       	bld	r25, 7
    1d78:	08 95       	ret

00001d7a <__udivmodqi4>:
    1d7a:	99 1b       	sub	r25, r25
    1d7c:	79 e0       	ldi	r23, 0x09	; 9
    1d7e:	04 c0       	rjmp	.+8      	; 0x1d88 <__udivmodqi4_ep>

00001d80 <__udivmodqi4_loop>:
    1d80:	99 1f       	adc	r25, r25
    1d82:	96 17       	cp	r25, r22
    1d84:	08 f0       	brcs	.+2      	; 0x1d88 <__udivmodqi4_ep>
    1d86:	96 1b       	sub	r25, r22

00001d88 <__udivmodqi4_ep>:
    1d88:	88 1f       	adc	r24, r24
    1d8a:	7a 95       	dec	r23
    1d8c:	c9 f7       	brne	.-14     	; 0x1d80 <__udivmodqi4_loop>
    1d8e:	80 95       	com	r24
    1d90:	08 95       	ret

00001d92 <__muldi3>:
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	1f 93       	push	r17
    1d98:	0f 93       	push	r16
    1d9a:	9a 9d       	mul	r25, r10
    1d9c:	f0 2d       	mov	r31, r0
    1d9e:	21 9f       	mul	r18, r17
    1da0:	f0 0d       	add	r31, r0
    1da2:	8b 9d       	mul	r24, r11
    1da4:	f0 0d       	add	r31, r0
    1da6:	8a 9d       	mul	r24, r10
    1da8:	e0 2d       	mov	r30, r0
    1daa:	f1 0d       	add	r31, r1
    1dac:	03 9f       	mul	r16, r19
    1dae:	f0 0d       	add	r31, r0
    1db0:	02 9f       	mul	r16, r18
    1db2:	e0 0d       	add	r30, r0
    1db4:	f1 1d       	adc	r31, r1
    1db6:	4e 9d       	mul	r20, r14
    1db8:	e0 0d       	add	r30, r0
    1dba:	f1 1d       	adc	r31, r1
    1dbc:	5e 9d       	mul	r21, r14
    1dbe:	f0 0d       	add	r31, r0
    1dc0:	4f 9d       	mul	r20, r15
    1dc2:	f0 0d       	add	r31, r0
    1dc4:	7f 93       	push	r23
    1dc6:	6f 93       	push	r22
    1dc8:	bf 92       	push	r11
    1dca:	af 92       	push	r10
    1dcc:	5f 93       	push	r21
    1dce:	4f 93       	push	r20
    1dd0:	d5 01       	movw	r26, r10
    1dd2:	39 d0       	rcall	.+114    	; 0x1e46 <__umulhisi3>
    1dd4:	8b 01       	movw	r16, r22
    1dd6:	ac 01       	movw	r20, r24
    1dd8:	d7 01       	movw	r26, r14
    1dda:	35 d0       	rcall	.+106    	; 0x1e46 <__umulhisi3>
    1ddc:	eb 01       	movw	r28, r22
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	d6 01       	movw	r26, r12
    1de4:	1f d0       	rcall	.+62     	; 0x1e24 <__muldi3_6>
    1de6:	2f 91       	pop	r18
    1de8:	3f 91       	pop	r19
    1dea:	d6 01       	movw	r26, r12
    1dec:	2c d0       	rcall	.+88     	; 0x1e46 <__umulhisi3>
    1dee:	c6 0f       	add	r28, r22
    1df0:	d7 1f       	adc	r29, r23
    1df2:	e8 1f       	adc	r30, r24
    1df4:	f9 1f       	adc	r31, r25
    1df6:	af 91       	pop	r26
    1df8:	bf 91       	pop	r27
    1dfa:	14 d0       	rcall	.+40     	; 0x1e24 <__muldi3_6>
    1dfc:	2f 91       	pop	r18
    1dfe:	3f 91       	pop	r19
    1e00:	22 d0       	rcall	.+68     	; 0x1e46 <__umulhisi3>
    1e02:	c6 0f       	add	r28, r22
    1e04:	d7 1f       	adc	r29, r23
    1e06:	e8 1f       	adc	r30, r24
    1e08:	f9 1f       	adc	r31, r25
    1e0a:	d6 01       	movw	r26, r12
    1e0c:	1c d0       	rcall	.+56     	; 0x1e46 <__umulhisi3>
    1e0e:	e6 0f       	add	r30, r22
    1e10:	f7 1f       	adc	r31, r23
    1e12:	98 01       	movw	r18, r16
    1e14:	be 01       	movw	r22, r28
    1e16:	cf 01       	movw	r24, r30
    1e18:	11 24       	eor	r1, r1
    1e1a:	0f 91       	pop	r16
    1e1c:	1f 91       	pop	r17
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <__muldi3_6>:
    1e24:	10 d0       	rcall	.+32     	; 0x1e46 <__umulhisi3>
    1e26:	46 0f       	add	r20, r22
    1e28:	57 1f       	adc	r21, r23
    1e2a:	c8 1f       	adc	r28, r24
    1e2c:	d9 1f       	adc	r29, r25
    1e2e:	08 f4       	brcc	.+2      	; 0x1e32 <__muldi3_6+0xe>
    1e30:	31 96       	adiw	r30, 0x01	; 1
    1e32:	08 95       	ret

00001e34 <__adddi3>:
    1e34:	2a 0d       	add	r18, r10
    1e36:	3b 1d       	adc	r19, r11
    1e38:	4c 1d       	adc	r20, r12
    1e3a:	5d 1d       	adc	r21, r13
    1e3c:	6e 1d       	adc	r22, r14
    1e3e:	7f 1d       	adc	r23, r15
    1e40:	80 1f       	adc	r24, r16
    1e42:	91 1f       	adc	r25, r17
    1e44:	08 95       	ret

00001e46 <__umulhisi3>:
    1e46:	a2 9f       	mul	r26, r18
    1e48:	b0 01       	movw	r22, r0
    1e4a:	b3 9f       	mul	r27, r19
    1e4c:	c0 01       	movw	r24, r0
    1e4e:	a3 9f       	mul	r26, r19
    1e50:	70 0d       	add	r23, r0
    1e52:	81 1d       	adc	r24, r1
    1e54:	11 24       	eor	r1, r1
    1e56:	91 1d       	adc	r25, r1
    1e58:	b2 9f       	mul	r27, r18
    1e5a:	70 0d       	add	r23, r0
    1e5c:	81 1d       	adc	r24, r1
    1e5e:	11 24       	eor	r1, r1
    1e60:	91 1d       	adc	r25, r1
    1e62:	08 95       	ret

00001e64 <malloc>:
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	82 30       	cpi	r24, 0x02	; 2
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	10 f4       	brcc	.+4      	; 0x1e72 <malloc+0xe>
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	e0 91 f4 07 	lds	r30, 0x07F4
    1e76:	f0 91 f5 07 	lds	r31, 0x07F5
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	c0 e0       	ldi	r28, 0x00	; 0
    1e80:	d0 e0       	ldi	r29, 0x00	; 0
    1e82:	30 97       	sbiw	r30, 0x00	; 0
    1e84:	11 f1       	breq	.+68     	; 0x1eca <malloc+0x66>
    1e86:	40 81       	ld	r20, Z
    1e88:	51 81       	ldd	r21, Z+1	; 0x01
    1e8a:	48 17       	cp	r20, r24
    1e8c:	59 07       	cpc	r21, r25
    1e8e:	c0 f0       	brcs	.+48     	; 0x1ec0 <malloc+0x5c>
    1e90:	48 17       	cp	r20, r24
    1e92:	59 07       	cpc	r21, r25
    1e94:	61 f4       	brne	.+24     	; 0x1eae <malloc+0x4a>
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 97       	sbiw	r28, 0x00	; 0
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <malloc+0x40>
    1e9e:	9b 83       	std	Y+3, r25	; 0x03
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	2b c0       	rjmp	.+86     	; 0x1efa <malloc+0x96>
    1ea4:	90 93 f5 07 	sts	0x07F5, r25
    1ea8:	80 93 f4 07 	sts	0x07F4, r24
    1eac:	26 c0       	rjmp	.+76     	; 0x1efa <malloc+0x96>
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	19 f0       	breq	.+6      	; 0x1eba <malloc+0x56>
    1eb4:	42 17       	cp	r20, r18
    1eb6:	53 07       	cpc	r21, r19
    1eb8:	18 f4       	brcc	.+6      	; 0x1ec0 <malloc+0x5c>
    1eba:	9a 01       	movw	r18, r20
    1ebc:	be 01       	movw	r22, r28
    1ebe:	df 01       	movw	r26, r30
    1ec0:	ef 01       	movw	r28, r30
    1ec2:	02 80       	ldd	r0, Z+2	; 0x02
    1ec4:	f3 81       	ldd	r31, Z+3	; 0x03
    1ec6:	e0 2d       	mov	r30, r0
    1ec8:	dc cf       	rjmp	.-72     	; 0x1e82 <malloc+0x1e>
    1eca:	21 15       	cp	r18, r1
    1ecc:	31 05       	cpc	r19, r1
    1ece:	09 f1       	breq	.+66     	; 0x1f12 <malloc+0xae>
    1ed0:	28 1b       	sub	r18, r24
    1ed2:	39 0b       	sbc	r19, r25
    1ed4:	24 30       	cpi	r18, 0x04	; 4
    1ed6:	31 05       	cpc	r19, r1
    1ed8:	90 f4       	brcc	.+36     	; 0x1efe <malloc+0x9a>
    1eda:	12 96       	adiw	r26, 0x02	; 2
    1edc:	8d 91       	ld	r24, X+
    1ede:	9c 91       	ld	r25, X
    1ee0:	13 97       	sbiw	r26, 0x03	; 3
    1ee2:	61 15       	cp	r22, r1
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	21 f0       	breq	.+8      	; 0x1ef0 <malloc+0x8c>
    1ee8:	fb 01       	movw	r30, r22
    1eea:	93 83       	std	Z+3, r25	; 0x03
    1eec:	82 83       	std	Z+2, r24	; 0x02
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <malloc+0x94>
    1ef0:	90 93 f5 07 	sts	0x07F5, r25
    1ef4:	80 93 f4 07 	sts	0x07F4, r24
    1ef8:	fd 01       	movw	r30, r26
    1efa:	32 96       	adiw	r30, 0x02	; 2
    1efc:	44 c0       	rjmp	.+136    	; 0x1f86 <malloc+0x122>
    1efe:	fd 01       	movw	r30, r26
    1f00:	e2 0f       	add	r30, r18
    1f02:	f3 1f       	adc	r31, r19
    1f04:	81 93       	st	Z+, r24
    1f06:	91 93       	st	Z+, r25
    1f08:	22 50       	subi	r18, 0x02	; 2
    1f0a:	31 09       	sbc	r19, r1
    1f0c:	2d 93       	st	X+, r18
    1f0e:	3c 93       	st	X, r19
    1f10:	3a c0       	rjmp	.+116    	; 0x1f86 <malloc+0x122>
    1f12:	20 91 f2 07 	lds	r18, 0x07F2
    1f16:	30 91 f3 07 	lds	r19, 0x07F3
    1f1a:	23 2b       	or	r18, r19
    1f1c:	41 f4       	brne	.+16     	; 0x1f2e <malloc+0xca>
    1f1e:	20 91 02 01 	lds	r18, 0x0102
    1f22:	30 91 03 01 	lds	r19, 0x0103
    1f26:	30 93 f3 07 	sts	0x07F3, r19
    1f2a:	20 93 f2 07 	sts	0x07F2, r18
    1f2e:	20 91 00 01 	lds	r18, 0x0100
    1f32:	30 91 01 01 	lds	r19, 0x0101
    1f36:	21 15       	cp	r18, r1
    1f38:	31 05       	cpc	r19, r1
    1f3a:	41 f4       	brne	.+16     	; 0x1f4c <malloc+0xe8>
    1f3c:	2d b7       	in	r18, 0x3d	; 61
    1f3e:	3e b7       	in	r19, 0x3e	; 62
    1f40:	40 91 04 01 	lds	r20, 0x0104
    1f44:	50 91 05 01 	lds	r21, 0x0105
    1f48:	24 1b       	sub	r18, r20
    1f4a:	35 0b       	sbc	r19, r21
    1f4c:	e0 91 f2 07 	lds	r30, 0x07F2
    1f50:	f0 91 f3 07 	lds	r31, 0x07F3
    1f54:	e2 17       	cp	r30, r18
    1f56:	f3 07       	cpc	r31, r19
    1f58:	a0 f4       	brcc	.+40     	; 0x1f82 <malloc+0x11e>
    1f5a:	2e 1b       	sub	r18, r30
    1f5c:	3f 0b       	sbc	r19, r31
    1f5e:	28 17       	cp	r18, r24
    1f60:	39 07       	cpc	r19, r25
    1f62:	78 f0       	brcs	.+30     	; 0x1f82 <malloc+0x11e>
    1f64:	ac 01       	movw	r20, r24
    1f66:	4e 5f       	subi	r20, 0xFE	; 254
    1f68:	5f 4f       	sbci	r21, 0xFF	; 255
    1f6a:	24 17       	cp	r18, r20
    1f6c:	35 07       	cpc	r19, r21
    1f6e:	48 f0       	brcs	.+18     	; 0x1f82 <malloc+0x11e>
    1f70:	4e 0f       	add	r20, r30
    1f72:	5f 1f       	adc	r21, r31
    1f74:	50 93 f3 07 	sts	0x07F3, r21
    1f78:	40 93 f2 07 	sts	0x07F2, r20
    1f7c:	81 93       	st	Z+, r24
    1f7e:	91 93       	st	Z+, r25
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <malloc+0x122>
    1f82:	e0 e0       	ldi	r30, 0x00	; 0
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	cf 01       	movw	r24, r30
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <free>:
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <free+0xe>
    1f9a:	8c c0       	rjmp	.+280    	; 0x20b4 <free+0x126>
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	32 97       	sbiw	r30, 0x02	; 2
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    1fa2:	12 82       	std	Z+2, r1	; 0x02
    1fa4:	00 91 f4 07 	lds	r16, 0x07F4
    1fa8:	10 91 f5 07 	lds	r17, 0x07F5
    1fac:	01 15       	cp	r16, r1
    1fae:	11 05       	cpc	r17, r1
    1fb0:	81 f4       	brne	.+32     	; 0x1fd2 <free+0x44>
    1fb2:	20 81       	ld	r18, Z
    1fb4:	31 81       	ldd	r19, Z+1	; 0x01
    1fb6:	82 0f       	add	r24, r18
    1fb8:	93 1f       	adc	r25, r19
    1fba:	20 91 f2 07 	lds	r18, 0x07F2
    1fbe:	30 91 f3 07 	lds	r19, 0x07F3
    1fc2:	28 17       	cp	r18, r24
    1fc4:	39 07       	cpc	r19, r25
    1fc6:	79 f5       	brne	.+94     	; 0x2026 <free+0x98>
    1fc8:	f0 93 f3 07 	sts	0x07F3, r31
    1fcc:	e0 93 f2 07 	sts	0x07F2, r30
    1fd0:	71 c0       	rjmp	.+226    	; 0x20b4 <free+0x126>
    1fd2:	d8 01       	movw	r26, r16
    1fd4:	40 e0       	ldi	r20, 0x00	; 0
    1fd6:	50 e0       	ldi	r21, 0x00	; 0
    1fd8:	ae 17       	cp	r26, r30
    1fda:	bf 07       	cpc	r27, r31
    1fdc:	50 f4       	brcc	.+20     	; 0x1ff2 <free+0x64>
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	2d 91       	ld	r18, X+
    1fe2:	3c 91       	ld	r19, X
    1fe4:	13 97       	sbiw	r26, 0x03	; 3
    1fe6:	ad 01       	movw	r20, r26
    1fe8:	21 15       	cp	r18, r1
    1fea:	31 05       	cpc	r19, r1
    1fec:	09 f1       	breq	.+66     	; 0x2030 <free+0xa2>
    1fee:	d9 01       	movw	r26, r18
    1ff0:	f3 cf       	rjmp	.-26     	; 0x1fd8 <free+0x4a>
    1ff2:	9d 01       	movw	r18, r26
    1ff4:	da 01       	movw	r26, r20
    1ff6:	33 83       	std	Z+3, r19	; 0x03
    1ff8:	22 83       	std	Z+2, r18	; 0x02
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	86 0f       	add	r24, r22
    2000:	97 1f       	adc	r25, r23
    2002:	82 17       	cp	r24, r18
    2004:	93 07       	cpc	r25, r19
    2006:	69 f4       	brne	.+26     	; 0x2022 <free+0x94>
    2008:	ec 01       	movw	r28, r24
    200a:	28 81       	ld	r18, Y
    200c:	39 81       	ldd	r19, Y+1	; 0x01
    200e:	26 0f       	add	r18, r22
    2010:	37 1f       	adc	r19, r23
    2012:	2e 5f       	subi	r18, 0xFE	; 254
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	31 83       	std	Z+1, r19	; 0x01
    2018:	20 83       	st	Z, r18
    201a:	8a 81       	ldd	r24, Y+2	; 0x02
    201c:	9b 81       	ldd	r25, Y+3	; 0x03
    201e:	93 83       	std	Z+3, r25	; 0x03
    2020:	82 83       	std	Z+2, r24	; 0x02
    2022:	45 2b       	or	r20, r21
    2024:	29 f4       	brne	.+10     	; 0x2030 <free+0xa2>
    2026:	f0 93 f5 07 	sts	0x07F5, r31
    202a:	e0 93 f4 07 	sts	0x07F4, r30
    202e:	42 c0       	rjmp	.+132    	; 0x20b4 <free+0x126>
    2030:	13 96       	adiw	r26, 0x03	; 3
    2032:	fc 93       	st	X, r31
    2034:	ee 93       	st	-X, r30
    2036:	12 97       	sbiw	r26, 0x02	; 2
    2038:	ed 01       	movw	r28, r26
    203a:	49 91       	ld	r20, Y+
    203c:	59 91       	ld	r21, Y+
    203e:	9e 01       	movw	r18, r28
    2040:	24 0f       	add	r18, r20
    2042:	35 1f       	adc	r19, r21
    2044:	e2 17       	cp	r30, r18
    2046:	f3 07       	cpc	r31, r19
    2048:	71 f4       	brne	.+28     	; 0x2066 <free+0xd8>
    204a:	80 81       	ld	r24, Z
    204c:	91 81       	ldd	r25, Z+1	; 0x01
    204e:	84 0f       	add	r24, r20
    2050:	95 1f       	adc	r25, r21
    2052:	02 96       	adiw	r24, 0x02	; 2
    2054:	11 96       	adiw	r26, 0x01	; 1
    2056:	9c 93       	st	X, r25
    2058:	8e 93       	st	-X, r24
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	13 96       	adiw	r26, 0x03	; 3
    2060:	9c 93       	st	X, r25
    2062:	8e 93       	st	-X, r24
    2064:	12 97       	sbiw	r26, 0x02	; 2
    2066:	e0 e0       	ldi	r30, 0x00	; 0
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	d8 01       	movw	r26, r16
    206c:	12 96       	adiw	r26, 0x02	; 2
    206e:	8d 91       	ld	r24, X+
    2070:	9c 91       	ld	r25, X
    2072:	13 97       	sbiw	r26, 0x03	; 3
    2074:	00 97       	sbiw	r24, 0x00	; 0
    2076:	19 f0       	breq	.+6      	; 0x207e <free+0xf0>
    2078:	f8 01       	movw	r30, r16
    207a:	8c 01       	movw	r16, r24
    207c:	f6 cf       	rjmp	.-20     	; 0x206a <free+0xdc>
    207e:	8d 91       	ld	r24, X+
    2080:	9c 91       	ld	r25, X
    2082:	98 01       	movw	r18, r16
    2084:	2e 5f       	subi	r18, 0xFE	; 254
    2086:	3f 4f       	sbci	r19, 0xFF	; 255
    2088:	82 0f       	add	r24, r18
    208a:	93 1f       	adc	r25, r19
    208c:	20 91 f2 07 	lds	r18, 0x07F2
    2090:	30 91 f3 07 	lds	r19, 0x07F3
    2094:	28 17       	cp	r18, r24
    2096:	39 07       	cpc	r19, r25
    2098:	69 f4       	brne	.+26     	; 0x20b4 <free+0x126>
    209a:	30 97       	sbiw	r30, 0x00	; 0
    209c:	29 f4       	brne	.+10     	; 0x20a8 <free+0x11a>
    209e:	10 92 f5 07 	sts	0x07F5, r1
    20a2:	10 92 f4 07 	sts	0x07F4, r1
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <free+0x11e>
    20a8:	13 82       	std	Z+3, r1	; 0x03
    20aa:	12 82       	std	Z+2, r1	; 0x02
    20ac:	10 93 f3 07 	sts	0x07F3, r17
    20b0:	00 93 f2 07 	sts	0x07F2, r16
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	1f 91       	pop	r17
    20ba:	0f 91       	pop	r16
    20bc:	08 95       	ret

000020be <memset>:
    20be:	dc 01       	movw	r26, r24
    20c0:	01 c0       	rjmp	.+2      	; 0x20c4 <memset+0x6>
    20c2:	6d 93       	st	X+, r22
    20c4:	41 50       	subi	r20, 0x01	; 1
    20c6:	50 40       	sbci	r21, 0x00	; 0
    20c8:	e0 f7       	brcc	.-8      	; 0x20c2 <memset+0x4>
    20ca:	08 95       	ret

000020cc <strncpy>:
    20cc:	fb 01       	movw	r30, r22
    20ce:	dc 01       	movw	r26, r24
    20d0:	41 50       	subi	r20, 0x01	; 1
    20d2:	50 40       	sbci	r21, 0x00	; 0
    20d4:	48 f0       	brcs	.+18     	; 0x20e8 <strncpy+0x1c>
    20d6:	01 90       	ld	r0, Z+
    20d8:	0d 92       	st	X+, r0
    20da:	00 20       	and	r0, r0
    20dc:	c9 f7       	brne	.-14     	; 0x20d0 <strncpy+0x4>
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <strncpy+0x16>
    20e0:	1d 92       	st	X+, r1
    20e2:	41 50       	subi	r20, 0x01	; 1
    20e4:	50 40       	sbci	r21, 0x00	; 0
    20e6:	e0 f7       	brcc	.-8      	; 0x20e0 <strncpy+0x14>
    20e8:	08 95       	ret

000020ea <_exit>:
    20ea:	f8 94       	cli

000020ec <__stop_program>:
    20ec:	ff cf       	rjmp	.-2      	; 0x20ec <__stop_program>
