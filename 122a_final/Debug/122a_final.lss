
122a_final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  0000206c  00002100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000206c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000670  0080017a  0080017a  0000217a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000217a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000278d  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a76  00000000  00000000  00004bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8d  00000000  00000000  00005667  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006b8  00000000  00000000  000070f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf6  00000000  00000000  000077ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a6  00000000  00000000  000084a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  00009d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_13>
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	57 c2       	rjmp	.+1198   	; 0x4fc <__vector_19>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	f0 e2       	ldi	r31, 0x20	; 32
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 37       	cpi	r26, 0x7A	; 122
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	aa e7       	ldi	r26, 0x7A	; 122
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 3e       	cpi	r26, 0xEA	; 234
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 65 08 	call	0x10ca	; 0x10ca <main>
      c6:	0c 94 34 10 	jmp	0x2068	; 0x2068 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d2:	0e 94 33 0b 	call	0x1666	; 0x1666 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d6:	20 91 7a 01 	lds	r18, 0x017A
      da:	30 91 7b 01 	lds	r19, 0x017B
      de:	ce 01       	movw	r24, r28
      e0:	82 0f       	add	r24, r18
      e2:	93 1f       	adc	r25, r19
      e4:	8c 3d       	cpi	r24, 0xDC	; 220
      e6:	45 e0       	ldi	r20, 0x05	; 5
      e8:	94 07       	cpc	r25, r20
      ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x36>
      ec:	28 17       	cp	r18, r24
      ee:	39 07       	cpc	r19, r25
      f0:	58 f4       	brcc	.+22     	; 0x108 <pvPortMalloc+0x3c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      f2:	e9 01       	movw	r28, r18
      f4:	c4 58       	subi	r28, 0x84	; 132
      f6:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f8:	90 93 7b 01 	sts	0x017B, r25
      fc:	80 93 7a 01 	sts	0x017A, r24
     100:	05 c0       	rjmp	.+10     	; 0x10c <pvPortMalloc+0x40>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
     102:	c0 e0       	ldi	r28, 0x00	; 0
     104:	d0 e0       	ldi	r29, 0x00	; 0
     106:	02 c0       	rjmp	.+4      	; 0x10c <pvPortMalloc+0x40>
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     10c:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     110:	ce 01       	movw	r24, r28
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     118:	08 95       	ret

0000011a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     11a:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     11c:	03 96       	adiw	r24, 0x03	; 3
     11e:	92 83       	std	Z+2, r25	; 0x02
     120:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	34 83       	std	Z+4, r19	; 0x04
     128:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     12a:	96 83       	std	Z+6, r25	; 0x06
     12c:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     12e:	90 87       	std	Z+8, r25	; 0x08
     130:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     132:	10 82       	st	Z, r1
     134:	08 95       	ret

00000136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     136:	fc 01       	movw	r30, r24
     138:	11 86       	std	Z+9, r1	; 0x09
     13a:	10 86       	std	Z+8, r1	; 0x08
     13c:	08 95       	ret

0000013e <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     13e:	cf 93       	push	r28
     140:	df 93       	push	r29
     142:	fc 01       	movw	r30, r24
     144:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     146:	21 81       	ldd	r18, Z+1	; 0x01
     148:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     14a:	e9 01       	movw	r28, r18
     14c:	8a 81       	ldd	r24, Y+2	; 0x02
     14e:	9b 81       	ldd	r25, Y+3	; 0x03
     150:	13 96       	adiw	r26, 0x03	; 3
     152:	9c 93       	st	X, r25
     154:	8e 93       	st	-X, r24
     156:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	15 96       	adiw	r26, 0x05	; 5
     15e:	9c 93       	st	X, r25
     160:	8e 93       	st	-X, r24
     162:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	ec 01       	movw	r28, r24
     16a:	7d 83       	std	Y+5, r23	; 0x05
     16c:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     16e:	e9 01       	movw	r28, r18
     170:	7b 83       	std	Y+3, r23	; 0x03
     172:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     174:	72 83       	std	Z+2, r23	; 0x02
     176:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     178:	19 96       	adiw	r26, 0x09	; 9
     17a:	fc 93       	st	X, r31
     17c:	ee 93       	st	-X, r30
     17e:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     180:	80 81       	ld	r24, Z
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	80 83       	st	Z, r24
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     192:	48 81       	ld	r20, Y
     194:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     196:	4f 3f       	cpi	r20, 0xFF	; 255
     198:	2f ef       	ldi	r18, 0xFF	; 255
     19a:	52 07       	cpc	r21, r18
     19c:	31 f4       	brne	.+12     	; 0x1aa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     19e:	dc 01       	movw	r26, r24
     1a0:	17 96       	adiw	r26, 0x07	; 7
     1a2:	ed 91       	ld	r30, X+
     1a4:	fc 91       	ld	r31, X
     1a6:	18 97       	sbiw	r26, 0x08	; 8
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1aa:	fc 01       	movw	r30, r24
     1ac:	33 96       	adiw	r30, 0x03	; 3
     1ae:	dc 01       	movw	r26, r24
     1b0:	15 96       	adiw	r26, 0x05	; 5
     1b2:	2d 91       	ld	r18, X+
     1b4:	3c 91       	ld	r19, X
     1b6:	16 97       	sbiw	r26, 0x06	; 6
     1b8:	d9 01       	movw	r26, r18
     1ba:	2d 91       	ld	r18, X+
     1bc:	3c 91       	ld	r19, X
     1be:	42 17       	cp	r20, r18
     1c0:	53 07       	cpc	r21, r19
     1c2:	50 f0       	brcs	.+20     	; 0x1d8 <vListInsert+0x4c>
     1c4:	02 80       	ldd	r0, Z+2	; 0x02
     1c6:	f3 81       	ldd	r31, Z+3	; 0x03
     1c8:	e0 2d       	mov	r30, r0
     1ca:	a2 81       	ldd	r26, Z+2	; 0x02
     1cc:	b3 81       	ldd	r27, Z+3	; 0x03
     1ce:	2d 91       	ld	r18, X+
     1d0:	3c 91       	ld	r19, X
     1d2:	42 17       	cp	r20, r18
     1d4:	53 07       	cpc	r21, r19
     1d6:	b0 f7       	brcc	.-20     	; 0x1c4 <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d8:	a2 81       	ldd	r26, Z+2	; 0x02
     1da:	b3 81       	ldd	r27, Z+3	; 0x03
     1dc:	bb 83       	std	Y+3, r27	; 0x03
     1de:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1e0:	15 96       	adiw	r26, 0x05	; 5
     1e2:	dc 93       	st	X, r29
     1e4:	ce 93       	st	-X, r28
     1e6:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e8:	fd 83       	std	Y+5, r31	; 0x05
     1ea:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1ec:	d3 83       	std	Z+3, r29	; 0x03
     1ee:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1f0:	99 87       	std	Y+9, r25	; 0x09
     1f2:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1f4:	fc 01       	movw	r30, r24
     1f6:	20 81       	ld	r18, Z
     1f8:	2f 5f       	subi	r18, 0xFF	; 255
     1fa:	20 83       	st	Z, r18
}
     1fc:	df 91       	pop	r29
     1fe:	cf 91       	pop	r28
     200:	08 95       	ret

00000202 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     202:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     204:	a2 81       	ldd	r26, Z+2	; 0x02
     206:	b3 81       	ldd	r27, Z+3	; 0x03
     208:	84 81       	ldd	r24, Z+4	; 0x04
     20a:	95 81       	ldd	r25, Z+5	; 0x05
     20c:	15 96       	adiw	r26, 0x05	; 5
     20e:	9c 93       	st	X, r25
     210:	8e 93       	st	-X, r24
     212:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     214:	a4 81       	ldd	r26, Z+4	; 0x04
     216:	b5 81       	ldd	r27, Z+5	; 0x05
     218:	82 81       	ldd	r24, Z+2	; 0x02
     21a:	93 81       	ldd	r25, Z+3	; 0x03
     21c:	13 96       	adiw	r26, 0x03	; 3
     21e:	9c 93       	st	X, r25
     220:	8e 93       	st	-X, r24
     222:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     224:	a0 85       	ldd	r26, Z+8	; 0x08
     226:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     228:	11 96       	adiw	r26, 0x01	; 1
     22a:	8d 91       	ld	r24, X+
     22c:	9c 91       	ld	r25, X
     22e:	12 97       	sbiw	r26, 0x02	; 2
     230:	8e 17       	cp	r24, r30
     232:	9f 07       	cpc	r25, r31
     234:	31 f4       	brne	.+12     	; 0x242 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     236:	84 81       	ldd	r24, Z+4	; 0x04
     238:	95 81       	ldd	r25, Z+5	; 0x05
     23a:	12 96       	adiw	r26, 0x02	; 2
     23c:	9c 93       	st	X, r25
     23e:	8e 93       	st	-X, r24
     240:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     242:	11 86       	std	Z+9, r1	; 0x09
     244:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     246:	8c 91       	ld	r24, X
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	8c 93       	st	X, r24
     24c:	08 95       	ret

0000024e <joystickInit>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     24e:	ea e7       	ldi	r30, 0x7A	; 122
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	80 6c       	ori	r24, 0xC0	; 192
     256:	80 83       	st	Z, r24
     258:	10 92 de 07 	sts	0x07DE, r1
     25c:	10 92 dd 07 	sts	0x07DD, r1
     260:	10 92 d9 07 	sts	0x07D9, r1
     264:	10 92 d8 07 	sts	0x07D8, r1
     268:	08 95       	ret

0000026a <joystickSample>:
     26a:	2f 92       	push	r2
     26c:	3f 92       	push	r3
     26e:	4f 92       	push	r4
     270:	5f 92       	push	r5
     272:	6f 92       	push	r6
     274:	7f 92       	push	r7
     276:	8f 92       	push	r8
     278:	9f 92       	push	r9
     27a:	af 92       	push	r10
     27c:	bf 92       	push	r11
     27e:	cf 92       	push	r12
     280:	df 92       	push	r13
     282:	ef 92       	push	r14
     284:	ff 92       	push	r15
     286:	0f 93       	push	r16
     288:	1f 93       	push	r17
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
     292:	61 97       	sbiw	r28, 0x11	; 17
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	f8 94       	cli
     298:	de bf       	out	0x3e, r29	; 62
     29a:	0f be       	out	0x3f, r0	; 63
     29c:	cd bf       	out	0x3d, r28	; 61
     29e:	ea e7       	ldi	r30, 0x7A	; 122
     2a0:	f0 e0       	ldi	r31, 0x00	; 0
     2a2:	80 81       	ld	r24, Z
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	80 83       	st	Z, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	86 fd       	sbrc	r24, 6
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <joystickSample+0x3e>
     2ae:	80 91 78 00 	lds	r24, 0x0078
     2b2:	90 91 79 00 	lds	r25, 0x0079
     2b6:	90 93 de 07 	sts	0x07DE, r25
     2ba:	80 93 dd 07 	sts	0x07DD, r24
     2be:	ec e7       	ldi	r30, 0x7C	; 124
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	81 60       	ori	r24, 0x01	; 1
     2c6:	80 83       	st	Z, r24
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	80 83       	st	Z, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	fd cf       	rjmp	.-6      	; 0x2d2 <joystickSample+0x68>
     2d8:	80 91 78 00 	lds	r24, 0x0078
     2dc:	90 91 79 00 	lds	r25, 0x0079
     2e0:	90 93 d9 07 	sts	0x07D9, r25
     2e4:	80 93 d8 07 	sts	0x07D8, r24
     2e8:	ec e7       	ldi	r30, 0x7C	; 124
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8e 7f       	andi	r24, 0xFE	; 254
     2f0:	80 83       	st	Z, r24
     2f2:	40 90 dd 07 	lds	r4, 0x07DD
     2f6:	50 90 de 07 	lds	r5, 0x07DE
     2fa:	20 ef       	ldi	r18, 0xF0	; 240
     2fc:	42 1a       	sub	r4, r18
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	52 0a       	sbc	r5, r18
     302:	50 92 de 07 	sts	0x07DE, r5
     306:	40 92 dd 07 	sts	0x07DD, r4
     30a:	60 90 d8 07 	lds	r6, 0x07D8
     30e:	70 90 d9 07 	lds	r7, 0x07D9
     312:	3c e0       	ldi	r19, 0x0C	; 12
     314:	63 1a       	sub	r6, r19
     316:	32 e0       	ldi	r19, 0x02	; 2
     318:	73 0a       	sbc	r7, r19
     31a:	70 92 d9 07 	sts	0x07D9, r7
     31e:	60 92 d8 07 	sts	0x07D8, r6
     322:	95 2d       	mov	r25, r5
     324:	99 0f       	add	r25, r25
     326:	99 0b       	sbc	r25, r25
     328:	97 2c       	mov	r9, r7
     32a:	99 0c       	add	r9, r9
     32c:	99 08       	sbc	r9, r9
     32e:	a4 2c       	mov	r10, r4
     330:	b5 2c       	mov	r11, r5
     332:	c9 2e       	mov	r12, r25
     334:	d9 2e       	mov	r13, r25
     336:	e9 2e       	mov	r14, r25
     338:	f9 2e       	mov	r15, r25
     33a:	09 2f       	mov	r16, r25
     33c:	19 2f       	mov	r17, r25
     33e:	24 2d       	mov	r18, r4
     340:	35 2d       	mov	r19, r5
     342:	49 2f       	mov	r20, r25
     344:	59 2f       	mov	r21, r25
     346:	69 2f       	mov	r22, r25
     348:	79 2f       	mov	r23, r25
     34a:	89 2f       	mov	r24, r25
     34c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__muldi3>
     350:	22 2e       	mov	r2, r18
     352:	33 2e       	mov	r3, r19
     354:	84 2e       	mov	r8, r20
     356:	5d 87       	std	Y+13, r21	; 0x0d
     358:	6e 87       	std	Y+14, r22	; 0x0e
     35a:	7f 87       	std	Y+15, r23	; 0x0f
     35c:	88 8b       	std	Y+16, r24	; 0x10
     35e:	99 8b       	std	Y+17, r25	; 0x11
     360:	a6 2c       	mov	r10, r6
     362:	b7 2c       	mov	r11, r7
     364:	c9 2c       	mov	r12, r9
     366:	d9 2c       	mov	r13, r9
     368:	e9 2c       	mov	r14, r9
     36a:	f9 2c       	mov	r15, r9
     36c:	09 2d       	mov	r16, r9
     36e:	19 2d       	mov	r17, r9
     370:	26 2d       	mov	r18, r6
     372:	37 2d       	mov	r19, r7
     374:	49 2d       	mov	r20, r9
     376:	59 2d       	mov	r21, r9
     378:	69 2d       	mov	r22, r9
     37a:	79 2d       	mov	r23, r9
     37c:	89 2d       	mov	r24, r9
     37e:	99 2d       	mov	r25, r9
     380:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__muldi3>
     384:	a2 2e       	mov	r10, r18
     386:	b3 2e       	mov	r11, r19
     388:	c4 2e       	mov	r12, r20
     38a:	d5 2e       	mov	r13, r21
     38c:	e6 2e       	mov	r14, r22
     38e:	f7 2e       	mov	r15, r23
     390:	08 2f       	mov	r16, r24
     392:	19 2f       	mov	r17, r25
     394:	22 2d       	mov	r18, r2
     396:	33 2d       	mov	r19, r3
     398:	48 2d       	mov	r20, r8
     39a:	5d 85       	ldd	r21, Y+13	; 0x0d
     39c:	6e 85       	ldd	r22, Y+14	; 0x0e
     39e:	7f 85       	ldd	r23, Y+15	; 0x0f
     3a0:	88 89       	ldd	r24, Y+16	; 0x10
     3a2:	99 89       	ldd	r25, Y+17	; 0x11
     3a4:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__adddi3>
     3a8:	2f 3f       	cpi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	41 05       	cpc	r20, r1
     3ae:	51 05       	cpc	r21, r1
     3b0:	61 05       	cpc	r22, r1
     3b2:	71 05       	cpc	r23, r1
     3b4:	81 05       	cpc	r24, r1
     3b6:	91 05       	cpc	r25, r1
     3b8:	09 f0       	breq	.+2      	; 0x3bc <joystickSample+0x152>
     3ba:	1c f4       	brge	.+6      	; 0x3c2 <joystickSample+0x158>
     3bc:	10 92 e3 07 	sts	0x07E3, r1
     3c0:	35 c0       	rjmp	.+106    	; 0x42c <joystickSample+0x1c2>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	8a 83       	std	Y+2, r24	; 0x02
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	8b 83       	std	Y+3, r24	; 0x03
     3ce:	84 e0       	ldi	r24, 0x04	; 4
     3d0:	8c 83       	std	Y+4, r24	; 0x04
     3d2:	5e 82       	std	Y+6, r5	; 0x06
     3d4:	4d 82       	std	Y+5, r4	; 0x05
     3d6:	51 94       	neg	r5
     3d8:	41 94       	neg	r4
     3da:	51 08       	sbc	r5, r1
     3dc:	58 86       	std	Y+8, r5	; 0x08
     3de:	4f 82       	std	Y+7, r4	; 0x07
     3e0:	7a 86       	std	Y+10, r7	; 0x0a
     3e2:	69 86       	std	Y+9, r6	; 0x09
     3e4:	71 94       	neg	r7
     3e6:	61 94       	neg	r6
     3e8:	71 08       	sbc	r7, r1
     3ea:	7c 86       	std	Y+12, r7	; 0x0c
     3ec:	6b 86       	std	Y+11, r6	; 0x0b
     3ee:	de 01       	movw	r26, r28
     3f0:	17 96       	adiw	r26, 0x07	; 7
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	4d 91       	ld	r20, X+
     3f8:	5d 91       	ld	r21, X+
     3fa:	e9 2f       	mov	r30, r25
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	ee 0f       	add	r30, r30
     400:	ff 1f       	adc	r31, r31
     402:	21 e0       	ldi	r18, 0x01	; 1
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	2c 0f       	add	r18, r28
     408:	3d 1f       	adc	r19, r29
     40a:	e2 0f       	add	r30, r18
     40c:	f3 1f       	adc	r31, r19
     40e:	24 81       	ldd	r18, Z+4	; 0x04
     410:	35 81       	ldd	r19, Z+5	; 0x05
     412:	24 17       	cp	r18, r20
     414:	35 07       	cpc	r19, r21
     416:	0c f4       	brge	.+2      	; 0x41a <joystickSample+0x1b0>
     418:	98 2f       	mov	r25, r24
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	84 30       	cpi	r24, 0x04	; 4
     41e:	59 f7       	brne	.-42     	; 0x3f6 <joystickSample+0x18c>
     420:	fe 01       	movw	r30, r28
     422:	e9 0f       	add	r30, r25
     424:	f1 1d       	adc	r31, r1
     426:	81 81       	ldd	r24, Z+1	; 0x01
     428:	80 93 e3 07 	sts	0x07E3, r24
     42c:	61 96       	adiw	r28, 0x11	; 17
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	1f 91       	pop	r17
     43e:	0f 91       	pop	r16
     440:	ff 90       	pop	r15
     442:	ef 90       	pop	r14
     444:	df 90       	pop	r13
     446:	cf 90       	pop	r12
     448:	bf 90       	pop	r11
     44a:	af 90       	pop	r10
     44c:	9f 90       	pop	r9
     44e:	8f 90       	pop	r8
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	3f 90       	pop	r3
     45a:	2f 90       	pop	r2
     45c:	08 95       	ret

0000045e <QueueInit>:
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <malloc>
     46e:	ec 01       	movw	r28, r24
     470:	81 2f       	mov	r24, r17
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <malloc>
     478:	99 83       	std	Y+1, r25	; 0x01
     47a:	88 83       	st	Y, r24
     47c:	1a 82       	std	Y+2, r1	; 0x02
     47e:	1b 82       	std	Y+3, r1	; 0x03
     480:	1c 82       	std	Y+4, r1	; 0x04
     482:	1d 83       	std	Y+5, r17	; 0x05
     484:	ce 01       	movw	r24, r28
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <QueueEnqueue>:
     48e:	fc 01       	movw	r30, r24
     490:	94 81       	ldd	r25, Z+4	; 0x04
     492:	85 81       	ldd	r24, Z+5	; 0x05
     494:	98 17       	cp	r25, r24
     496:	88 f4       	brcc	.+34     	; 0x4ba <QueueEnqueue+0x2c>
     498:	83 81       	ldd	r24, Z+3	; 0x03
     49a:	a0 81       	ld	r26, Z
     49c:	b1 81       	ldd	r27, Z+1	; 0x01
     49e:	a8 0f       	add	r26, r24
     4a0:	b1 1d       	adc	r27, r1
     4a2:	6c 93       	st	X, r22
     4a4:	83 81       	ldd	r24, Z+3	; 0x03
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	65 81       	ldd	r22, Z+5	; 0x05
     4aa:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__udivmodqi4>
     4ae:	93 83       	std	Z+3, r25	; 0x03
     4b0:	84 81       	ldd	r24, Z+4	; 0x04
     4b2:	8f 5f       	subi	r24, 0xFF	; 255
     4b4:	84 83       	std	Z+4, r24	; 0x04
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	08 95       	ret
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	08 95       	ret

000004be <QueueDequeue>:
     4be:	fc 01       	movw	r30, r24
     4c0:	84 81       	ldd	r24, Z+4	; 0x04
     4c2:	88 23       	and	r24, r24
     4c4:	89 f0       	breq	.+34     	; 0x4e8 <QueueDequeue+0x2a>
     4c6:	82 81       	ldd	r24, Z+2	; 0x02
     4c8:	a0 81       	ld	r26, Z
     4ca:	b1 81       	ldd	r27, Z+1	; 0x01
     4cc:	a8 0f       	add	r26, r24
     4ce:	b1 1d       	adc	r27, r1
     4d0:	2c 91       	ld	r18, X
     4d2:	1c 92       	st	X, r1
     4d4:	82 81       	ldd	r24, Z+2	; 0x02
     4d6:	8f 5f       	subi	r24, 0xFF	; 255
     4d8:	65 81       	ldd	r22, Z+5	; 0x05
     4da:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__udivmodqi4>
     4de:	92 83       	std	Z+2, r25	; 0x02
     4e0:	84 81       	ldd	r24, Z+4	; 0x04
     4e2:	81 50       	subi	r24, 0x01	; 1
     4e4:	84 83       	std	Z+4, r24	; 0x04
     4e6:	82 2f       	mov	r24, r18
     4e8:	08 95       	ret

000004ea <SPI_ServantInit>:
     4ea:	80 e4       	ldi	r24, 0x40	; 64
     4ec:	84 b9       	out	0x04, r24	; 4
     4ee:	8c b5       	in	r24, 0x2c	; 44
     4f0:	80 6c       	ori	r24, 0xC0	; 192
     4f2:	8c bd       	out	0x2c, r24	; 44
     4f4:	8f b7       	in	r24, 0x3f	; 63
     4f6:	80 68       	ori	r24, 0x80	; 128
     4f8:	8f bf       	out	0x3f, r24	; 63
     4fa:	08 95       	ret

000004fc <__vector_19>:
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	8f 93       	push	r24
     508:	8e b5       	in	r24, 0x2e	; 46
     50a:	80 93 47 01 	sts	0x0147, r24
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <transmit_data>:
     51a:	43 9a       	sbi	0x08, 3	; 8
     51c:	41 98       	cbi	0x08, 1	; 8
     51e:	38 e0       	ldi	r19, 0x08	; 8
     520:	43 9a       	sbi	0x08, 3	; 8
     522:	42 98       	cbi	0x08, 2	; 8
     524:	98 b1       	in	r25, 0x08	; 8
     526:	88 23       	and	r24, r24
     528:	14 f4       	brge	.+4      	; 0x52e <transmit_data+0x14>
     52a:	91 60       	ori	r25, 0x01	; 1
     52c:	01 c0       	rjmp	.+2      	; 0x530 <transmit_data+0x16>
     52e:	9e 7f       	andi	r25, 0xFE	; 254
     530:	98 b9       	out	0x08, r25	; 8
     532:	98 b1       	in	r25, 0x08	; 8
     534:	66 23       	and	r22, r22
     536:	14 f4       	brge	.+4      	; 0x53c <transmit_data+0x22>
     538:	90 61       	ori	r25, 0x10	; 16
     53a:	01 c0       	rjmp	.+2      	; 0x53e <transmit_data+0x24>
     53c:	9f 7e       	andi	r25, 0xEF	; 239
     53e:	98 b9       	out	0x08, r25	; 8
     540:	98 b1       	in	r25, 0x08	; 8
     542:	44 23       	and	r20, r20
     544:	14 f4       	brge	.+4      	; 0x54a <transmit_data+0x30>
     546:	90 62       	ori	r25, 0x20	; 32
     548:	01 c0       	rjmp	.+2      	; 0x54c <transmit_data+0x32>
     54a:	9f 7d       	andi	r25, 0xDF	; 223
     54c:	98 b9       	out	0x08, r25	; 8
     54e:	98 b1       	in	r25, 0x08	; 8
     550:	22 23       	and	r18, r18
     552:	14 f4       	brge	.+4      	; 0x558 <transmit_data+0x3e>
     554:	90 64       	ori	r25, 0x40	; 64
     556:	01 c0       	rjmp	.+2      	; 0x55a <transmit_data+0x40>
     558:	9f 7b       	andi	r25, 0xBF	; 191
     55a:	98 b9       	out	0x08, r25	; 8
     55c:	88 0f       	add	r24, r24
     55e:	66 0f       	add	r22, r22
     560:	44 0f       	add	r20, r20
     562:	22 0f       	add	r18, r18
     564:	42 9a       	sbi	0x08, 2	; 8
     566:	31 50       	subi	r19, 0x01	; 1
     568:	d9 f6       	brne	.-74     	; 0x520 <transmit_data+0x6>
     56a:	41 9a       	sbi	0x08, 1	; 8
     56c:	08 95       	ret

0000056e <Shift_Tick>:
     56e:	80 91 df 07 	lds	r24, 0x07DF
     572:	81 11       	cpse	r24, r1
     574:	07 c0       	rjmp	.+14     	; 0x584 <Shift_Tick+0x16>
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	60 91 7a 07 	lds	r22, 0x077A
     57e:	80 91 7b 07 	lds	r24, 0x077B
     582:	cb df       	rcall	.-106    	; 0x51a <transmit_data>
     584:	80 91 df 07 	lds	r24, 0x07DF
     588:	81 11       	cpse	r24, r1
     58a:	10 92 df 07 	sts	0x07DF, r1
     58e:	08 95       	ret

00000590 <Shift_Task>:
     590:	10 92 df 07 	sts	0x07DF, r1
     594:	ec df       	rcall	.-40     	; 0x56e <Shift_Tick>
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 81 0c 	call	0x1902	; 0x1902 <vTaskDelay>
     59e:	fa cf       	rjmp	.-12     	; 0x594 <Shift_Task+0x4>

000005a0 <Motor_Tick>:
     5a0:	2f 92       	push	r2
     5a2:	3f 92       	push	r3
     5a4:	4f 92       	push	r4
     5a6:	5f 92       	push	r5
     5a8:	6f 92       	push	r6
     5aa:	7f 92       	push	r7
     5ac:	8f 92       	push	r8
     5ae:	9f 92       	push	r9
     5b0:	af 92       	push	r10
     5b2:	bf 92       	push	r11
     5b4:	cf 92       	push	r12
     5b6:	df 92       	push	r13
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	2a 97       	sbiw	r28, 0x0a	; 10
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	80 91 dc 07 	lds	r24, 0x07DC
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	09 f0       	breq	.+2      	; 0x5de <Motor_Tick+0x3e>
     5dc:	03 c1       	rjmp	.+518    	; 0x7e4 <Motor_Tick+0x244>
     5de:	0f 2e       	mov	r0, r31
     5e0:	fa e5       	ldi	r31, 0x5A	; 90
     5e2:	ef 2e       	mov	r14, r31
     5e4:	f7 e0       	ldi	r31, 0x07	; 7
     5e6:	ff 2e       	mov	r15, r31
     5e8:	f0 2d       	mov	r31, r0
     5ea:	0f 2e       	mov	r0, r31
     5ec:	fa e6       	ldi	r31, 0x6A	; 106
     5ee:	8f 2e       	mov	r8, r31
     5f0:	f7 e0       	ldi	r31, 0x07	; 7
     5f2:	9f 2e       	mov	r9, r31
     5f4:	f0 2d       	mov	r31, r0
     5f6:	0f 2e       	mov	r0, r31
     5f8:	f7 e3       	ldi	r31, 0x37	; 55
     5fa:	2f 2e       	mov	r2, r31
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	3f 2e       	mov	r3, r31
     600:	f0 2d       	mov	r31, r0
     602:	8b e3       	ldi	r24, 0x3B	; 59
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	9a 83       	std	Y+2, r25	; 0x02
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	0f e3       	ldi	r16, 0x3F	; 63
     60c:	11 e0       	ldi	r17, 0x01	; 1
     60e:	a7 e2       	ldi	r26, 0x27	; 39
     610:	b1 e0       	ldi	r27, 0x01	; 1
     612:	bc 83       	std	Y+4, r27	; 0x04
     614:	ab 83       	std	Y+3, r26	; 0x03
     616:	aa 24       	eor	r10, r10
     618:	a3 94       	inc	r10
     61a:	b1 2c       	mov	r11, r1
     61c:	fa 86       	std	Y+10, r15	; 0x0a
     61e:	e9 86       	std	Y+9, r14	; 0x09
     620:	98 86       	std	Y+8, r9	; 0x08
     622:	8f 82       	std	Y+7, r8	; 0x07
     624:	f4 01       	movw	r30, r8
     626:	60 81       	ld	r22, Z
     628:	71 81       	ldd	r23, Z+1	; 0x01
     62a:	82 81       	ldd	r24, Z+2	; 0x02
     62c:	93 81       	ldd	r25, Z+3	; 0x03
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	44 e3       	ldi	r20, 0x34	; 52
     634:	54 e4       	ldi	r21, 0x44	; 68
     636:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fmod>
     63a:	2b 01       	movw	r4, r22
     63c:	3c 01       	movw	r6, r24
     63e:	d4 01       	movw	r26, r8
     640:	6d 93       	st	X+, r22
     642:	7d 93       	st	X+, r23
     644:	8d 93       	st	X+, r24
     646:	9c 93       	st	X, r25
     648:	13 97       	sbiw	r26, 0x03	; 3
     64a:	e9 84       	ldd	r14, Y+9	; 0x09
     64c:	fa 84       	ldd	r15, Y+10	; 0x0a
     64e:	fe 82       	std	Y+6, r15	; 0x06
     650:	ed 82       	std	Y+5, r14	; 0x05
     652:	d7 01       	movw	r26, r14
     654:	6d 91       	ld	r22, X+
     656:	7d 91       	ld	r23, X+
     658:	8d 91       	ld	r24, X+
     65a:	9c 91       	ld	r25, X
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	44 e3       	ldi	r20, 0x34	; 52
     662:	54 e4       	ldi	r21, 0x44	; 68
     664:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <fmod>
     668:	6b 01       	movw	r12, r22
     66a:	7c 01       	movw	r14, r24
     66c:	e9 85       	ldd	r30, Y+9	; 0x09
     66e:	fa 85       	ldd	r31, Y+10	; 0x0a
     670:	60 83       	st	Z, r22
     672:	71 83       	std	Z+1, r23	; 0x01
     674:	82 83       	std	Z+2, r24	; 0x02
     676:	93 83       	std	Z+3, r25	; 0x03
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	a9 01       	movw	r20, r18
     67e:	c3 01       	movw	r24, r6
     680:	b2 01       	movw	r22, r4
     682:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__cmpsf2>
     686:	88 23       	and	r24, r24
     688:	74 f4       	brge	.+28     	; 0x6a6 <Motor_Tick+0x106>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	44 e3       	ldi	r20, 0x34	; 52
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	c3 01       	movw	r24, r6
     694:	b2 01       	movw	r22, r4
     696:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     69a:	d4 01       	movw	r26, r8
     69c:	6d 93       	st	X+, r22
     69e:	7d 93       	st	X+, r23
     6a0:	8d 93       	st	X+, r24
     6a2:	9c 93       	st	X, r25
     6a4:	13 97       	sbiw	r26, 0x03	; 3
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	a9 01       	movw	r20, r18
     6ac:	c7 01       	movw	r24, r14
     6ae:	b6 01       	movw	r22, r12
     6b0:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__cmpsf2>
     6b4:	88 23       	and	r24, r24
     6b6:	0c f0       	brlt	.+2      	; 0x6ba <Motor_Tick+0x11a>
     6b8:	9d c0       	rjmp	.+314    	; 0x7f4 <Motor_Tick+0x254>
     6ba:	20 e0       	ldi	r18, 0x00	; 0
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	44 e3       	ldi	r20, 0x34	; 52
     6c0:	54 e4       	ldi	r21, 0x44	; 68
     6c2:	c7 01       	movw	r24, r14
     6c4:	b6 01       	movw	r22, r12
     6c6:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     6ca:	ed 81       	ldd	r30, Y+5	; 0x05
     6cc:	fe 81       	ldd	r31, Y+6	; 0x06
     6ce:	60 83       	st	Z, r22
     6d0:	71 83       	std	Z+1, r23	; 0x01
     6d2:	82 83       	std	Z+2, r24	; 0x02
     6d4:	93 83       	std	Z+3, r25	; 0x03
     6d6:	8e c0       	rjmp	.+284    	; 0x7f4 <Motor_Tick+0x254>
     6d8:	27 2f       	mov	r18, r23
     6da:	37 2d       	mov	r19, r7
     6dc:	d1 01       	movw	r26, r2
     6de:	dc 90       	ld	r13, X
     6e0:	dc 01       	movw	r26, r24
     6e2:	64 e0       	ldi	r22, 0x04	; 4
     6e4:	d6 9e       	mul	r13, r22
     6e6:	a0 0d       	add	r26, r0
     6e8:	b1 1d       	adc	r27, r1
     6ea:	11 24       	eor	r1, r1
     6ec:	a9 5f       	subi	r26, 0xF9	; 249
     6ee:	be 4f       	sbci	r27, 0xFE	; 254
     6f0:	ac 91       	ld	r26, X
     6f2:	aa 23       	and	r26, r26
     6f4:	79 f0       	breq	.+30     	; 0x714 <Motor_Tick+0x174>
     6f6:	d8 01       	movw	r26, r16
     6f8:	ed 90       	ld	r14, X+
     6fa:	fc 90       	ld	r15, X
     6fc:	65 01       	movw	r12, r10
     6fe:	00 80       	ld	r0, Z
     700:	02 c0       	rjmp	.+4      	; 0x706 <Motor_Tick+0x166>
     702:	cc 0c       	add	r12, r12
     704:	dd 1c       	adc	r13, r13
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <Motor_Tick+0x162>
     70a:	d7 01       	movw	r26, r14
     70c:	6c 91       	ld	r22, X
     70e:	c6 2a       	or	r12, r22
     710:	cc 92       	st	X, r12
     712:	10 c0       	rjmp	.+32     	; 0x734 <Motor_Tick+0x194>
     714:	d8 01       	movw	r26, r16
     716:	ed 90       	ld	r14, X+
     718:	fc 90       	ld	r15, X
     71a:	d5 01       	movw	r26, r10
     71c:	00 80       	ld	r0, Z
     71e:	02 c0       	rjmp	.+4      	; 0x724 <Motor_Tick+0x184>
     720:	aa 0f       	add	r26, r26
     722:	bb 1f       	adc	r27, r27
     724:	0a 94       	dec	r0
     726:	e2 f7       	brpl	.-8      	; 0x720 <Motor_Tick+0x180>
     728:	6a 2f       	mov	r22, r26
     72a:	60 95       	com	r22
     72c:	d7 01       	movw	r26, r14
     72e:	dc 90       	ld	r13, X
     730:	6d 21       	and	r22, r13
     732:	6c 93       	st	X, r22
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	31 96       	adiw	r30, 0x01	; 1
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	91 05       	cpc	r25, r1
     73c:	69 f6       	brne	.-102    	; 0x6d8 <Motor_Tick+0x138>
     73e:	5a 87       	std	Y+10, r21	; 0x0a
     740:	49 87       	std	Y+9, r20	; 0x09
     742:	f9 01       	movw	r30, r18
     744:	a9 81       	ldd	r26, Y+1	; 0x01
     746:	ba 81       	ldd	r27, Y+2	; 0x02
     748:	8c 91       	ld	r24, X
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <Motor_Tick+0x1b0>
     74e:	6f c0       	rjmp	.+222    	; 0x82e <Motor_Tick+0x28e>
     750:	80 81       	ld	r24, Z
     752:	8f 5f       	subi	r24, 0xFF	; 255
     754:	88 30       	cpi	r24, 0x08	; 8
     756:	10 f4       	brcc	.+4      	; 0x75c <Motor_Tick+0x1bc>
     758:	80 83       	st	Z, r24
     75a:	2a c0       	rjmp	.+84     	; 0x7b0 <Motor_Tick+0x210>
     75c:	10 82       	st	Z, r1
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	44 e3       	ldi	r20, 0x34	; 52
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	ed 81       	ldd	r30, Y+5	; 0x05
     768:	fe 81       	ldd	r31, Y+6	; 0x06
     76a:	60 81       	ld	r22, Z
     76c:	71 81       	ldd	r23, Z+1	; 0x01
     76e:	82 81       	ldd	r24, Z+2	; 0x02
     770:	93 81       	ldd	r25, Z+3	; 0x03
     772:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     776:	ad 81       	ldd	r26, Y+5	; 0x05
     778:	be 81       	ldd	r27, Y+6	; 0x06
     77a:	6d 93       	st	X+, r22
     77c:	7d 93       	st	X+, r23
     77e:	8d 93       	st	X+, r24
     780:	9c 93       	st	X, r25
     782:	13 97       	sbiw	r26, 0x03	; 3
     784:	15 c0       	rjmp	.+42     	; 0x7b0 <Motor_Tick+0x210>
     786:	b7 e0       	ldi	r27, 0x07	; 7
     788:	b0 83       	st	Z, r27
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	44 e3       	ldi	r20, 0x34	; 52
     790:	5f e3       	ldi	r21, 0x3F	; 63
     792:	ed 81       	ldd	r30, Y+5	; 0x05
     794:	fe 81       	ldd	r31, Y+6	; 0x06
     796:	60 81       	ld	r22, Z
     798:	71 81       	ldd	r23, Z+1	; 0x01
     79a:	82 81       	ldd	r24, Z+2	; 0x02
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__subsf3>
     7a2:	ad 81       	ldd	r26, Y+5	; 0x05
     7a4:	be 81       	ldd	r27, Y+6	; 0x06
     7a6:	6d 93       	st	X+, r22
     7a8:	7d 93       	st	X+, r23
     7aa:	8d 93       	st	X+, r24
     7ac:	9c 93       	st	X, r25
     7ae:	13 97       	sbiw	r26, 0x03	; 3
     7b0:	e9 85       	ldd	r30, Y+9	; 0x09
     7b2:	fa 85       	ldd	r31, Y+10	; 0x0a
     7b4:	34 96       	adiw	r30, 0x04	; 4
     7b6:	fa 87       	std	Y+10, r31	; 0x0a
     7b8:	e9 87       	std	Y+9, r30	; 0x09
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	2f 1a       	sub	r2, r31
     7be:	3f 0a       	sbc	r3, r31
     7c0:	89 81       	ldd	r24, Y+1	; 0x01
     7c2:	9a 81       	ldd	r25, Y+2	; 0x02
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	9a 83       	std	Y+2, r25	; 0x02
     7c8:	89 83       	std	Y+1, r24	; 0x01
     7ca:	0e 5f       	subi	r16, 0xFE	; 254
     7cc:	1f 4f       	sbci	r17, 0xFF	; 255
     7ce:	ab 81       	ldd	r26, Y+3	; 0x03
     7d0:	bc 81       	ldd	r27, Y+4	; 0x04
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	bc 83       	std	Y+4, r27	; 0x04
     7d6:	ab 83       	std	Y+3, r26	; 0x03
     7d8:	e9 85       	ldd	r30, Y+9	; 0x09
     7da:	fa 85       	ldd	r31, Y+10	; 0x0a
     7dc:	ea 56       	subi	r30, 0x6A	; 106
     7de:	f7 40       	sbci	r31, 0x07	; 7
     7e0:	09 f0       	breq	.+2      	; 0x7e4 <Motor_Tick+0x244>
     7e2:	1e cf       	rjmp	.-452    	; 0x620 <Motor_Tick+0x80>
     7e4:	80 91 dc 07 	lds	r24, 0x07DC
     7e8:	81 11       	cpse	r24, r1
     7ea:	28 c0       	rjmp	.+80     	; 0x83c <Motor_Tick+0x29c>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 dc 07 	sts	0x07DC, r24
     7f2:	24 c0       	rjmp	.+72     	; 0x83c <Motor_Tick+0x29c>
     7f4:	64 e0       	ldi	r22, 0x04	; 4
     7f6:	86 0e       	add	r8, r22
     7f8:	91 1c       	adc	r9, r1
     7fa:	ad 81       	ldd	r26, Y+5	; 0x05
     7fc:	be 81       	ldd	r27, Y+6	; 0x06
     7fe:	2d 91       	ld	r18, X+
     800:	3d 91       	ld	r19, X+
     802:	4d 91       	ld	r20, X+
     804:	5c 91       	ld	r21, X
     806:	ef 81       	ldd	r30, Y+7	; 0x07
     808:	f8 85       	ldd	r31, Y+8	; 0x08
     80a:	60 81       	ld	r22, Z
     80c:	71 81       	ldd	r23, Z+1	; 0x01
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__cmpsf2>
     816:	88 23       	and	r24, r24
     818:	59 f2       	breq	.-106    	; 0x7b0 <Motor_Tick+0x210>
     81a:	4b 81       	ldd	r20, Y+3	; 0x03
     81c:	5c 81       	ldd	r21, Y+4	; 0x04
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	72 2d       	mov	r23, r2
     824:	fa 01       	movw	r30, r20
     826:	49 85       	ldd	r20, Y+9	; 0x09
     828:	5a 85       	ldd	r21, Y+10	; 0x0a
     82a:	73 2c       	mov	r7, r3
     82c:	55 cf       	rjmp	.-342    	; 0x6d8 <Motor_Tick+0x138>
     82e:	80 81       	ld	r24, Z
     830:	88 23       	and	r24, r24
     832:	09 f4       	brne	.+2      	; 0x836 <Motor_Tick+0x296>
     834:	a8 cf       	rjmp	.-176    	; 0x786 <Motor_Tick+0x1e6>
     836:	81 50       	subi	r24, 0x01	; 1
     838:	80 83       	st	Z, r24
     83a:	ba cf       	rjmp	.-140    	; 0x7b0 <Motor_Tick+0x210>
     83c:	2a 96       	adiw	r28, 0x0a	; 10
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	3f 90       	pop	r3
     86a:	2f 90       	pop	r2
     86c:	08 95       	ret

0000086e <Motor_Task>:
     86e:	10 92 dc 07 	sts	0x07DC, r1
     872:	96 de       	rcall	.-724    	; 0x5a0 <Motor_Tick>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 81 0c 	call	0x1902	; 0x1902 <vTaskDelay>
     87c:	fa cf       	rjmp	.-12     	; 0x872 <Motor_Task+0x4>

0000087e <Move_Tick>:
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	80 91 e2 07 	lds	r24, 0x07E2
     886:	81 30       	cpi	r24, 0x01	; 1
     888:	19 f0       	breq	.+6      	; 0x890 <Move_Tick+0x12>
     88a:	83 30       	cpi	r24, 0x03	; 3
     88c:	79 f0       	breq	.+30     	; 0x8ac <Move_Tick+0x2e>
     88e:	1a c0       	rjmp	.+52     	; 0x8c4 <Move_Tick+0x46>
     890:	2b b1       	in	r18, 0x0b	; 11
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	00 90 06 01 	lds	r0, 0x0106
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <Move_Tick+0x22>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <Move_Tick+0x1e>
     8a4:	80 95       	com	r24
     8a6:	82 23       	and	r24, r18
     8a8:	8b b9       	out	0x0b, r24	; 11
     8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <Move_Tick+0x46>
     8ac:	2b b1       	in	r18, 0x0b	; 11
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	00 90 06 01 	lds	r0, 0x0106
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <Move_Tick+0x3e>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <Move_Tick+0x3a>
     8c0:	82 2b       	or	r24, r18
     8c2:	8b b9       	out	0x0b, r24	; 11
     8c4:	80 91 e2 07 	lds	r24, 0x07E2
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	09 f4       	brne	.+2      	; 0x8ce <Move_Tick+0x50>
     8cc:	cc c1       	rjmp	.+920    	; 0xc66 <Move_Tick+0x3e8>
     8ce:	28 f4       	brcc	.+10     	; 0x8da <Move_Tick+0x5c>
     8d0:	88 23       	and	r24, r24
     8d2:	51 f0       	breq	.+20     	; 0x8e8 <Move_Tick+0x6a>
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	61 f0       	breq	.+24     	; 0x8f0 <Move_Tick+0x72>
     8d8:	2a c3       	rjmp	.+1620   	; 0xf2e <Move_Tick+0x6b0>
     8da:	83 30       	cpi	r24, 0x03	; 3
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <Move_Tick+0x62>
     8de:	ea c1       	rjmp	.+980    	; 0xcb4 <Move_Tick+0x436>
     8e0:	84 30       	cpi	r24, 0x04	; 4
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <Move_Tick+0x68>
     8e4:	0d c3       	rjmp	.+1562   	; 0xf00 <Move_Tick+0x682>
     8e6:	23 c3       	rjmp	.+1606   	; 0xf2e <Move_Tick+0x6b0>
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	80 93 e2 07 	sts	0x07E2, r24
     8ee:	21 c3       	rjmp	.+1602   	; 0xf32 <Move_Tick+0x6b4>
     8f0:	e0 91 d6 07 	lds	r30, 0x07D6
     8f4:	f0 91 d7 07 	lds	r31, 0x07D7
     8f8:	84 81       	ldd	r24, Z+4	; 0x04
     8fa:	88 23       	and	r24, r24
     8fc:	09 f4       	brne	.+2      	; 0x900 <Move_Tick+0x82>
     8fe:	19 c3       	rjmp	.+1586   	; 0xf32 <Move_Tick+0x6b4>
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	80 93 e2 07 	sts	0x07E2, r24
     906:	cf 01       	movw	r24, r30
     908:	da dd       	rcall	.-1100   	; 0x4be <QueueDequeue>
     90a:	80 93 58 07 	sts	0x0758, r24
     90e:	81 11       	cpse	r24, r1
     910:	23 c0       	rjmp	.+70     	; 0x958 <Move_Tick+0xda>
     912:	ca e6       	ldi	r28, 0x6A	; 106
     914:	d7 e0       	ldi	r29, 0x07	; 7
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	52 e4       	ldi	r21, 0x42	; 66
     91e:	6c 81       	ldd	r22, Y+4	; 0x04
     920:	7d 81       	ldd	r23, Y+5	; 0x05
     922:	8e 81       	ldd	r24, Y+6	; 0x06
     924:	9f 81       	ldd	r25, Y+7	; 0x07
     926:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     92a:	6c 83       	std	Y+4, r22	; 0x04
     92c:	7d 83       	std	Y+5, r23	; 0x05
     92e:	8e 83       	std	Y+6, r24	; 0x06
     930:	9f 83       	std	Y+7, r25	; 0x07
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 3c 01 	sts	0x013C, r24
     938:	8e e6       	ldi	r24, 0x6E	; 110
     93a:	97 e0       	ldi	r25, 0x07	; 7
     93c:	90 93 e5 07 	sts	0x07E5, r25
     940:	80 93 e4 07 	sts	0x07E4, r24
     944:	8e e5       	ldi	r24, 0x5E	; 94
     946:	97 e0       	ldi	r25, 0x07	; 7
     948:	90 93 db 07 	sts	0x07DB, r25
     94c:	80 93 da 07 	sts	0x07DA, r24
     950:	86 e0       	ldi	r24, 0x06	; 6
     952:	80 93 06 01 	sts	0x0106, r24
     956:	ed c2       	rjmp	.+1498   	; 0xf32 <Move_Tick+0x6b4>
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	11 f5       	brne	.+68     	; 0x9a0 <Move_Tick+0x122>
     95c:	ca e6       	ldi	r28, 0x6A	; 106
     95e:	d7 e0       	ldi	r29, 0x07	; 7
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	44 eb       	ldi	r20, 0xB4	; 180
     966:	52 e4       	ldi	r21, 0x42	; 66
     968:	6c 81       	ldd	r22, Y+4	; 0x04
     96a:	7d 81       	ldd	r23, Y+5	; 0x05
     96c:	8e 81       	ldd	r24, Y+6	; 0x06
     96e:	9f 81       	ldd	r25, Y+7	; 0x07
     970:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__subsf3>
     974:	6c 83       	std	Y+4, r22	; 0x04
     976:	7d 83       	std	Y+5, r23	; 0x05
     978:	8e 83       	std	Y+6, r24	; 0x06
     97a:	9f 83       	std	Y+7, r25	; 0x07
     97c:	10 92 3c 01 	sts	0x013C, r1
     980:	8e e6       	ldi	r24, 0x6E	; 110
     982:	97 e0       	ldi	r25, 0x07	; 7
     984:	90 93 e5 07 	sts	0x07E5, r25
     988:	80 93 e4 07 	sts	0x07E4, r24
     98c:	8e e5       	ldi	r24, 0x5E	; 94
     98e:	97 e0       	ldi	r25, 0x07	; 7
     990:	90 93 db 07 	sts	0x07DB, r25
     994:	80 93 da 07 	sts	0x07DA, r24
     998:	86 e0       	ldi	r24, 0x06	; 6
     99a:	80 93 06 01 	sts	0x0106, r24
     99e:	c9 c2       	rjmp	.+1426   	; 0xf32 <Move_Tick+0x6b4>
     9a0:	82 30       	cpi	r24, 0x02	; 2
     9a2:	19 f5       	brne	.+70     	; 0x9ea <Move_Tick+0x16c>
     9a4:	ca e6       	ldi	r28, 0x6A	; 106
     9a6:	d7 e0       	ldi	r29, 0x07	; 7
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	44 e3       	ldi	r20, 0x34	; 52
     9ae:	53 e4       	ldi	r21, 0x43	; 67
     9b0:	6c 81       	ldd	r22, Y+4	; 0x04
     9b2:	7d 81       	ldd	r23, Y+5	; 0x05
     9b4:	8e 81       	ldd	r24, Y+6	; 0x06
     9b6:	9f 81       	ldd	r25, Y+7	; 0x07
     9b8:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     9bc:	6c 83       	std	Y+4, r22	; 0x04
     9be:	7d 83       	std	Y+5, r23	; 0x05
     9c0:	8e 83       	std	Y+6, r24	; 0x06
     9c2:	9f 83       	std	Y+7, r25	; 0x07
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 3c 01 	sts	0x013C, r24
     9ca:	8e e6       	ldi	r24, 0x6E	; 110
     9cc:	97 e0       	ldi	r25, 0x07	; 7
     9ce:	90 93 e5 07 	sts	0x07E5, r25
     9d2:	80 93 e4 07 	sts	0x07E4, r24
     9d6:	8e e5       	ldi	r24, 0x5E	; 94
     9d8:	97 e0       	ldi	r25, 0x07	; 7
     9da:	90 93 db 07 	sts	0x07DB, r25
     9de:	80 93 da 07 	sts	0x07DA, r24
     9e2:	86 e0       	ldi	r24, 0x06	; 6
     9e4:	80 93 06 01 	sts	0x0106, r24
     9e8:	a4 c2       	rjmp	.+1352   	; 0xf32 <Move_Tick+0x6b4>
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	09 f5       	brne	.+66     	; 0xa30 <Move_Tick+0x1b2>
     9ee:	ca e6       	ldi	r28, 0x6A	; 106
     9f0:	d7 e0       	ldi	r29, 0x07	; 7
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	44 eb       	ldi	r20, 0xB4	; 180
     9f8:	52 e4       	ldi	r21, 0x42	; 66
     9fa:	68 81       	ld	r22, Y
     9fc:	79 81       	ldd	r23, Y+1	; 0x01
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	9b 81       	ldd	r25, Y+3	; 0x03
     a02:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__addsf3>
     a06:	68 83       	st	Y, r22
     a08:	79 83       	std	Y+1, r23	; 0x01
     a0a:	8a 83       	std	Y+2, r24	; 0x02
     a0c:	9b 83       	std	Y+3, r25	; 0x03
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 93 3b 01 	sts	0x013B, r24
     a14:	d0 93 e5 07 	sts	0x07E5, r29
     a18:	c0 93 e4 07 	sts	0x07E4, r28
     a1c:	8a e5       	ldi	r24, 0x5A	; 90
     a1e:	97 e0       	ldi	r25, 0x07	; 7
     a20:	90 93 db 07 	sts	0x07DB, r25
     a24:	80 93 da 07 	sts	0x07DA, r24
     a28:	87 e0       	ldi	r24, 0x07	; 7
     a2a:	80 93 06 01 	sts	0x0106, r24
     a2e:	81 c2       	rjmp	.+1282   	; 0xf32 <Move_Tick+0x6b4>
     a30:	84 30       	cpi	r24, 0x04	; 4
     a32:	01 f5       	brne	.+64     	; 0xa74 <Move_Tick+0x1f6>
     a34:	ca e6       	ldi	r28, 0x6A	; 106
     a36:	d7 e0       	ldi	r29, 0x07	; 7
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	44 eb       	ldi	r20, 0xB4	; 180
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	68 81       	ld	r22, Y
     a42:	79 81       	ldd	r23, Y+1	; 0x01
     a44:	8a 81       	ldd	r24, Y+2	; 0x02
     a46:	9b 81       	ldd	r25, Y+3	; 0x03
     a48:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <__subsf3>
     a4c:	68 83       	st	Y, r22
     a4e:	79 83       	std	Y+1, r23	; 0x01
     a50:	8a 83       	std	Y+2, r24	; 0x02
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	10 92 3b 01 	sts	0x013B, r1
     a58:	d0 93 e5 07 	sts	0x07E5, r29
     a5c:	c0 93 e4 07 	sts	0x07E4, r28
     a60:	8a e5       	ldi	r24, 0x5A	; 90
     a62:	97 e0       	ldi	r25, 0x07	; 7
     a64:	90 93 db 07 	sts	0x07DB, r25
     a68:	80 93 da 07 	sts	0x07DA, r24
     a6c:	87 e0       	ldi	r24, 0x07	; 7
     a6e:	80 93 06 01 	sts	0x0106, r24
     a72:	5f c2       	rjmp	.+1214   	; 0xf32 <Move_Tick+0x6b4>
     a74:	85 30       	cpi	r24, 0x05	; 5
     a76:	01 f5       	brne	.+64     	; 0xab8 <Move_Tick+0x23a>
     a78:	ca e6       	ldi	r28, 0x6A	; 106
     a7a:	d7 e0       	ldi	r29, 0x07	; 7
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	44 e3       	ldi	r20, 0x34	; 52
     a82:	53 e4       	ldi	r21, 0x43	; 67
     a84:	68 81       	ld	r22, Y
     a86:	79 81       	ldd	r23, Y+1	; 0x01
     a88:	8a 81       	ldd	r24, Y+2	; 0x02
     a8a:	9b 81       	ldd	r25, Y+3	; 0x03
     a8c:	fc d7       	rcall	.+4088   	; 0x1a86 <__addsf3>
     a8e:	68 83       	st	Y, r22
     a90:	79 83       	std	Y+1, r23	; 0x01
     a92:	8a 83       	std	Y+2, r24	; 0x02
     a94:	9b 83       	std	Y+3, r25	; 0x03
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	80 93 3b 01 	sts	0x013B, r24
     a9c:	d0 93 e5 07 	sts	0x07E5, r29
     aa0:	c0 93 e4 07 	sts	0x07E4, r28
     aa4:	8a e5       	ldi	r24, 0x5A	; 90
     aa6:	97 e0       	ldi	r25, 0x07	; 7
     aa8:	90 93 db 07 	sts	0x07DB, r25
     aac:	80 93 da 07 	sts	0x07DA, r24
     ab0:	87 e0       	ldi	r24, 0x07	; 7
     ab2:	80 93 06 01 	sts	0x0106, r24
     ab6:	3d c2       	rjmp	.+1146   	; 0xf32 <Move_Tick+0x6b4>
     ab8:	86 30       	cpi	r24, 0x06	; 6
     aba:	11 f5       	brne	.+68     	; 0xb00 <Move_Tick+0x282>
     abc:	ca e6       	ldi	r28, 0x6A	; 106
     abe:	d7 e0       	ldi	r29, 0x07	; 7
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	44 eb       	ldi	r20, 0xB4	; 180
     ac6:	52 e4       	ldi	r21, 0x42	; 66
     ac8:	68 85       	ldd	r22, Y+8	; 0x08
     aca:	79 85       	ldd	r23, Y+9	; 0x09
     acc:	8a 85       	ldd	r24, Y+10	; 0x0a
     ace:	9b 85       	ldd	r25, Y+11	; 0x0b
     ad0:	da d7       	rcall	.+4020   	; 0x1a86 <__addsf3>
     ad2:	68 87       	std	Y+8, r22	; 0x08
     ad4:	79 87       	std	Y+9, r23	; 0x09
     ad6:	8a 87       	std	Y+10, r24	; 0x0a
     ad8:	9b 87       	std	Y+11, r25	; 0x0b
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	80 93 3d 01 	sts	0x013D, r24
     ae0:	82 e7       	ldi	r24, 0x72	; 114
     ae2:	97 e0       	ldi	r25, 0x07	; 7
     ae4:	90 93 e5 07 	sts	0x07E5, r25
     ae8:	80 93 e4 07 	sts	0x07E4, r24
     aec:	82 e6       	ldi	r24, 0x62	; 98
     aee:	97 e0       	ldi	r25, 0x07	; 7
     af0:	90 93 db 07 	sts	0x07DB, r25
     af4:	80 93 da 07 	sts	0x07DA, r24
     af8:	85 e0       	ldi	r24, 0x05	; 5
     afa:	80 93 06 01 	sts	0x0106, r24
     afe:	19 c2       	rjmp	.+1074   	; 0xf32 <Move_Tick+0x6b4>
     b00:	87 30       	cpi	r24, 0x07	; 7
     b02:	09 f5       	brne	.+66     	; 0xb46 <Move_Tick+0x2c8>
     b04:	ca e6       	ldi	r28, 0x6A	; 106
     b06:	d7 e0       	ldi	r29, 0x07	; 7
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	44 eb       	ldi	r20, 0xB4	; 180
     b0e:	52 e4       	ldi	r21, 0x42	; 66
     b10:	68 85       	ldd	r22, Y+8	; 0x08
     b12:	79 85       	ldd	r23, Y+9	; 0x09
     b14:	8a 85       	ldd	r24, Y+10	; 0x0a
     b16:	9b 85       	ldd	r25, Y+11	; 0x0b
     b18:	b5 d7       	rcall	.+3946   	; 0x1a84 <__subsf3>
     b1a:	68 87       	std	Y+8, r22	; 0x08
     b1c:	79 87       	std	Y+9, r23	; 0x09
     b1e:	8a 87       	std	Y+10, r24	; 0x0a
     b20:	9b 87       	std	Y+11, r25	; 0x0b
     b22:	10 92 3d 01 	sts	0x013D, r1
     b26:	82 e7       	ldi	r24, 0x72	; 114
     b28:	97 e0       	ldi	r25, 0x07	; 7
     b2a:	90 93 e5 07 	sts	0x07E5, r25
     b2e:	80 93 e4 07 	sts	0x07E4, r24
     b32:	82 e6       	ldi	r24, 0x62	; 98
     b34:	97 e0       	ldi	r25, 0x07	; 7
     b36:	90 93 db 07 	sts	0x07DB, r25
     b3a:	80 93 da 07 	sts	0x07DA, r24
     b3e:	85 e0       	ldi	r24, 0x05	; 5
     b40:	80 93 06 01 	sts	0x0106, r24
     b44:	f6 c1       	rjmp	.+1004   	; 0xf32 <Move_Tick+0x6b4>
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	11 f5       	brne	.+68     	; 0xb8e <Move_Tick+0x310>
     b4a:	ca e6       	ldi	r28, 0x6A	; 106
     b4c:	d7 e0       	ldi	r29, 0x07	; 7
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	44 e3       	ldi	r20, 0x34	; 52
     b54:	53 e4       	ldi	r21, 0x43	; 67
     b56:	68 85       	ldd	r22, Y+8	; 0x08
     b58:	79 85       	ldd	r23, Y+9	; 0x09
     b5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     b5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     b5e:	93 d7       	rcall	.+3878   	; 0x1a86 <__addsf3>
     b60:	68 87       	std	Y+8, r22	; 0x08
     b62:	79 87       	std	Y+9, r23	; 0x09
     b64:	8a 87       	std	Y+10, r24	; 0x0a
     b66:	9b 87       	std	Y+11, r25	; 0x0b
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 3d 01 	sts	0x013D, r24
     b6e:	82 e7       	ldi	r24, 0x72	; 114
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	90 93 e5 07 	sts	0x07E5, r25
     b76:	80 93 e4 07 	sts	0x07E4, r24
     b7a:	82 e6       	ldi	r24, 0x62	; 98
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	90 93 db 07 	sts	0x07DB, r25
     b82:	80 93 da 07 	sts	0x07DA, r24
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	80 93 06 01 	sts	0x0106, r24
     b8c:	d2 c1       	rjmp	.+932    	; 0xf32 <Move_Tick+0x6b4>
     b8e:	89 30       	cpi	r24, 0x09	; 9
     b90:	11 f5       	brne	.+68     	; 0xbd6 <Move_Tick+0x358>
     b92:	ca e6       	ldi	r28, 0x6A	; 106
     b94:	d7 e0       	ldi	r29, 0x07	; 7
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	44 eb       	ldi	r20, 0xB4	; 180
     b9c:	52 e4       	ldi	r21, 0x42	; 66
     b9e:	6c 85       	ldd	r22, Y+12	; 0x0c
     ba0:	7d 85       	ldd	r23, Y+13	; 0x0d
     ba2:	8e 85       	ldd	r24, Y+14	; 0x0e
     ba4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ba6:	6f d7       	rcall	.+3806   	; 0x1a86 <__addsf3>
     ba8:	6c 87       	std	Y+12, r22	; 0x0c
     baa:	7d 87       	std	Y+13, r23	; 0x0d
     bac:	8e 87       	std	Y+14, r24	; 0x0e
     bae:	9f 87       	std	Y+15, r25	; 0x0f
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 3e 01 	sts	0x013E, r24
     bb6:	86 e7       	ldi	r24, 0x76	; 118
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	90 93 e5 07 	sts	0x07E5, r25
     bbe:	80 93 e4 07 	sts	0x07E4, r24
     bc2:	86 e6       	ldi	r24, 0x66	; 102
     bc4:	97 e0       	ldi	r25, 0x07	; 7
     bc6:	90 93 db 07 	sts	0x07DB, r25
     bca:	80 93 da 07 	sts	0x07DA, r24
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	80 93 06 01 	sts	0x0106, r24
     bd4:	ae c1       	rjmp	.+860    	; 0xf32 <Move_Tick+0x6b4>
     bd6:	8a 30       	cpi	r24, 0x0A	; 10
     bd8:	09 f5       	brne	.+66     	; 0xc1c <Move_Tick+0x39e>
     bda:	ca e6       	ldi	r28, 0x6A	; 106
     bdc:	d7 e0       	ldi	r29, 0x07	; 7
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	44 eb       	ldi	r20, 0xB4	; 180
     be4:	52 e4       	ldi	r21, 0x42	; 66
     be6:	6c 85       	ldd	r22, Y+12	; 0x0c
     be8:	7d 85       	ldd	r23, Y+13	; 0x0d
     bea:	8e 85       	ldd	r24, Y+14	; 0x0e
     bec:	9f 85       	ldd	r25, Y+15	; 0x0f
     bee:	4a d7       	rcall	.+3732   	; 0x1a84 <__subsf3>
     bf0:	6c 87       	std	Y+12, r22	; 0x0c
     bf2:	7d 87       	std	Y+13, r23	; 0x0d
     bf4:	8e 87       	std	Y+14, r24	; 0x0e
     bf6:	9f 87       	std	Y+15, r25	; 0x0f
     bf8:	10 92 3e 01 	sts	0x013E, r1
     bfc:	86 e7       	ldi	r24, 0x76	; 118
     bfe:	97 e0       	ldi	r25, 0x07	; 7
     c00:	90 93 e5 07 	sts	0x07E5, r25
     c04:	80 93 e4 07 	sts	0x07E4, r24
     c08:	86 e6       	ldi	r24, 0x66	; 102
     c0a:	97 e0       	ldi	r25, 0x07	; 7
     c0c:	90 93 db 07 	sts	0x07DB, r25
     c10:	80 93 da 07 	sts	0x07DA, r24
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	80 93 06 01 	sts	0x0106, r24
     c1a:	8b c1       	rjmp	.+790    	; 0xf32 <Move_Tick+0x6b4>
     c1c:	8b 30       	cpi	r24, 0x0B	; 11
     c1e:	09 f0       	breq	.+2      	; 0xc22 <Move_Tick+0x3a4>
     c20:	88 c1       	rjmp	.+784    	; 0xf32 <Move_Tick+0x6b4>
     c22:	ca e6       	ldi	r28, 0x6A	; 106
     c24:	d7 e0       	ldi	r29, 0x07	; 7
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	44 e3       	ldi	r20, 0x34	; 52
     c2c:	53 e4       	ldi	r21, 0x43	; 67
     c2e:	6c 85       	ldd	r22, Y+12	; 0x0c
     c30:	7d 85       	ldd	r23, Y+13	; 0x0d
     c32:	8e 85       	ldd	r24, Y+14	; 0x0e
     c34:	9f 85       	ldd	r25, Y+15	; 0x0f
     c36:	27 d7       	rcall	.+3662   	; 0x1a86 <__addsf3>
     c38:	6c 87       	std	Y+12, r22	; 0x0c
     c3a:	7d 87       	std	Y+13, r23	; 0x0d
     c3c:	8e 87       	std	Y+14, r24	; 0x0e
     c3e:	9f 87       	std	Y+15, r25	; 0x0f
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 3e 01 	sts	0x013E, r24
     c46:	86 e7       	ldi	r24, 0x76	; 118
     c48:	97 e0       	ldi	r25, 0x07	; 7
     c4a:	90 93 e5 07 	sts	0x07E5, r25
     c4e:	80 93 e4 07 	sts	0x07E4, r24
     c52:	86 e6       	ldi	r24, 0x66	; 102
     c54:	97 e0       	ldi	r25, 0x07	; 7
     c56:	90 93 db 07 	sts	0x07DB, r25
     c5a:	80 93 da 07 	sts	0x07DA, r24
     c5e:	84 e0       	ldi	r24, 0x04	; 4
     c60:	80 93 06 01 	sts	0x0106, r24
     c64:	66 c1       	rjmp	.+716    	; 0xf32 <Move_Tick+0x6b4>
     c66:	e0 91 e4 07 	lds	r30, 0x07E4
     c6a:	f0 91 e5 07 	lds	r31, 0x07E5
     c6e:	a0 91 da 07 	lds	r26, 0x07DA
     c72:	b0 91 db 07 	lds	r27, 0x07DB
     c76:	2d 91       	ld	r18, X+
     c78:	3d 91       	ld	r19, X+
     c7a:	4d 91       	ld	r20, X+
     c7c:	5c 91       	ld	r21, X
     c7e:	60 81       	ld	r22, Z
     c80:	71 81       	ldd	r23, Z+1	; 0x01
     c82:	82 81       	ldd	r24, Z+2	; 0x02
     c84:	93 81       	ldd	r25, Z+3	; 0x03
     c86:	63 d7       	rcall	.+3782   	; 0x1b4e <__cmpsf2>
     c88:	81 11       	cpse	r24, r1
     c8a:	53 c1       	rjmp	.+678    	; 0xf32 <Move_Tick+0x6b4>
     c8c:	80 91 58 07 	lds	r24, 0x0758
     c90:	82 30       	cpi	r24, 0x02	; 2
     c92:	31 f0       	breq	.+12     	; 0xca0 <Move_Tick+0x422>
     c94:	85 30       	cpi	r24, 0x05	; 5
     c96:	21 f0       	breq	.+8      	; 0xca0 <Move_Tick+0x422>
     c98:	88 30       	cpi	r24, 0x08	; 8
     c9a:	11 f0       	breq	.+4      	; 0xca0 <Move_Tick+0x422>
     c9c:	8b 30       	cpi	r24, 0x0B	; 11
     c9e:	21 f4       	brne	.+8      	; 0xca8 <Move_Tick+0x42a>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 e2 07 	sts	0x07E2, r24
     ca6:	45 c1       	rjmp	.+650    	; 0xf32 <Move_Tick+0x6b4>
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	80 93 e2 07 	sts	0x07E2, r24
     cae:	10 92 59 07 	sts	0x0759, r1
     cb2:	3f c1       	rjmp	.+638    	; 0xf32 <Move_Tick+0x6b4>
     cb4:	80 91 59 07 	lds	r24, 0x0759
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	98 0f       	add	r25, r24
     cbc:	90 93 59 07 	sts	0x0759, r25
     cc0:	83 33       	cpi	r24, 0x33	; 51
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <Move_Tick+0x448>
     cc4:	36 c1       	rjmp	.+620    	; 0xf32 <Move_Tick+0x6b4>
     cc6:	84 e0       	ldi	r24, 0x04	; 4
     cc8:	80 93 e2 07 	sts	0x07E2, r24
     ccc:	80 91 58 07 	lds	r24, 0x0758
     cd0:	81 11       	cpse	r24, r1
     cd2:	21 c0       	rjmp	.+66     	; 0xd16 <Move_Tick+0x498>
     cd4:	ca e6       	ldi	r28, 0x6A	; 106
     cd6:	d7 e0       	ldi	r29, 0x07	; 7
     cd8:	20 e0       	ldi	r18, 0x00	; 0
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	44 eb       	ldi	r20, 0xB4	; 180
     cde:	52 e4       	ldi	r21, 0x42	; 66
     ce0:	6c 81       	ldd	r22, Y+4	; 0x04
     ce2:	7d 81       	ldd	r23, Y+5	; 0x05
     ce4:	8e 81       	ldd	r24, Y+6	; 0x06
     ce6:	9f 81       	ldd	r25, Y+7	; 0x07
     ce8:	cd d6       	rcall	.+3482   	; 0x1a84 <__subsf3>
     cea:	6c 83       	std	Y+4, r22	; 0x04
     cec:	7d 83       	std	Y+5, r23	; 0x05
     cee:	8e 83       	std	Y+6, r24	; 0x06
     cf0:	9f 83       	std	Y+7, r25	; 0x07
     cf2:	10 92 3c 01 	sts	0x013C, r1
     cf6:	8e e6       	ldi	r24, 0x6E	; 110
     cf8:	97 e0       	ldi	r25, 0x07	; 7
     cfa:	90 93 e5 07 	sts	0x07E5, r25
     cfe:	80 93 e4 07 	sts	0x07E4, r24
     d02:	8e e5       	ldi	r24, 0x5E	; 94
     d04:	97 e0       	ldi	r25, 0x07	; 7
     d06:	90 93 db 07 	sts	0x07DB, r25
     d0a:	80 93 da 07 	sts	0x07DA, r24
     d0e:	86 e0       	ldi	r24, 0x06	; 6
     d10:	80 93 06 01 	sts	0x0106, r24
     d14:	0e c1       	rjmp	.+540    	; 0xf32 <Move_Tick+0x6b4>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	11 f5       	brne	.+68     	; 0xd5e <Move_Tick+0x4e0>
     d1a:	ca e6       	ldi	r28, 0x6A	; 106
     d1c:	d7 e0       	ldi	r29, 0x07	; 7
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	44 eb       	ldi	r20, 0xB4	; 180
     d24:	52 e4       	ldi	r21, 0x42	; 66
     d26:	6c 81       	ldd	r22, Y+4	; 0x04
     d28:	7d 81       	ldd	r23, Y+5	; 0x05
     d2a:	8e 81       	ldd	r24, Y+6	; 0x06
     d2c:	9f 81       	ldd	r25, Y+7	; 0x07
     d2e:	ab d6       	rcall	.+3414   	; 0x1a86 <__addsf3>
     d30:	6c 83       	std	Y+4, r22	; 0x04
     d32:	7d 83       	std	Y+5, r23	; 0x05
     d34:	8e 83       	std	Y+6, r24	; 0x06
     d36:	9f 83       	std	Y+7, r25	; 0x07
     d38:	81 e0       	ldi	r24, 0x01	; 1
     d3a:	80 93 3c 01 	sts	0x013C, r24
     d3e:	8e e6       	ldi	r24, 0x6E	; 110
     d40:	97 e0       	ldi	r25, 0x07	; 7
     d42:	90 93 e5 07 	sts	0x07E5, r25
     d46:	80 93 e4 07 	sts	0x07E4, r24
     d4a:	8e e5       	ldi	r24, 0x5E	; 94
     d4c:	97 e0       	ldi	r25, 0x07	; 7
     d4e:	90 93 db 07 	sts	0x07DB, r25
     d52:	80 93 da 07 	sts	0x07DA, r24
     d56:	86 e0       	ldi	r24, 0x06	; 6
     d58:	80 93 06 01 	sts	0x0106, r24
     d5c:	ea c0       	rjmp	.+468    	; 0xf32 <Move_Tick+0x6b4>
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	f9 f4       	brne	.+62     	; 0xda0 <Move_Tick+0x522>
     d62:	ca e6       	ldi	r28, 0x6A	; 106
     d64:	d7 e0       	ldi	r29, 0x07	; 7
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	44 eb       	ldi	r20, 0xB4	; 180
     d6c:	52 e4       	ldi	r21, 0x42	; 66
     d6e:	68 81       	ld	r22, Y
     d70:	79 81       	ldd	r23, Y+1	; 0x01
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	9b 81       	ldd	r25, Y+3	; 0x03
     d76:	86 d6       	rcall	.+3340   	; 0x1a84 <__subsf3>
     d78:	68 83       	st	Y, r22
     d7a:	79 83       	std	Y+1, r23	; 0x01
     d7c:	8a 83       	std	Y+2, r24	; 0x02
     d7e:	9b 83       	std	Y+3, r25	; 0x03
     d80:	10 92 3b 01 	sts	0x013B, r1
     d84:	d0 93 e5 07 	sts	0x07E5, r29
     d88:	c0 93 e4 07 	sts	0x07E4, r28
     d8c:	8a e5       	ldi	r24, 0x5A	; 90
     d8e:	97 e0       	ldi	r25, 0x07	; 7
     d90:	90 93 db 07 	sts	0x07DB, r25
     d94:	80 93 da 07 	sts	0x07DA, r24
     d98:	87 e0       	ldi	r24, 0x07	; 7
     d9a:	80 93 06 01 	sts	0x0106, r24
     d9e:	c9 c0       	rjmp	.+402    	; 0xf32 <Move_Tick+0x6b4>
     da0:	84 30       	cpi	r24, 0x04	; 4
     da2:	01 f5       	brne	.+64     	; 0xde4 <Move_Tick+0x566>
     da4:	ca e6       	ldi	r28, 0x6A	; 106
     da6:	d7 e0       	ldi	r29, 0x07	; 7
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	44 eb       	ldi	r20, 0xB4	; 180
     dae:	52 e4       	ldi	r21, 0x42	; 66
     db0:	68 81       	ld	r22, Y
     db2:	79 81       	ldd	r23, Y+1	; 0x01
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	9b 81       	ldd	r25, Y+3	; 0x03
     db8:	66 d6       	rcall	.+3276   	; 0x1a86 <__addsf3>
     dba:	68 83       	st	Y, r22
     dbc:	79 83       	std	Y+1, r23	; 0x01
     dbe:	8a 83       	std	Y+2, r24	; 0x02
     dc0:	9b 83       	std	Y+3, r25	; 0x03
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	80 93 3b 01 	sts	0x013B, r24
     dc8:	d0 93 e5 07 	sts	0x07E5, r29
     dcc:	c0 93 e4 07 	sts	0x07E4, r28
     dd0:	8a e5       	ldi	r24, 0x5A	; 90
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	90 93 db 07 	sts	0x07DB, r25
     dd8:	80 93 da 07 	sts	0x07DA, r24
     ddc:	87 e0       	ldi	r24, 0x07	; 7
     dde:	80 93 06 01 	sts	0x0106, r24
     de2:	a7 c0       	rjmp	.+334    	; 0xf32 <Move_Tick+0x6b4>
     de4:	86 30       	cpi	r24, 0x06	; 6
     de6:	09 f5       	brne	.+66     	; 0xe2a <Move_Tick+0x5ac>
     de8:	ca e6       	ldi	r28, 0x6A	; 106
     dea:	d7 e0       	ldi	r29, 0x07	; 7
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	44 eb       	ldi	r20, 0xB4	; 180
     df2:	52 e4       	ldi	r21, 0x42	; 66
     df4:	68 85       	ldd	r22, Y+8	; 0x08
     df6:	79 85       	ldd	r23, Y+9	; 0x09
     df8:	8a 85       	ldd	r24, Y+10	; 0x0a
     dfa:	9b 85       	ldd	r25, Y+11	; 0x0b
     dfc:	43 d6       	rcall	.+3206   	; 0x1a84 <__subsf3>
     dfe:	68 87       	std	Y+8, r22	; 0x08
     e00:	79 87       	std	Y+9, r23	; 0x09
     e02:	8a 87       	std	Y+10, r24	; 0x0a
     e04:	9b 87       	std	Y+11, r25	; 0x0b
     e06:	10 92 3d 01 	sts	0x013D, r1
     e0a:	82 e7       	ldi	r24, 0x72	; 114
     e0c:	97 e0       	ldi	r25, 0x07	; 7
     e0e:	90 93 e5 07 	sts	0x07E5, r25
     e12:	80 93 e4 07 	sts	0x07E4, r24
     e16:	82 e6       	ldi	r24, 0x62	; 98
     e18:	97 e0       	ldi	r25, 0x07	; 7
     e1a:	90 93 db 07 	sts	0x07DB, r25
     e1e:	80 93 da 07 	sts	0x07DA, r24
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	80 93 06 01 	sts	0x0106, r24
     e28:	84 c0       	rjmp	.+264    	; 0xf32 <Move_Tick+0x6b4>
     e2a:	87 30       	cpi	r24, 0x07	; 7
     e2c:	11 f5       	brne	.+68     	; 0xe72 <Move_Tick+0x5f4>
     e2e:	ca e6       	ldi	r28, 0x6A	; 106
     e30:	d7 e0       	ldi	r29, 0x07	; 7
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	44 eb       	ldi	r20, 0xB4	; 180
     e38:	52 e4       	ldi	r21, 0x42	; 66
     e3a:	68 85       	ldd	r22, Y+8	; 0x08
     e3c:	79 85       	ldd	r23, Y+9	; 0x09
     e3e:	8a 85       	ldd	r24, Y+10	; 0x0a
     e40:	9b 85       	ldd	r25, Y+11	; 0x0b
     e42:	21 d6       	rcall	.+3138   	; 0x1a86 <__addsf3>
     e44:	68 87       	std	Y+8, r22	; 0x08
     e46:	79 87       	std	Y+9, r23	; 0x09
     e48:	8a 87       	std	Y+10, r24	; 0x0a
     e4a:	9b 87       	std	Y+11, r25	; 0x0b
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 3d 01 	sts	0x013D, r24
     e52:	82 e7       	ldi	r24, 0x72	; 114
     e54:	97 e0       	ldi	r25, 0x07	; 7
     e56:	90 93 e5 07 	sts	0x07E5, r25
     e5a:	80 93 e4 07 	sts	0x07E4, r24
     e5e:	82 e6       	ldi	r24, 0x62	; 98
     e60:	97 e0       	ldi	r25, 0x07	; 7
     e62:	90 93 db 07 	sts	0x07DB, r25
     e66:	80 93 da 07 	sts	0x07DA, r24
     e6a:	85 e0       	ldi	r24, 0x05	; 5
     e6c:	80 93 06 01 	sts	0x0106, r24
     e70:	60 c0       	rjmp	.+192    	; 0xf32 <Move_Tick+0x6b4>
     e72:	89 30       	cpi	r24, 0x09	; 9
     e74:	09 f5       	brne	.+66     	; 0xeb8 <Move_Tick+0x63a>
     e76:	ca e6       	ldi	r28, 0x6A	; 106
     e78:	d7 e0       	ldi	r29, 0x07	; 7
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	44 eb       	ldi	r20, 0xB4	; 180
     e80:	52 e4       	ldi	r21, 0x42	; 66
     e82:	6c 85       	ldd	r22, Y+12	; 0x0c
     e84:	7d 85       	ldd	r23, Y+13	; 0x0d
     e86:	8e 85       	ldd	r24, Y+14	; 0x0e
     e88:	9f 85       	ldd	r25, Y+15	; 0x0f
     e8a:	fc d5       	rcall	.+3064   	; 0x1a84 <__subsf3>
     e8c:	6c 87       	std	Y+12, r22	; 0x0c
     e8e:	7d 87       	std	Y+13, r23	; 0x0d
     e90:	8e 87       	std	Y+14, r24	; 0x0e
     e92:	9f 87       	std	Y+15, r25	; 0x0f
     e94:	10 92 3e 01 	sts	0x013E, r1
     e98:	86 e7       	ldi	r24, 0x76	; 118
     e9a:	97 e0       	ldi	r25, 0x07	; 7
     e9c:	90 93 e5 07 	sts	0x07E5, r25
     ea0:	80 93 e4 07 	sts	0x07E4, r24
     ea4:	86 e6       	ldi	r24, 0x66	; 102
     ea6:	97 e0       	ldi	r25, 0x07	; 7
     ea8:	90 93 db 07 	sts	0x07DB, r25
     eac:	80 93 da 07 	sts	0x07DA, r24
     eb0:	84 e0       	ldi	r24, 0x04	; 4
     eb2:	80 93 06 01 	sts	0x0106, r24
     eb6:	3d c0       	rjmp	.+122    	; 0xf32 <Move_Tick+0x6b4>
     eb8:	8a 30       	cpi	r24, 0x0A	; 10
     eba:	d9 f5       	brne	.+118    	; 0xf32 <Move_Tick+0x6b4>
     ebc:	ca e6       	ldi	r28, 0x6A	; 106
     ebe:	d7 e0       	ldi	r29, 0x07	; 7
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	44 eb       	ldi	r20, 0xB4	; 180
     ec6:	52 e4       	ldi	r21, 0x42	; 66
     ec8:	6c 85       	ldd	r22, Y+12	; 0x0c
     eca:	7d 85       	ldd	r23, Y+13	; 0x0d
     ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
     ece:	9f 85       	ldd	r25, Y+15	; 0x0f
     ed0:	da d5       	rcall	.+2996   	; 0x1a86 <__addsf3>
     ed2:	6c 87       	std	Y+12, r22	; 0x0c
     ed4:	7d 87       	std	Y+13, r23	; 0x0d
     ed6:	8e 87       	std	Y+14, r24	; 0x0e
     ed8:	9f 87       	std	Y+15, r25	; 0x0f
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	80 93 3e 01 	sts	0x013E, r24
     ee0:	86 e7       	ldi	r24, 0x76	; 118
     ee2:	97 e0       	ldi	r25, 0x07	; 7
     ee4:	90 93 e5 07 	sts	0x07E5, r25
     ee8:	80 93 e4 07 	sts	0x07E4, r24
     eec:	86 e6       	ldi	r24, 0x66	; 102
     eee:	97 e0       	ldi	r25, 0x07	; 7
     ef0:	90 93 db 07 	sts	0x07DB, r25
     ef4:	80 93 da 07 	sts	0x07DA, r24
     ef8:	84 e0       	ldi	r24, 0x04	; 4
     efa:	80 93 06 01 	sts	0x0106, r24
     efe:	19 c0       	rjmp	.+50     	; 0xf32 <Move_Tick+0x6b4>
     f00:	e0 91 e4 07 	lds	r30, 0x07E4
     f04:	f0 91 e5 07 	lds	r31, 0x07E5
     f08:	a0 91 da 07 	lds	r26, 0x07DA
     f0c:	b0 91 db 07 	lds	r27, 0x07DB
     f10:	2d 91       	ld	r18, X+
     f12:	3d 91       	ld	r19, X+
     f14:	4d 91       	ld	r20, X+
     f16:	5c 91       	ld	r21, X
     f18:	60 81       	ld	r22, Z
     f1a:	71 81       	ldd	r23, Z+1	; 0x01
     f1c:	82 81       	ldd	r24, Z+2	; 0x02
     f1e:	93 81       	ldd	r25, Z+3	; 0x03
     f20:	16 d6       	rcall	.+3116   	; 0x1b4e <__cmpsf2>
     f22:	81 11       	cpse	r24, r1
     f24:	06 c0       	rjmp	.+12     	; 0xf32 <Move_Tick+0x6b4>
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	80 93 e2 07 	sts	0x07E2, r24
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <Move_Tick+0x6b4>
     f2e:	10 92 e2 07 	sts	0x07E2, r1
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	08 95       	ret

00000f38 <Move_Task>:
     f38:	10 92 e2 07 	sts	0x07E2, r1
     f3c:	a0 dc       	rcall	.-1728   	; 0x87e <Move_Tick>
     f3e:	8a e0       	ldi	r24, 0x0A	; 10
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	df d4       	rcall	.+2494   	; 0x1902 <vTaskDelay>
     f44:	fb cf       	rjmp	.-10     	; 0xf3c <Move_Task+0x4>

00000f46 <Joy_Tick>:
			break;
		case JPUSHED:
			break;
	}
	
	switch(joy_state) {
     f46:	80 91 e0 07 	lds	r24, 0x07E0
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	41 f0       	breq	.+16     	; 0xf5e <Joy_Tick+0x18>
     f4e:	18 f0       	brcs	.+6      	; 0xf56 <Joy_Tick+0x10>
     f50:	82 30       	cpi	r24, 0x02	; 2
     f52:	b9 f1       	breq	.+110    	; 0xfc2 <Joy_Tick+0x7c>
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <Joy_Tick+0x96>
		case JINIT:
			joy_state = JWAIT;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 e0 07 	sts	0x07E0, r24
			break;
     f5c:	08 95       	ret
		case JWAIT:
			joystickSample();
     f5e:	85 d9       	rcall	.-3318   	; 0x26a <joystickSample>
			//PORTD = joyPos;
			if(joyPos == None) joy_state = JWAIT;
     f60:	80 91 e3 07 	lds	r24, 0x07E3
     f64:	81 11       	cpse	r24, r1
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <Joy_Tick+0x2a>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	80 93 e0 07 	sts	0x07E0, r24
     f6e:	08 95       	ret
			else {
				if(joyPos == Right) { PORTD |= 0x00; QueueEnqueue(moves, B); } //target_angle[1] += 90, dir[1] = 1;
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	49 f4       	brne	.+18     	; 0xf86 <Joy_Tick+0x40>
     f74:	8b b1       	in	r24, 0x0b	; 11
     f76:	8b b9       	out	0x0b, r24	; 11
     f78:	69 e0       	ldi	r22, 0x09	; 9
     f7a:	80 91 d6 07 	lds	r24, 0x07D6
     f7e:	90 91 d7 07 	lds	r25, 0x07D7
     f82:	85 da       	rcall	.-2806   	; 0x48e <QueueEnqueue>
     f84:	1a c0       	rjmp	.+52     	; 0xfba <Joy_Tick+0x74>
				else if(joyPos == Left) QueueEnqueue(moves, Bp); //target_angle[1] -= 90, dir[1] = 0;
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	39 f4       	brne	.+14     	; 0xf98 <Joy_Tick+0x52>
     f8a:	6a e0       	ldi	r22, 0x0A	; 10
     f8c:	80 91 d6 07 	lds	r24, 0x07D6
     f90:	90 91 d7 07 	lds	r25, 0x07D7
     f94:	7c da       	rcall	.-2824   	; 0x48e <QueueEnqueue>
     f96:	11 c0       	rjmp	.+34     	; 0xfba <Joy_Tick+0x74>
				else if(joyPos == Down) QueueEnqueue(moves, B2);
     f98:	84 30       	cpi	r24, 0x04	; 4
     f9a:	39 f4       	brne	.+14     	; 0xfaa <Joy_Tick+0x64>
     f9c:	6b e0       	ldi	r22, 0x0B	; 11
     f9e:	80 91 d6 07 	lds	r24, 0x07D6
     fa2:	90 91 d7 07 	lds	r25, 0x07D7
     fa6:	73 da       	rcall	.-2842   	; 0x48e <QueueEnqueue>
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <Joy_Tick+0x74>
				else if(joyPos == Up) QueueEnqueue(moves, B2);
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	31 f4       	brne	.+12     	; 0xfba <Joy_Tick+0x74>
     fae:	6b e0       	ldi	r22, 0x0B	; 11
     fb0:	80 91 d6 07 	lds	r24, 0x07D6
     fb4:	90 91 d7 07 	lds	r25, 0x07D7
     fb8:	6a da       	rcall	.-2860   	; 0x48e <QueueEnqueue>
				joy_state = JPUSHED;
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	80 93 e0 07 	sts	0x07E0, r24
     fc0:	08 95       	ret
			}
			break;
		case JPUSHED:
			joystickSample();
     fc2:	53 d9       	rcall	.-3418   	; 0x26a <joystickSample>
			if(joyPos == None) joy_state = JWAIT;
     fc4:	80 91 e3 07 	lds	r24, 0x07E3
     fc8:	81 11       	cpse	r24, r1
     fca:	04 c0       	rjmp	.+8      	; 0xfd4 <Joy_Tick+0x8e>
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	80 93 e0 07 	sts	0x07E0, r24
     fd2:	08 95       	ret
			else joy_state = JPUSHED;
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	80 93 e0 07 	sts	0x07E0, r24
     fda:	08 95       	ret
			break;
			default:
			joy_state = JINIT;
     fdc:	10 92 e0 07 	sts	0x07E0, r1
     fe0:	08 95       	ret

00000fe2 <Joy_Task>:
enum JoyState {JINIT, JWAIT, JPUSHED} joy_state;
unsigned char x = 0;
unsigned char y = 0;

void Joy_Init() {
	joy_state = JINIT;
     fe2:	10 92 e0 07 	sts	0x07E0, r1
}

void Joy_Task() {
	Joy_Init();
	for(;;) {
		Joy_Tick();
     fe6:	af df       	rcall	.-162    	; 0xf46 <Joy_Tick>
		vTaskDelay(20);
     fe8:	84 e1       	ldi	r24, 0x14	; 20
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	8a d4       	rcall	.+2324   	; 0x1902 <vTaskDelay>
	}
     fee:	fb cf       	rjmp	.-10     	; 0xfe6 <Joy_Task+0x4>

00000ff0 <Receive_Init>:
}

enum ReveiveState {RINIT, RWAIT} receive_state;

void Receive_Init() {
	SPI_ServantInit();
     ff0:	7c da       	rcall	.-2824   	; 0x4ea <SPI_ServantInit>
	receive_state = RINIT;
     ff2:	10 92 e1 07 	sts	0x07E1, r1
     ff6:	08 95       	ret

00000ff8 <Reveiced_Tick>:
}

void Reveiced_Tick() {
	switch(receive_state) {
     ff8:	80 91 e1 07 	lds	r24, 0x07E1
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	61 f4       	brne	.+24     	; 0x1018 <Reveiced_Tick+0x20>
		case RINIT:
			break;
		case RWAIT:
			if(~receivedData) {
    1000:	60 91 47 01 	lds	r22, 0x0147
				if(receivedData < 12) { //Make sure it's a valid move
    1004:	6c 30       	cpi	r22, 0x0C	; 12
    1006:	28 f4       	brcc	.+10     	; 0x1012 <Reveiced_Tick+0x1a>
					QueueEnqueue(moves, receivedData);
    1008:	80 91 d6 07 	lds	r24, 0x07D6
    100c:	90 91 d7 07 	lds	r25, 0x07D7
    1010:	3e da       	rcall	.-2948   	; 0x48e <QueueEnqueue>
				}
				receivedData = 0xFF;
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	80 93 47 01 	sts	0x0147, r24
			} 
			break;
	}
	
	switch(receive_state) {
    1018:	80 91 e1 07 	lds	r24, 0x07E1
    101c:	88 23       	and	r24, r24
    101e:	19 f0       	breq	.+6      	; 0x1026 <Reveiced_Tick+0x2e>
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	29 f4       	brne	.+10     	; 0x102e <Reveiced_Tick+0x36>
    1024:	08 95       	ret
		case RINIT:
			receive_state = RWAIT;
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	80 93 e1 07 	sts	0x07E1, r24
			break;
    102c:	08 95       	ret
		case RWAIT:
			break;
		default:
			receive_state = RINIT;
    102e:	10 92 e1 07 	sts	0x07E1, r1
    1032:	08 95       	ret

00001034 <Receive_Task>:
			break;
	}
}

void Receive_Task() {
	Receive_Init();
    1034:	dd df       	rcall	.-70     	; 0xff0 <Receive_Init>
	for(;;) {
		Reveiced_Tick();
    1036:	e0 df       	rcall	.-64     	; 0xff8 <Reveiced_Tick>
		vTaskDelay(10);
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	62 d4       	rcall	.+2244   	; 0x1902 <vTaskDelay>
	}
    103e:	fb cf       	rjmp	.-10     	; 0x1036 <Receive_Task+0x2>

00001040 <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	cf 93       	push	r28
	xTaskCreate(Motor_Task, (signed portCHAR *)"Motorer", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1050:	a1 2c       	mov	r10, r1
    1052:	b1 2c       	mov	r11, r1
    1054:	c1 2c       	mov	r12, r1
    1056:	d1 2c       	mov	r13, r1
    1058:	e1 2c       	mov	r14, r1
    105a:	f1 2c       	mov	r15, r1
    105c:	08 2f       	mov	r16, r24
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	45 e5       	ldi	r20, 0x55	; 85
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	6a e4       	ldi	r22, 0x4A	; 74
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	87 e3       	ldi	r24, 0x37	; 55
    106c:	94 e0       	ldi	r25, 0x04	; 4
    106e:	d1 d1       	rcall	.+930    	; 0x1412 <xTaskGenericCreate>
	xTaskCreate(Move_Task, (signed portCHAR *)"Mover", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	45 e5       	ldi	r20, 0x55	; 85
    1076:	50 e0       	ldi	r21, 0x00	; 0
    1078:	62 e5       	ldi	r22, 0x52	; 82
    107a:	71 e0       	ldi	r23, 0x01	; 1
    107c:	8c e9       	ldi	r24, 0x9C	; 156
    107e:	97 e0       	ldi	r25, 0x07	; 7
    1080:	c8 d1       	rcall	.+912    	; 0x1412 <xTaskGenericCreate>
	xTaskCreate(Shift_Task, (signed portCHAR *)"Shifter", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	45 e5       	ldi	r20, 0x55	; 85
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	68 e5       	ldi	r22, 0x58	; 88
    108c:	71 e0       	ldi	r23, 0x01	; 1
    108e:	88 ec       	ldi	r24, 0xC8	; 200
    1090:	92 e0       	ldi	r25, 0x02	; 2
    1092:	bf d1       	rcall	.+894    	; 0x1412 <xTaskGenericCreate>
	xTaskCreate(Joy_Task, (signed portCHAR *)"JoySticker", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	45 e5       	ldi	r20, 0x55	; 85
    109a:	50 e0       	ldi	r21, 0x00	; 0
    109c:	60 e6       	ldi	r22, 0x60	; 96
    109e:	71 e0       	ldi	r23, 0x01	; 1
    10a0:	81 ef       	ldi	r24, 0xF1	; 241
    10a2:	97 e0       	ldi	r25, 0x07	; 7
    10a4:	b6 d1       	rcall	.+876    	; 0x1412 <xTaskGenericCreate>
	xTaskCreate(Receive_Task, (signed portCHAR *)"Receiver", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	45 e5       	ldi	r20, 0x55	; 85
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    10ae:	6b e6       	ldi	r22, 0x6B	; 107
    10b0:	71 e0       	ldi	r23, 0x01	; 1
    10b2:	8a e1       	ldi	r24, 0x1A	; 26
    10b4:	98 e0       	ldi	r25, 0x08	; 8
    10b6:	ad d1       	rcall	.+858    	; 0x1412 <xTaskGenericCreate>
}
    10b8:	cf 91       	pop	r28
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	bf 90       	pop	r11
    10c6:	af 90       	pop	r10
    10c8:	08 95       	ret

000010ca <main>:


int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
    10ca:	11 b8       	out	0x01, r1	; 1
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
    10d0:	87 b9       	out	0x07, r24	; 7
    10d2:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
    10d4:	8a b9       	out	0x0a, r24	; 10
    10d6:	1b b8       	out	0x0b, r1	; 11
	
	
	moves = QueueInit(30);
    10d8:	8e e1       	ldi	r24, 0x1E	; 30
    10da:	c1 d9       	rcall	.-3198   	; 0x45e <QueueInit>
    10dc:	90 93 d7 07 	sts	0x07D7, r25
    10e0:	80 93 d6 07 	sts	0x07D6, r24
	
	joystickInit();
    10e4:	b4 d8       	rcall	.-3736   	; 0x24e <joystickInit>
	StartSecPulse(1);
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	ab df       	rcall	.-170    	; 0x1040 <StartSecPulse>
	vTaskStartScheduler();
    10ea:	94 d2       	rcall	.+1320   	; 0x1614 <vTaskStartScheduler>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	08 95       	ret

000010f2 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    10f2:	31 e1       	ldi	r19, 0x11	; 17
    10f4:	fc 01       	movw	r30, r24
    10f6:	30 83       	st	Z, r19
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	22 e2       	ldi	r18, 0x22	; 34
    10fc:	20 83       	st	Z, r18
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	a3 e3       	ldi	r26, 0x33	; 51
    1102:	a0 83       	st	Z, r26
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	60 83       	st	Z, r22
    1108:	31 97       	sbiw	r30, 0x01	; 1
    110a:	70 83       	st	Z, r23
    110c:	31 97       	sbiw	r30, 0x01	; 1
    110e:	10 82       	st	Z, r1
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	60 e8       	ldi	r22, 0x80	; 128
    1114:	60 83       	st	Z, r22
    1116:	31 97       	sbiw	r30, 0x01	; 1
    1118:	10 82       	st	Z, r1
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	62 e0       	ldi	r22, 0x02	; 2
    111e:	60 83       	st	Z, r22
    1120:	31 97       	sbiw	r30, 0x01	; 1
    1122:	63 e0       	ldi	r22, 0x03	; 3
    1124:	60 83       	st	Z, r22
    1126:	31 97       	sbiw	r30, 0x01	; 1
    1128:	64 e0       	ldi	r22, 0x04	; 4
    112a:	60 83       	st	Z, r22
    112c:	31 97       	sbiw	r30, 0x01	; 1
    112e:	65 e0       	ldi	r22, 0x05	; 5
    1130:	60 83       	st	Z, r22
    1132:	31 97       	sbiw	r30, 0x01	; 1
    1134:	66 e0       	ldi	r22, 0x06	; 6
    1136:	60 83       	st	Z, r22
    1138:	31 97       	sbiw	r30, 0x01	; 1
    113a:	67 e0       	ldi	r22, 0x07	; 7
    113c:	60 83       	st	Z, r22
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	68 e0       	ldi	r22, 0x08	; 8
    1142:	60 83       	st	Z, r22
    1144:	31 97       	sbiw	r30, 0x01	; 1
    1146:	69 e0       	ldi	r22, 0x09	; 9
    1148:	60 83       	st	Z, r22
    114a:	31 97       	sbiw	r30, 0x01	; 1
    114c:	60 e1       	ldi	r22, 0x10	; 16
    114e:	60 83       	st	Z, r22
    1150:	31 97       	sbiw	r30, 0x01	; 1
    1152:	30 83       	st	Z, r19
    1154:	31 97       	sbiw	r30, 0x01	; 1
    1156:	32 e1       	ldi	r19, 0x12	; 18
    1158:	30 83       	st	Z, r19
    115a:	31 97       	sbiw	r30, 0x01	; 1
    115c:	33 e1       	ldi	r19, 0x13	; 19
    115e:	30 83       	st	Z, r19
    1160:	31 97       	sbiw	r30, 0x01	; 1
    1162:	34 e1       	ldi	r19, 0x14	; 20
    1164:	30 83       	st	Z, r19
    1166:	31 97       	sbiw	r30, 0x01	; 1
    1168:	35 e1       	ldi	r19, 0x15	; 21
    116a:	30 83       	st	Z, r19
    116c:	31 97       	sbiw	r30, 0x01	; 1
    116e:	36 e1       	ldi	r19, 0x16	; 22
    1170:	30 83       	st	Z, r19
    1172:	31 97       	sbiw	r30, 0x01	; 1
    1174:	37 e1       	ldi	r19, 0x17	; 23
    1176:	30 83       	st	Z, r19
    1178:	31 97       	sbiw	r30, 0x01	; 1
    117a:	38 e1       	ldi	r19, 0x18	; 24
    117c:	30 83       	st	Z, r19
    117e:	31 97       	sbiw	r30, 0x01	; 1
    1180:	39 e1       	ldi	r19, 0x19	; 25
    1182:	30 83       	st	Z, r19
    1184:	31 97       	sbiw	r30, 0x01	; 1
    1186:	30 e2       	ldi	r19, 0x20	; 32
    1188:	30 83       	st	Z, r19
    118a:	31 97       	sbiw	r30, 0x01	; 1
    118c:	31 e2       	ldi	r19, 0x21	; 33
    118e:	30 83       	st	Z, r19
    1190:	31 97       	sbiw	r30, 0x01	; 1
    1192:	20 83       	st	Z, r18
    1194:	31 97       	sbiw	r30, 0x01	; 1
    1196:	23 e2       	ldi	r18, 0x23	; 35
    1198:	20 83       	st	Z, r18
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	40 83       	st	Z, r20
    119e:	31 97       	sbiw	r30, 0x01	; 1
    11a0:	50 83       	st	Z, r21
    11a2:	31 97       	sbiw	r30, 0x01	; 1
    11a4:	26 e2       	ldi	r18, 0x26	; 38
    11a6:	20 83       	st	Z, r18
    11a8:	31 97       	sbiw	r30, 0x01	; 1
    11aa:	27 e2       	ldi	r18, 0x27	; 39
    11ac:	20 83       	st	Z, r18
    11ae:	31 97       	sbiw	r30, 0x01	; 1
    11b0:	28 e2       	ldi	r18, 0x28	; 40
    11b2:	20 83       	st	Z, r18
    11b4:	31 97       	sbiw	r30, 0x01	; 1
    11b6:	29 e2       	ldi	r18, 0x29	; 41
    11b8:	20 83       	st	Z, r18
    11ba:	31 97       	sbiw	r30, 0x01	; 1
    11bc:	20 e3       	ldi	r18, 0x30	; 48
    11be:	20 83       	st	Z, r18
    11c0:	31 97       	sbiw	r30, 0x01	; 1
    11c2:	21 e3       	ldi	r18, 0x31	; 49
    11c4:	20 83       	st	Z, r18
    11c6:	86 97       	sbiw	r24, 0x26	; 38
    11c8:	08 95       	ret

000011ca <xPortStartScheduler>:
    11ca:	10 92 89 00 	sts	0x0089, r1
    11ce:	8c e7       	ldi	r24, 0x7C	; 124
    11d0:	80 93 88 00 	sts	0x0088, r24
    11d4:	8b e0       	ldi	r24, 0x0B	; 11
    11d6:	80 93 81 00 	sts	0x0081, r24
    11da:	ef e6       	ldi	r30, 0x6F	; 111
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	82 60       	ori	r24, 0x02	; 2
    11e2:	80 83       	st	Z, r24
    11e4:	a0 91 d4 07 	lds	r26, 0x07D4
    11e8:	b0 91 d5 07 	lds	r27, 0x07D5
    11ec:	cd 91       	ld	r28, X+
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	dd 91       	ld	r29, X+
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	bf 91       	pop	r27
    11fe:	af 91       	pop	r26
    1200:	9f 91       	pop	r25
    1202:	8f 91       	pop	r24
    1204:	7f 91       	pop	r23
    1206:	6f 91       	pop	r22
    1208:	5f 91       	pop	r21
    120a:	4f 91       	pop	r20
    120c:	3f 91       	pop	r19
    120e:	2f 91       	pop	r18
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	ff 90       	pop	r15
    1216:	ef 90       	pop	r14
    1218:	df 90       	pop	r13
    121a:	cf 90       	pop	r12
    121c:	bf 90       	pop	r11
    121e:	af 90       	pop	r10
    1220:	9f 90       	pop	r9
    1222:	8f 90       	pop	r8
    1224:	7f 90       	pop	r7
    1226:	6f 90       	pop	r6
    1228:	5f 90       	pop	r5
    122a:	4f 90       	pop	r4
    122c:	3f 90       	pop	r3
    122e:	2f 90       	pop	r2
    1230:	1f 90       	pop	r1
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0f 90       	pop	r0
    1238:	08 95       	ret
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	08 95       	ret

0000123e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    123e:	0f 92       	push	r0
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	0f 92       	push	r0
    1246:	1f 92       	push	r1
    1248:	11 24       	eor	r1, r1
    124a:	2f 92       	push	r2
    124c:	3f 92       	push	r3
    124e:	4f 92       	push	r4
    1250:	5f 92       	push	r5
    1252:	6f 92       	push	r6
    1254:	7f 92       	push	r7
    1256:	8f 92       	push	r8
    1258:	9f 92       	push	r9
    125a:	af 92       	push	r10
    125c:	bf 92       	push	r11
    125e:	cf 92       	push	r12
    1260:	df 92       	push	r13
    1262:	ef 92       	push	r14
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	a0 91 d4 07 	lds	r26, 0x07D4
    128a:	b0 91 d5 07 	lds	r27, 0x07D5
    128e:	0d b6       	in	r0, 0x3d	; 61
    1290:	0d 92       	st	X+, r0
    1292:	0e b6       	in	r0, 0x3e	; 62
    1294:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1296:	8a d3       	rcall	.+1812   	; 0x19ac <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1298:	a0 91 d4 07 	lds	r26, 0x07D4
    129c:	b0 91 d5 07 	lds	r27, 0x07D5
    12a0:	cd 91       	ld	r28, X+
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	dd 91       	ld	r29, X+
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	ff 91       	pop	r31
    12aa:	ef 91       	pop	r30
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	bf 91       	pop	r27
    12b2:	af 91       	pop	r26
    12b4:	9f 91       	pop	r25
    12b6:	8f 91       	pop	r24
    12b8:	7f 91       	pop	r23
    12ba:	6f 91       	pop	r22
    12bc:	5f 91       	pop	r21
    12be:	4f 91       	pop	r20
    12c0:	3f 91       	pop	r19
    12c2:	2f 91       	pop	r18
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	3f 90       	pop	r3
    12e2:	2f 90       	pop	r2
    12e4:	1f 90       	pop	r1
    12e6:	0f 90       	pop	r0
    12e8:	0f be       	out	0x3f, r0	; 63
    12ea:	0f 90       	pop	r0

	asm volatile ( "ret" );
    12ec:	08 95       	ret

000012ee <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	0f 92       	push	r0
    12f6:	1f 92       	push	r1
    12f8:	11 24       	eor	r1, r1
    12fa:	2f 92       	push	r2
    12fc:	3f 92       	push	r3
    12fe:	4f 92       	push	r4
    1300:	5f 92       	push	r5
    1302:	6f 92       	push	r6
    1304:	7f 92       	push	r7
    1306:	8f 92       	push	r8
    1308:	9f 92       	push	r9
    130a:	af 92       	push	r10
    130c:	bf 92       	push	r11
    130e:	cf 92       	push	r12
    1310:	df 92       	push	r13
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	a0 91 d4 07 	lds	r26, 0x07D4
    133a:	b0 91 d5 07 	lds	r27, 0x07D5
    133e:	0d b6       	in	r0, 0x3d	; 61
    1340:	0d 92       	st	X+, r0
    1342:	0e b6       	in	r0, 0x3e	; 62
    1344:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1346:	95 d1       	rcall	.+810    	; 0x1672 <vTaskIncrementTick>
	vTaskSwitchContext();
    1348:	31 d3       	rcall	.+1634   	; 0x19ac <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    134a:	a0 91 d4 07 	lds	r26, 0x07D4
    134e:	b0 91 d5 07 	lds	r27, 0x07D5
    1352:	cd 91       	ld	r28, X+
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	dd 91       	ld	r29, X+
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	ff 90       	pop	r15
    137c:	ef 90       	pop	r14
    137e:	df 90       	pop	r13
    1380:	cf 90       	pop	r12
    1382:	bf 90       	pop	r11
    1384:	af 90       	pop	r10
    1386:	9f 90       	pop	r9
    1388:	8f 90       	pop	r8
    138a:	7f 90       	pop	r7
    138c:	6f 90       	pop	r6
    138e:	5f 90       	pop	r5
    1390:	4f 90       	pop	r4
    1392:	3f 90       	pop	r3
    1394:	2f 90       	pop	r2
    1396:	1f 90       	pop	r1
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    139e:	08 95       	ret

000013a0 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    13a0:	a6 df       	rcall	.-180    	; 0x12ee <vPortYieldFromTick>
		asm volatile ( "reti" );
    13a2:	18 95       	reti

000013a4 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	ec 01       	movw	r28, r24
    13aa:	e0 91 d4 07 	lds	r30, 0x07D4
    13ae:	f0 91 d5 07 	lds	r31, 0x07D5
    13b2:	93 83       	std	Z+3, r25	; 0x03
    13b4:	82 83       	std	Z+2, r24	; 0x02
    13b6:	80 91 84 07 	lds	r24, 0x0784
    13ba:	90 91 85 07 	lds	r25, 0x0785
    13be:	c8 17       	cp	r28, r24
    13c0:	d9 07       	cpc	r29, r25
    13c2:	68 f4       	brcc	.+26     	; 0x13de <prvAddCurrentTaskToDelayedList+0x3a>
    13c4:	60 91 d4 07 	lds	r22, 0x07D4
    13c8:	70 91 d5 07 	lds	r23, 0x07D5
    13cc:	80 91 9a 07 	lds	r24, 0x079A
    13d0:	90 91 9b 07 	lds	r25, 0x079B
    13d4:	6e 5f       	subi	r22, 0xFE	; 254
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    13dc:	17 c0       	rjmp	.+46     	; 0x140c <prvAddCurrentTaskToDelayedList+0x68>
    13de:	60 91 d4 07 	lds	r22, 0x07D4
    13e2:	70 91 d5 07 	lds	r23, 0x07D5
    13e6:	80 91 9c 07 	lds	r24, 0x079C
    13ea:	90 91 9d 07 	lds	r25, 0x079D
    13ee:	6e 5f       	subi	r22, 0xFE	; 254
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	0e 94 c6 00 	call	0x18c	; 0x18c <vListInsert>
    13f6:	80 91 48 01 	lds	r24, 0x0148
    13fa:	90 91 49 01 	lds	r25, 0x0149
    13fe:	c8 17       	cp	r28, r24
    1400:	d9 07       	cpc	r29, r25
    1402:	20 f4       	brcc	.+8      	; 0x140c <prvAddCurrentTaskToDelayedList+0x68>
    1404:	d0 93 49 01 	sts	0x0149, r29
    1408:	c0 93 48 01 	sts	0x0148, r28
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <xTaskGenericCreate>:
    1412:	4f 92       	push	r4
    1414:	5f 92       	push	r5
    1416:	6f 92       	push	r6
    1418:	7f 92       	push	r7
    141a:	8f 92       	push	r8
    141c:	9f 92       	push	r9
    141e:	af 92       	push	r10
    1420:	bf 92       	push	r11
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	5c 01       	movw	r10, r24
    1434:	4b 01       	movw	r8, r22
    1436:	3a 01       	movw	r6, r20
    1438:	29 01       	movw	r4, r18
    143a:	81 e2       	ldi	r24, 0x21	; 33
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    1442:	ec 01       	movw	r28, r24
    1444:	89 2b       	or	r24, r25
    1446:	09 f4       	brne	.+2      	; 0x144a <xTaskGenericCreate+0x38>
    1448:	d3 c0       	rjmp	.+422    	; 0x15f0 <xTaskGenericCreate+0x1de>
    144a:	c1 14       	cp	r12, r1
    144c:	d1 04       	cpc	r13, r1
    144e:	09 f0       	breq	.+2      	; 0x1452 <xTaskGenericCreate+0x40>
    1450:	cb c0       	rjmp	.+406    	; 0x15e8 <xTaskGenericCreate+0x1d6>
    1452:	c3 01       	movw	r24, r6
    1454:	0e 94 66 00 	call	0xcc	; 0xcc <pvPortMalloc>
    1458:	98 8f       	std	Y+24, r25	; 0x18
    145a:	8f 8b       	std	Y+23, r24	; 0x17
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	21 f4       	brne	.+8      	; 0x1468 <xTaskGenericCreate+0x56>
    1460:	ce 01       	movw	r24, r28
    1462:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
    1466:	c4 c0       	rjmp	.+392    	; 0x15f0 <xTaskGenericCreate+0x1de>
    1468:	a3 01       	movw	r20, r6
    146a:	65 ea       	ldi	r22, 0xA5	; 165
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	e6 d5       	rcall	.+3020   	; 0x203c <memset>
    1470:	93 01       	movw	r18, r6
    1472:	21 50       	subi	r18, 0x01	; 1
    1474:	31 09       	sbc	r19, r1
    1476:	8f 89       	ldd	r24, Y+23	; 0x17
    1478:	98 8d       	ldd	r25, Y+24	; 0x18
    147a:	3c 01       	movw	r6, r24
    147c:	62 0e       	add	r6, r18
    147e:	73 1e       	adc	r7, r19
    1480:	48 e0       	ldi	r20, 0x08	; 8
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	b4 01       	movw	r22, r8
    1486:	ce 01       	movw	r24, r28
    1488:	49 96       	adiw	r24, 0x19	; 25
    148a:	df d5       	rcall	.+3006   	; 0x204a <strncpy>
    148c:	18 a2       	std	Y+32, r1	; 0x20
    148e:	10 2f       	mov	r17, r16
    1490:	04 30       	cpi	r16, 0x04	; 4
    1492:	08 f0       	brcs	.+2      	; 0x1496 <xTaskGenericCreate+0x84>
    1494:	13 e0       	ldi	r17, 0x03	; 3
    1496:	1e 8b       	std	Y+22, r17	; 0x16
    1498:	6e 01       	movw	r12, r28
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	c8 0e       	add	r12, r24
    149e:	d1 1c       	adc	r13, r1
    14a0:	c6 01       	movw	r24, r12
    14a2:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    14a6:	ce 01       	movw	r24, r28
    14a8:	0c 96       	adiw	r24, 0x0c	; 12
    14aa:	0e 94 9b 00 	call	0x136	; 0x136 <vListInitialiseItem>
    14ae:	d9 87       	std	Y+9, r29	; 0x09
    14b0:	c8 87       	std	Y+8, r28	; 0x08
    14b2:	84 e0       	ldi	r24, 0x04	; 4
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	81 1b       	sub	r24, r17
    14b8:	91 09       	sbc	r25, r1
    14ba:	9d 87       	std	Y+13, r25	; 0x0d
    14bc:	8c 87       	std	Y+12, r24	; 0x0c
    14be:	db 8b       	std	Y+19, r29	; 0x13
    14c0:	ca 8b       	std	Y+18, r28	; 0x12
    14c2:	a2 01       	movw	r20, r4
    14c4:	b5 01       	movw	r22, r10
    14c6:	c3 01       	movw	r24, r6
    14c8:	14 de       	rcall	.-984    	; 0x10f2 <pxPortInitialiseStack>
    14ca:	99 83       	std	Y+1, r25	; 0x01
    14cc:	88 83       	st	Y, r24
    14ce:	e1 14       	cp	r14, r1
    14d0:	f1 04       	cpc	r15, r1
    14d2:	19 f0       	breq	.+6      	; 0x14da <xTaskGenericCreate+0xc8>
    14d4:	f7 01       	movw	r30, r14
    14d6:	d1 83       	std	Z+1, r29	; 0x01
    14d8:	c0 83       	st	Z, r28
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	0f 92       	push	r0
    14e0:	80 91 86 07 	lds	r24, 0x0786
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	80 93 86 07 	sts	0x0786, r24
    14ea:	80 91 d4 07 	lds	r24, 0x07D4
    14ee:	90 91 d5 07 	lds	r25, 0x07D5
    14f2:	89 2b       	or	r24, r25
    14f4:	a9 f5       	brne	.+106    	; 0x1560 <xTaskGenericCreate+0x14e>
    14f6:	d0 93 d5 07 	sts	0x07D5, r29
    14fa:	c0 93 d4 07 	sts	0x07D4, r28
    14fe:	80 91 86 07 	lds	r24, 0x0786
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	e1 f5       	brne	.+120    	; 0x157e <xTaskGenericCreate+0x16c>
    1506:	80 eb       	ldi	r24, 0xB0	; 176
    1508:	97 e0       	ldi	r25, 0x07	; 7
    150a:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    150e:	89 eb       	ldi	r24, 0xB9	; 185
    1510:	97 e0       	ldi	r25, 0x07	; 7
    1512:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1516:	82 ec       	ldi	r24, 0xC2	; 194
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    151e:	8b ec       	ldi	r24, 0xCB	; 203
    1520:	97 e0       	ldi	r25, 0x07	; 7
    1522:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1526:	87 ea       	ldi	r24, 0xA7	; 167
    1528:	97 e0       	ldi	r25, 0x07	; 7
    152a:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    152e:	8e e9       	ldi	r24, 0x9E	; 158
    1530:	97 e0       	ldi	r25, 0x07	; 7
    1532:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1536:	81 e9       	ldi	r24, 0x91	; 145
    1538:	97 e0       	ldi	r25, 0x07	; 7
    153a:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    153e:	88 e8       	ldi	r24, 0x88	; 136
    1540:	97 e0       	ldi	r25, 0x07	; 7
    1542:	0e 94 8d 00 	call	0x11a	; 0x11a <vListInitialise>
    1546:	87 ea       	ldi	r24, 0xA7	; 167
    1548:	97 e0       	ldi	r25, 0x07	; 7
    154a:	90 93 9d 07 	sts	0x079D, r25
    154e:	80 93 9c 07 	sts	0x079C, r24
    1552:	8e e9       	ldi	r24, 0x9E	; 158
    1554:	97 e0       	ldi	r25, 0x07	; 7
    1556:	90 93 9b 07 	sts	0x079B, r25
    155a:	80 93 9a 07 	sts	0x079A, r24
    155e:	0f c0       	rjmp	.+30     	; 0x157e <xTaskGenericCreate+0x16c>
    1560:	80 91 81 07 	lds	r24, 0x0781
    1564:	81 11       	cpse	r24, r1
    1566:	0b c0       	rjmp	.+22     	; 0x157e <xTaskGenericCreate+0x16c>
    1568:	e0 91 d4 07 	lds	r30, 0x07D4
    156c:	f0 91 d5 07 	lds	r31, 0x07D5
    1570:	86 89       	ldd	r24, Z+22	; 0x16
    1572:	08 17       	cp	r16, r24
    1574:	20 f0       	brcs	.+8      	; 0x157e <xTaskGenericCreate+0x16c>
    1576:	d0 93 d5 07 	sts	0x07D5, r29
    157a:	c0 93 d4 07 	sts	0x07D4, r28
    157e:	8e 89       	ldd	r24, Y+22	; 0x16
    1580:	90 91 83 07 	lds	r25, 0x0783
    1584:	98 17       	cp	r25, r24
    1586:	10 f4       	brcc	.+4      	; 0x158c <xTaskGenericCreate+0x17a>
    1588:	80 93 83 07 	sts	0x0783, r24
    158c:	90 91 7c 07 	lds	r25, 0x077C
    1590:	9f 5f       	subi	r25, 0xFF	; 255
    1592:	90 93 7c 07 	sts	0x077C, r25
    1596:	90 91 82 07 	lds	r25, 0x0782
    159a:	98 17       	cp	r25, r24
    159c:	10 f4       	brcc	.+4      	; 0x15a2 <xTaskGenericCreate+0x190>
    159e:	80 93 82 07 	sts	0x0782, r24
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9c 01       	movw	r18, r24
    15a6:	22 0f       	add	r18, r18
    15a8:	33 1f       	adc	r19, r19
    15aa:	22 0f       	add	r18, r18
    15ac:	33 1f       	adc	r19, r19
    15ae:	22 0f       	add	r18, r18
    15b0:	33 1f       	adc	r19, r19
    15b2:	82 0f       	add	r24, r18
    15b4:	93 1f       	adc	r25, r19
    15b6:	b6 01       	movw	r22, r12
    15b8:	80 55       	subi	r24, 0x50	; 80
    15ba:	98 4f       	sbci	r25, 0xF8	; 248
    15bc:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	80 91 81 07 	lds	r24, 0x0781
    15c8:	88 23       	and	r24, r24
    15ca:	51 f0       	breq	.+20     	; 0x15e0 <xTaskGenericCreate+0x1ce>
    15cc:	e0 91 d4 07 	lds	r30, 0x07D4
    15d0:	f0 91 d5 07 	lds	r31, 0x07D5
    15d4:	86 89       	ldd	r24, Z+22	; 0x16
    15d6:	80 17       	cp	r24, r16
    15d8:	28 f4       	brcc	.+10     	; 0x15e4 <xTaskGenericCreate+0x1d2>
    15da:	31 de       	rcall	.-926    	; 0x123e <vPortYield>
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <xTaskGenericCreate+0x1e0>
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	07 c0       	rjmp	.+14     	; 0x15f2 <xTaskGenericCreate+0x1e0>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <xTaskGenericCreate+0x1e0>
    15e8:	d8 8e       	std	Y+24, r13	; 0x18
    15ea:	cf 8a       	std	Y+23, r12	; 0x17
    15ec:	c6 01       	movw	r24, r12
    15ee:	3c cf       	rjmp	.-392    	; 0x1468 <xTaskGenericCreate+0x56>
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	1f 91       	pop	r17
    15f8:	0f 91       	pop	r16
    15fa:	ff 90       	pop	r15
    15fc:	ef 90       	pop	r14
    15fe:	df 90       	pop	r13
    1600:	cf 90       	pop	r12
    1602:	bf 90       	pop	r11
    1604:	af 90       	pop	r10
    1606:	9f 90       	pop	r9
    1608:	8f 90       	pop	r8
    160a:	7f 90       	pop	r7
    160c:	6f 90       	pop	r6
    160e:	5f 90       	pop	r5
    1610:	4f 90       	pop	r4
    1612:	08 95       	ret

00001614 <vTaskStartScheduler>:
    1614:	af 92       	push	r10
    1616:	bf 92       	push	r11
    1618:	cf 92       	push	r12
    161a:	df 92       	push	r13
    161c:	ef 92       	push	r14
    161e:	ff 92       	push	r15
    1620:	0f 93       	push	r16
    1622:	a1 2c       	mov	r10, r1
    1624:	b1 2c       	mov	r11, r1
    1626:	c1 2c       	mov	r12, r1
    1628:	d1 2c       	mov	r13, r1
    162a:	e1 2c       	mov	r14, r1
    162c:	f1 2c       	mov	r15, r1
    162e:	00 e0       	ldi	r16, 0x00	; 0
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	45 e5       	ldi	r20, 0x55	; 85
    1636:	50 e0       	ldi	r21, 0x00	; 0
    1638:	64 e7       	ldi	r22, 0x74	; 116
    163a:	71 e0       	ldi	r23, 0x01	; 1
    163c:	8d e9       	ldi	r24, 0x9D	; 157
    163e:	9c e0       	ldi	r25, 0x0C	; 12
    1640:	e8 de       	rcall	.-560    	; 0x1412 <xTaskGenericCreate>
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	41 f4       	brne	.+16     	; 0x1656 <vTaskStartScheduler+0x42>
    1646:	f8 94       	cli
    1648:	80 93 81 07 	sts	0x0781, r24
    164c:	10 92 85 07 	sts	0x0785, r1
    1650:	10 92 84 07 	sts	0x0784, r1
    1654:	ba dd       	rcall	.-1164   	; 0x11ca <xPortStartScheduler>
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	08 95       	ret

00001666 <vTaskSuspendAll>:
    1666:	80 91 80 07 	lds	r24, 0x0780
    166a:	8f 5f       	subi	r24, 0xFF	; 255
    166c:	80 93 80 07 	sts	0x0780, r24
    1670:	08 95       	ret

00001672 <vTaskIncrementTick>:
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	80 91 80 07 	lds	r24, 0x0780
    167e:	81 11       	cpse	r24, r1
    1680:	b2 c0       	rjmp	.+356    	; 0x17e6 <vTaskIncrementTick+0x174>
    1682:	80 91 84 07 	lds	r24, 0x0784
    1686:	90 91 85 07 	lds	r25, 0x0785
    168a:	01 96       	adiw	r24, 0x01	; 1
    168c:	90 93 85 07 	sts	0x0785, r25
    1690:	80 93 84 07 	sts	0x0784, r24
    1694:	80 91 84 07 	lds	r24, 0x0784
    1698:	90 91 85 07 	lds	r25, 0x0785
    169c:	89 2b       	or	r24, r25
    169e:	99 f5       	brne	.+102    	; 0x1706 <vTaskIncrementTick+0x94>
    16a0:	80 91 9c 07 	lds	r24, 0x079C
    16a4:	90 91 9d 07 	lds	r25, 0x079D
    16a8:	20 91 9a 07 	lds	r18, 0x079A
    16ac:	30 91 9b 07 	lds	r19, 0x079B
    16b0:	30 93 9d 07 	sts	0x079D, r19
    16b4:	20 93 9c 07 	sts	0x079C, r18
    16b8:	90 93 9b 07 	sts	0x079B, r25
    16bc:	80 93 9a 07 	sts	0x079A, r24
    16c0:	80 91 7d 07 	lds	r24, 0x077D
    16c4:	8f 5f       	subi	r24, 0xFF	; 255
    16c6:	80 93 7d 07 	sts	0x077D, r24
    16ca:	e0 91 9c 07 	lds	r30, 0x079C
    16ce:	f0 91 9d 07 	lds	r31, 0x079D
    16d2:	80 81       	ld	r24, Z
    16d4:	81 11       	cpse	r24, r1
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <vTaskIncrementTick+0x74>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	90 93 49 01 	sts	0x0149, r25
    16e0:	80 93 48 01 	sts	0x0148, r24
    16e4:	10 c0       	rjmp	.+32     	; 0x1706 <vTaskIncrementTick+0x94>
    16e6:	e0 91 9c 07 	lds	r30, 0x079C
    16ea:	f0 91 9d 07 	lds	r31, 0x079D
    16ee:	05 80       	ldd	r0, Z+5	; 0x05
    16f0:	f6 81       	ldd	r31, Z+6	; 0x06
    16f2:	e0 2d       	mov	r30, r0
    16f4:	06 80       	ldd	r0, Z+6	; 0x06
    16f6:	f7 81       	ldd	r31, Z+7	; 0x07
    16f8:	e0 2d       	mov	r30, r0
    16fa:	82 81       	ldd	r24, Z+2	; 0x02
    16fc:	93 81       	ldd	r25, Z+3	; 0x03
    16fe:	90 93 49 01 	sts	0x0149, r25
    1702:	80 93 48 01 	sts	0x0148, r24
    1706:	20 91 84 07 	lds	r18, 0x0784
    170a:	30 91 85 07 	lds	r19, 0x0785
    170e:	80 91 48 01 	lds	r24, 0x0148
    1712:	90 91 49 01 	lds	r25, 0x0149
    1716:	28 17       	cp	r18, r24
    1718:	39 07       	cpc	r19, r25
    171a:	08 f4       	brcc	.+2      	; 0x171e <vTaskIncrementTick+0xac>
    171c:	69 c0       	rjmp	.+210    	; 0x17f0 <vTaskIncrementTick+0x17e>
    171e:	e0 91 9c 07 	lds	r30, 0x079C
    1722:	f0 91 9d 07 	lds	r31, 0x079D
    1726:	80 81       	ld	r24, Z
    1728:	88 23       	and	r24, r24
    172a:	99 f0       	breq	.+38     	; 0x1752 <vTaskIncrementTick+0xe0>
    172c:	e0 91 9c 07 	lds	r30, 0x079C
    1730:	f0 91 9d 07 	lds	r31, 0x079D
    1734:	05 80       	ldd	r0, Z+5	; 0x05
    1736:	f6 81       	ldd	r31, Z+6	; 0x06
    1738:	e0 2d       	mov	r30, r0
    173a:	c6 81       	ldd	r28, Z+6	; 0x06
    173c:	d7 81       	ldd	r29, Z+7	; 0x07
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	20 91 84 07 	lds	r18, 0x0784
    1746:	30 91 85 07 	lds	r19, 0x0785
    174a:	28 17       	cp	r18, r24
    174c:	39 07       	cpc	r19, r25
    174e:	f8 f4       	brcc	.+62     	; 0x178e <vTaskIncrementTick+0x11c>
    1750:	19 c0       	rjmp	.+50     	; 0x1784 <vTaskIncrementTick+0x112>
    1752:	8f ef       	ldi	r24, 0xFF	; 255
    1754:	9f ef       	ldi	r25, 0xFF	; 255
    1756:	90 93 49 01 	sts	0x0149, r25
    175a:	80 93 48 01 	sts	0x0148, r24
    175e:	48 c0       	rjmp	.+144    	; 0x17f0 <vTaskIncrementTick+0x17e>
    1760:	e0 91 9c 07 	lds	r30, 0x079C
    1764:	f0 91 9d 07 	lds	r31, 0x079D
    1768:	05 80       	ldd	r0, Z+5	; 0x05
    176a:	f6 81       	ldd	r31, Z+6	; 0x06
    176c:	e0 2d       	mov	r30, r0
    176e:	c6 81       	ldd	r28, Z+6	; 0x06
    1770:	d7 81       	ldd	r29, Z+7	; 0x07
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	9b 81       	ldd	r25, Y+3	; 0x03
    1776:	20 91 84 07 	lds	r18, 0x0784
    177a:	30 91 85 07 	lds	r19, 0x0785
    177e:	28 17       	cp	r18, r24
    1780:	39 07       	cpc	r19, r25
    1782:	28 f4       	brcc	.+10     	; 0x178e <vTaskIncrementTick+0x11c>
    1784:	90 93 49 01 	sts	0x0149, r25
    1788:	80 93 48 01 	sts	0x0148, r24
    178c:	31 c0       	rjmp	.+98     	; 0x17f0 <vTaskIncrementTick+0x17e>
    178e:	8e 01       	movw	r16, r28
    1790:	0e 5f       	subi	r16, 0xFE	; 254
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	c8 01       	movw	r24, r16
    1796:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    179a:	8c 89       	ldd	r24, Y+20	; 0x14
    179c:	9d 89       	ldd	r25, Y+21	; 0x15
    179e:	89 2b       	or	r24, r25
    17a0:	21 f0       	breq	.+8      	; 0x17aa <vTaskIncrementTick+0x138>
    17a2:	ce 01       	movw	r24, r28
    17a4:	0c 96       	adiw	r24, 0x0c	; 12
    17a6:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    17aa:	2e 89       	ldd	r18, Y+22	; 0x16
    17ac:	80 91 82 07 	lds	r24, 0x0782
    17b0:	82 17       	cp	r24, r18
    17b2:	10 f4       	brcc	.+4      	; 0x17b8 <vTaskIncrementTick+0x146>
    17b4:	20 93 82 07 	sts	0x0782, r18
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	c9 01       	movw	r24, r18
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	b8 01       	movw	r22, r16
    17ce:	80 55       	subi	r24, 0x50	; 80
    17d0:	98 4f       	sbci	r25, 0xF8	; 248
    17d2:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    17d6:	e0 91 9c 07 	lds	r30, 0x079C
    17da:	f0 91 9d 07 	lds	r31, 0x079D
    17de:	80 81       	ld	r24, Z
    17e0:	81 11       	cpse	r24, r1
    17e2:	be cf       	rjmp	.-132    	; 0x1760 <vTaskIncrementTick+0xee>
    17e4:	b6 cf       	rjmp	.-148    	; 0x1752 <vTaskIncrementTick+0xe0>
    17e6:	80 91 7f 07 	lds	r24, 0x077F
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	80 93 7f 07 	sts	0x077F, r24
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <xTaskResumeAll>:
    17fa:	cf 92       	push	r12
    17fc:	df 92       	push	r13
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	0f 92       	push	r0
    1810:	80 91 80 07 	lds	r24, 0x0780
    1814:	81 50       	subi	r24, 0x01	; 1
    1816:	80 93 80 07 	sts	0x0780, r24
    181a:	80 91 80 07 	lds	r24, 0x0780
    181e:	81 11       	cpse	r24, r1
    1820:	62 c0       	rjmp	.+196    	; 0x18e6 <xTaskResumeAll+0xec>
    1822:	80 91 86 07 	lds	r24, 0x0786
    1826:	81 11       	cpse	r24, r1
    1828:	32 c0       	rjmp	.+100    	; 0x188e <xTaskResumeAll+0x94>
    182a:	60 c0       	rjmp	.+192    	; 0x18ec <xTaskResumeAll+0xf2>
    182c:	d7 01       	movw	r26, r14
    182e:	15 96       	adiw	r26, 0x05	; 5
    1830:	ed 91       	ld	r30, X+
    1832:	fc 91       	ld	r31, X
    1834:	16 97       	sbiw	r26, 0x06	; 6
    1836:	c6 81       	ldd	r28, Z+6	; 0x06
    1838:	d7 81       	ldd	r29, Z+7	; 0x07
    183a:	ce 01       	movw	r24, r28
    183c:	0c 96       	adiw	r24, 0x0c	; 12
    183e:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    1842:	8e 01       	movw	r16, r28
    1844:	0e 5f       	subi	r16, 0xFE	; 254
    1846:	1f 4f       	sbci	r17, 0xFF	; 255
    1848:	c8 01       	movw	r24, r16
    184a:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
    184e:	2e 89       	ldd	r18, Y+22	; 0x16
    1850:	80 91 82 07 	lds	r24, 0x0782
    1854:	82 17       	cp	r24, r18
    1856:	10 f4       	brcc	.+4      	; 0x185c <xTaskResumeAll+0x62>
    1858:	20 93 82 07 	sts	0x0782, r18
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	c9 01       	movw	r24, r18
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	88 0f       	add	r24, r24
    186a:	99 1f       	adc	r25, r25
    186c:	82 0f       	add	r24, r18
    186e:	93 1f       	adc	r25, r19
    1870:	b8 01       	movw	r22, r16
    1872:	80 55       	subi	r24, 0x50	; 80
    1874:	98 4f       	sbci	r25, 0xF8	; 248
    1876:	0e 94 9f 00 	call	0x13e	; 0x13e <vListInsertEnd>
    187a:	e0 91 d4 07 	lds	r30, 0x07D4
    187e:	f0 91 d5 07 	lds	r31, 0x07D5
    1882:	9e 89       	ldd	r25, Y+22	; 0x16
    1884:	86 89       	ldd	r24, Z+22	; 0x16
    1886:	98 17       	cp	r25, r24
    1888:	58 f0       	brcs	.+22     	; 0x18a0 <xTaskResumeAll+0xa6>
    188a:	dc 2c       	mov	r13, r12
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <xTaskResumeAll+0xa6>
    188e:	d1 2c       	mov	r13, r1
    1890:	0f 2e       	mov	r0, r31
    1892:	f1 e9       	ldi	r31, 0x91	; 145
    1894:	ef 2e       	mov	r14, r31
    1896:	f7 e0       	ldi	r31, 0x07	; 7
    1898:	ff 2e       	mov	r15, r31
    189a:	f0 2d       	mov	r31, r0
    189c:	cc 24       	eor	r12, r12
    189e:	c3 94       	inc	r12
    18a0:	f7 01       	movw	r30, r14
    18a2:	80 81       	ld	r24, Z
    18a4:	81 11       	cpse	r24, r1
    18a6:	c2 cf       	rjmp	.-124    	; 0x182c <xTaskResumeAll+0x32>
    18a8:	80 91 7f 07 	lds	r24, 0x077F
    18ac:	88 23       	and	r24, r24
    18ae:	79 f0       	breq	.+30     	; 0x18ce <xTaskResumeAll+0xd4>
    18b0:	80 91 7f 07 	lds	r24, 0x077F
    18b4:	88 23       	and	r24, r24
    18b6:	91 f0       	breq	.+36     	; 0x18dc <xTaskResumeAll+0xe2>
    18b8:	dc de       	rcall	.-584    	; 0x1672 <vTaskIncrementTick>
    18ba:	80 91 7f 07 	lds	r24, 0x077F
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	80 93 7f 07 	sts	0x077F, r24
    18c4:	80 91 7f 07 	lds	r24, 0x077F
    18c8:	81 11       	cpse	r24, r1
    18ca:	f6 cf       	rjmp	.-20     	; 0x18b8 <xTaskResumeAll+0xbe>
    18cc:	07 c0       	rjmp	.+14     	; 0x18dc <xTaskResumeAll+0xe2>
    18ce:	f1 e0       	ldi	r31, 0x01	; 1
    18d0:	df 16       	cp	r13, r31
    18d2:	21 f0       	breq	.+8      	; 0x18dc <xTaskResumeAll+0xe2>
    18d4:	80 91 7e 07 	lds	r24, 0x077E
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	39 f4       	brne	.+14     	; 0x18ea <xTaskResumeAll+0xf0>
    18dc:	10 92 7e 07 	sts	0x077E, r1
    18e0:	ae dc       	rcall	.-1700   	; 0x123e <vPortYield>
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	03 c0       	rjmp	.+6      	; 0x18ec <xTaskResumeAll+0xf2>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <xTaskResumeAll+0xf2>
    18ea:	80 e0       	ldi	r24, 0x00	; 0
    18ec:	0f 90       	pop	r0
    18ee:	0f be       	out	0x3f, r0	; 63
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	ff 90       	pop	r15
    18fa:	ef 90       	pop	r14
    18fc:	df 90       	pop	r13
    18fe:	cf 90       	pop	r12
    1900:	08 95       	ret

00001902 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    1908:	89 2b       	or	r24, r25
    190a:	99 f0       	breq	.+38     	; 0x1932 <vTaskDelay+0x30>
		{
			vTaskSuspendAll();
    190c:	ac de       	rcall	.-680    	; 0x1666 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    190e:	80 91 84 07 	lds	r24, 0x0784
    1912:	90 91 85 07 	lds	r25, 0x0785
    1916:	c8 0f       	add	r28, r24
    1918:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    191a:	80 91 d4 07 	lds	r24, 0x07D4
    191e:	90 91 d5 07 	lds	r25, 0x07D5
    1922:	02 96       	adiw	r24, 0x02	; 2
    1924:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    1928:	ce 01       	movw	r24, r28
    192a:	3c dd       	rcall	.-1416   	; 0x13a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    192c:	66 df       	rcall	.-308    	; 0x17fa <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    192e:	81 11       	cpse	r24, r1
    1930:	01 c0       	rjmp	.+2      	; 0x1934 <vTaskDelay+0x32>
		{
			portYIELD_WITHIN_API();
    1932:	85 dc       	rcall	.-1782   	; 0x123e <vPortYield>
		}
	}
    1934:	df 91       	pop	r29
    1936:	cf 91       	pop	r28
    1938:	08 95       	ret

0000193a <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    193a:	0f 2e       	mov	r0, r31
    193c:	f8 e8       	ldi	r31, 0x88	; 136
    193e:	ef 2e       	mov	r14, r31
    1940:	f7 e0       	ldi	r31, 0x07	; 7
    1942:	ff 2e       	mov	r15, r31
    1944:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1946:	c0 eb       	ldi	r28, 0xB0	; 176
    1948:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    194a:	80 91 87 07 	lds	r24, 0x0787
    194e:	88 23       	and	r24, r24
    1950:	41 f1       	breq	.+80     	; 0x19a2 <prvIdleTask+0x68>
		{
			vTaskSuspendAll();
    1952:	89 de       	rcall	.-750    	; 0x1666 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    1954:	d7 01       	movw	r26, r14
    1956:	1c 91       	ld	r17, X
			xTaskResumeAll();
    1958:	50 df       	rcall	.-352    	; 0x17fa <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    195a:	11 23       	and	r17, r17
    195c:	11 f1       	breq	.+68     	; 0x19a2 <prvIdleTask+0x68>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    1964:	d7 01       	movw	r26, r14
    1966:	15 96       	adiw	r26, 0x05	; 5
    1968:	ed 91       	ld	r30, X+
    196a:	fc 91       	ld	r31, X
    196c:	16 97       	sbiw	r26, 0x06	; 6
    196e:	06 81       	ldd	r16, Z+6	; 0x06
    1970:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    1972:	c8 01       	movw	r24, r16
    1974:	02 96       	adiw	r24, 0x02	; 2
    1976:	0e 94 01 01 	call	0x202	; 0x202 <vListRemove>
					--uxCurrentNumberOfTasks;
    197a:	80 91 86 07 	lds	r24, 0x0786
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	80 93 86 07 	sts	0x0786, r24
					--uxTasksDeleted;
    1984:	80 91 87 07 	lds	r24, 0x0787
    1988:	81 50       	subi	r24, 0x01	; 1
    198a:	80 93 87 07 	sts	0x0787, r24
				}
				taskEXIT_CRITICAL();
    198e:	0f 90       	pop	r0
    1990:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1992:	f8 01       	movw	r30, r16
    1994:	87 89       	ldd	r24, Z+23	; 0x17
    1996:	90 8d       	ldd	r25, Z+24	; 0x18
    1998:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>
		vPortFree( pxTCB );
    199c:	c8 01       	movw	r24, r16
    199e:	0e 94 8c 00 	call	0x118	; 0x118 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    19a2:	88 81       	ld	r24, Y
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	88 f2       	brcs	.-94     	; 0x194a <prvIdleTask+0x10>
			{
				taskYIELD();
    19a8:	4a dc       	rcall	.-1900   	; 0x123e <vPortYield>
    19aa:	cf cf       	rjmp	.-98     	; 0x194a <prvIdleTask+0x10>

000019ac <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    19ac:	80 91 80 07 	lds	r24, 0x0780
    19b0:	81 11       	cpse	r24, r1
    19b2:	13 c0       	rjmp	.+38     	; 0x19da <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    19b4:	80 91 82 07 	lds	r24, 0x0782
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	fc 01       	movw	r30, r24
    19bc:	ee 0f       	add	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	ee 0f       	add	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	ee 0f       	add	r30, r30
    19c6:	ff 1f       	adc	r31, r31
    19c8:	8e 0f       	add	r24, r30
    19ca:	9f 1f       	adc	r25, r31
    19cc:	fc 01       	movw	r30, r24
    19ce:	e0 55       	subi	r30, 0x50	; 80
    19d0:	f8 4f       	sbci	r31, 0xF8	; 248
    19d2:	80 81       	ld	r24, Z
    19d4:	88 23       	and	r24, r24
    19d6:	29 f0       	breq	.+10     	; 0x19e2 <vTaskSwitchContext+0x36>
    19d8:	1b c0       	rjmp	.+54     	; 0x1a10 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	80 93 7e 07 	sts	0x077E, r24
    19e0:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    19e2:	80 91 82 07 	lds	r24, 0x0782
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	80 93 82 07 	sts	0x0782, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    19ec:	80 91 82 07 	lds	r24, 0x0782
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	ee 0f       	add	r30, r30
    19f6:	ff 1f       	adc	r31, r31
    19f8:	ee 0f       	add	r30, r30
    19fa:	ff 1f       	adc	r31, r31
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	8e 0f       	add	r24, r30
    1a02:	9f 1f       	adc	r25, r31
    1a04:	fc 01       	movw	r30, r24
    1a06:	e0 55       	subi	r30, 0x50	; 80
    1a08:	f8 4f       	sbci	r31, 0xF8	; 248
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 23       	and	r24, r24
    1a0e:	49 f3       	breq	.-46     	; 0x19e2 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1a10:	80 91 82 07 	lds	r24, 0x0782
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 01       	movw	r18, r24
    1a18:	22 0f       	add	r18, r18
    1a1a:	33 1f       	adc	r19, r19
    1a1c:	22 0f       	add	r18, r18
    1a1e:	33 1f       	adc	r19, r19
    1a20:	22 0f       	add	r18, r18
    1a22:	33 1f       	adc	r19, r19
    1a24:	28 0f       	add	r18, r24
    1a26:	39 1f       	adc	r19, r25
    1a28:	d9 01       	movw	r26, r18
    1a2a:	a0 55       	subi	r26, 0x50	; 80
    1a2c:	b8 4f       	sbci	r27, 0xF8	; 248
    1a2e:	11 96       	adiw	r26, 0x01	; 1
    1a30:	ed 91       	ld	r30, X+
    1a32:	fc 91       	ld	r31, X
    1a34:	12 97       	sbiw	r26, 0x02	; 2
    1a36:	02 80       	ldd	r0, Z+2	; 0x02
    1a38:	f3 81       	ldd	r31, Z+3	; 0x03
    1a3a:	e0 2d       	mov	r30, r0
    1a3c:	12 96       	adiw	r26, 0x02	; 2
    1a3e:	fc 93       	st	X, r31
    1a40:	ee 93       	st	-X, r30
    1a42:	11 97       	sbiw	r26, 0x01	; 1
    1a44:	2d 54       	subi	r18, 0x4D	; 77
    1a46:	38 4f       	sbci	r19, 0xF8	; 248
    1a48:	e2 17       	cp	r30, r18
    1a4a:	f3 07       	cpc	r31, r19
    1a4c:	29 f4       	brne	.+10     	; 0x1a58 <vTaskSwitchContext+0xac>
    1a4e:	22 81       	ldd	r18, Z+2	; 0x02
    1a50:	33 81       	ldd	r19, Z+3	; 0x03
    1a52:	fd 01       	movw	r30, r26
    1a54:	32 83       	std	Z+2, r19	; 0x02
    1a56:	21 83       	std	Z+1, r18	; 0x01
    1a58:	fc 01       	movw	r30, r24
    1a5a:	ee 0f       	add	r30, r30
    1a5c:	ff 1f       	adc	r31, r31
    1a5e:	ee 0f       	add	r30, r30
    1a60:	ff 1f       	adc	r31, r31
    1a62:	ee 0f       	add	r30, r30
    1a64:	ff 1f       	adc	r31, r31
    1a66:	8e 0f       	add	r24, r30
    1a68:	9f 1f       	adc	r25, r31
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e0 55       	subi	r30, 0x50	; 80
    1a6e:	f8 4f       	sbci	r31, 0xF8	; 248
    1a70:	01 80       	ldd	r0, Z+1	; 0x01
    1a72:	f2 81       	ldd	r31, Z+2	; 0x02
    1a74:	e0 2d       	mov	r30, r0
    1a76:	86 81       	ldd	r24, Z+6	; 0x06
    1a78:	97 81       	ldd	r25, Z+7	; 0x07
    1a7a:	90 93 d5 07 	sts	0x07D5, r25
    1a7e:	80 93 d4 07 	sts	0x07D4, r24
    1a82:	08 95       	ret

00001a84 <__subsf3>:
    1a84:	50 58       	subi	r21, 0x80	; 128

00001a86 <__addsf3>:
    1a86:	bb 27       	eor	r27, r27
    1a88:	aa 27       	eor	r26, r26
    1a8a:	0e d0       	rcall	.+28     	; 0x1aa8 <__addsf3x>
    1a8c:	fb c0       	rjmp	.+502    	; 0x1c84 <__fp_round>
    1a8e:	ec d0       	rcall	.+472    	; 0x1c68 <__fp_pscA>
    1a90:	30 f0       	brcs	.+12     	; 0x1a9e <__addsf3+0x18>
    1a92:	f1 d0       	rcall	.+482    	; 0x1c76 <__fp_pscB>
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <__addsf3+0x18>
    1a96:	31 f4       	brne	.+12     	; 0x1aa4 <__addsf3+0x1e>
    1a98:	9f 3f       	cpi	r25, 0xFF	; 255
    1a9a:	11 f4       	brne	.+4      	; 0x1aa0 <__addsf3+0x1a>
    1a9c:	1e f4       	brtc	.+6      	; 0x1aa4 <__addsf3+0x1e>
    1a9e:	e1 c0       	rjmp	.+450    	; 0x1c62 <__fp_nan>
    1aa0:	0e f4       	brtc	.+2      	; 0x1aa4 <__addsf3+0x1e>
    1aa2:	e0 95       	com	r30
    1aa4:	e7 fb       	bst	r30, 7
    1aa6:	c9 c0       	rjmp	.+402    	; 0x1c3a <__fp_inf>

00001aa8 <__addsf3x>:
    1aa8:	e9 2f       	mov	r30, r25
    1aaa:	fd d0       	rcall	.+506    	; 0x1ca6 <__fp_split3>
    1aac:	80 f3       	brcs	.-32     	; 0x1a8e <__addsf3+0x8>
    1aae:	ba 17       	cp	r27, r26
    1ab0:	62 07       	cpc	r22, r18
    1ab2:	73 07       	cpc	r23, r19
    1ab4:	84 07       	cpc	r24, r20
    1ab6:	95 07       	cpc	r25, r21
    1ab8:	18 f0       	brcs	.+6      	; 0x1ac0 <__addsf3x+0x18>
    1aba:	71 f4       	brne	.+28     	; 0x1ad8 <__addsf3x+0x30>
    1abc:	9e f5       	brtc	.+102    	; 0x1b24 <__addsf3x+0x7c>
    1abe:	15 c1       	rjmp	.+554    	; 0x1cea <__fp_zero>
    1ac0:	0e f4       	brtc	.+2      	; 0x1ac4 <__addsf3x+0x1c>
    1ac2:	e0 95       	com	r30
    1ac4:	0b 2e       	mov	r0, r27
    1ac6:	ba 2f       	mov	r27, r26
    1ac8:	a0 2d       	mov	r26, r0
    1aca:	0b 01       	movw	r0, r22
    1acc:	b9 01       	movw	r22, r18
    1ace:	90 01       	movw	r18, r0
    1ad0:	0c 01       	movw	r0, r24
    1ad2:	ca 01       	movw	r24, r20
    1ad4:	a0 01       	movw	r20, r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	ff 27       	eor	r31, r31
    1ada:	59 1b       	sub	r21, r25
    1adc:	99 f0       	breq	.+38     	; 0x1b04 <__addsf3x+0x5c>
    1ade:	59 3f       	cpi	r21, 0xF9	; 249
    1ae0:	50 f4       	brcc	.+20     	; 0x1af6 <__addsf3x+0x4e>
    1ae2:	50 3e       	cpi	r21, 0xE0	; 224
    1ae4:	68 f1       	brcs	.+90     	; 0x1b40 <__addsf3x+0x98>
    1ae6:	1a 16       	cp	r1, r26
    1ae8:	f0 40       	sbci	r31, 0x00	; 0
    1aea:	a2 2f       	mov	r26, r18
    1aec:	23 2f       	mov	r18, r19
    1aee:	34 2f       	mov	r19, r20
    1af0:	44 27       	eor	r20, r20
    1af2:	58 5f       	subi	r21, 0xF8	; 248
    1af4:	f3 cf       	rjmp	.-26     	; 0x1adc <__addsf3x+0x34>
    1af6:	46 95       	lsr	r20
    1af8:	37 95       	ror	r19
    1afa:	27 95       	ror	r18
    1afc:	a7 95       	ror	r26
    1afe:	f0 40       	sbci	r31, 0x00	; 0
    1b00:	53 95       	inc	r21
    1b02:	c9 f7       	brne	.-14     	; 0x1af6 <__addsf3x+0x4e>
    1b04:	7e f4       	brtc	.+30     	; 0x1b24 <__addsf3x+0x7c>
    1b06:	1f 16       	cp	r1, r31
    1b08:	ba 0b       	sbc	r27, r26
    1b0a:	62 0b       	sbc	r22, r18
    1b0c:	73 0b       	sbc	r23, r19
    1b0e:	84 0b       	sbc	r24, r20
    1b10:	ba f0       	brmi	.+46     	; 0x1b40 <__addsf3x+0x98>
    1b12:	91 50       	subi	r25, 0x01	; 1
    1b14:	a1 f0       	breq	.+40     	; 0x1b3e <__addsf3x+0x96>
    1b16:	ff 0f       	add	r31, r31
    1b18:	bb 1f       	adc	r27, r27
    1b1a:	66 1f       	adc	r22, r22
    1b1c:	77 1f       	adc	r23, r23
    1b1e:	88 1f       	adc	r24, r24
    1b20:	c2 f7       	brpl	.-16     	; 0x1b12 <__addsf3x+0x6a>
    1b22:	0e c0       	rjmp	.+28     	; 0x1b40 <__addsf3x+0x98>
    1b24:	ba 0f       	add	r27, r26
    1b26:	62 1f       	adc	r22, r18
    1b28:	73 1f       	adc	r23, r19
    1b2a:	84 1f       	adc	r24, r20
    1b2c:	48 f4       	brcc	.+18     	; 0x1b40 <__addsf3x+0x98>
    1b2e:	87 95       	ror	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	b7 95       	ror	r27
    1b36:	f7 95       	ror	r31
    1b38:	9e 3f       	cpi	r25, 0xFE	; 254
    1b3a:	08 f0       	brcs	.+2      	; 0x1b3e <__addsf3x+0x96>
    1b3c:	b3 cf       	rjmp	.-154    	; 0x1aa4 <__addsf3+0x1e>
    1b3e:	93 95       	inc	r25
    1b40:	88 0f       	add	r24, r24
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <__addsf3x+0x9e>
    1b44:	99 27       	eor	r25, r25
    1b46:	ee 0f       	add	r30, r30
    1b48:	97 95       	ror	r25
    1b4a:	87 95       	ror	r24
    1b4c:	08 95       	ret

00001b4e <__cmpsf2>:
    1b4e:	51 d0       	rcall	.+162    	; 0x1bf2 <__fp_cmp>
    1b50:	08 f4       	brcc	.+2      	; 0x1b54 <__cmpsf2+0x6>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	08 95       	ret
    1b56:	88 d0       	rcall	.+272    	; 0x1c68 <__fp_pscA>
    1b58:	18 f0       	brcs	.+6      	; 0x1b60 <__cmpsf2+0x12>
    1b5a:	11 f0       	breq	.+4      	; 0x1b60 <__cmpsf2+0x12>
    1b5c:	8c d0       	rcall	.+280    	; 0x1c76 <__fp_pscB>
    1b5e:	38 f4       	brcc	.+14     	; 0x1b6e <fmod+0xa>
    1b60:	80 c0       	rjmp	.+256    	; 0x1c62 <__fp_nan>
    1b62:	c4 c0       	rjmp	.+392    	; 0x1cec <__fp_szero>

00001b64 <fmod>:
    1b64:	e9 2f       	mov	r30, r25
    1b66:	9f d0       	rcall	.+318    	; 0x1ca6 <__fp_split3>
    1b68:	b0 f3       	brcs	.-20     	; 0x1b56 <__cmpsf2+0x8>
    1b6a:	55 23       	and	r21, r21
    1b6c:	c9 f3       	breq	.-14     	; 0x1b60 <__cmpsf2+0x12>
    1b6e:	e7 fb       	bst	r30, 7
    1b70:	62 17       	cp	r22, r18
    1b72:	73 07       	cpc	r23, r19
    1b74:	84 07       	cpc	r24, r20
    1b76:	95 07       	cpc	r25, r21
    1b78:	a8 f1       	brcs	.+106    	; 0x1be4 <fmod+0x80>
    1b7a:	99 f3       	breq	.-26     	; 0x1b62 <__cmpsf2+0x14>
    1b7c:	e9 2f       	mov	r30, r25
    1b7e:	ff 27       	eor	r31, r31
    1b80:	88 23       	and	r24, r24
    1b82:	2a f0       	brmi	.+10     	; 0x1b8e <fmod+0x2a>
    1b84:	31 97       	sbiw	r30, 0x01	; 1
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	da f7       	brpl	.-10     	; 0x1b84 <fmod+0x20>
    1b8e:	95 2f       	mov	r25, r21
    1b90:	55 27       	eor	r21, r21
    1b92:	44 23       	and	r20, r20
    1b94:	32 f0       	brmi	.+12     	; 0x1ba2 <fmod+0x3e>
    1b96:	91 50       	subi	r25, 0x01	; 1
    1b98:	50 40       	sbci	r21, 0x00	; 0
    1b9a:	22 0f       	add	r18, r18
    1b9c:	33 1f       	adc	r19, r19
    1b9e:	44 1f       	adc	r20, r20
    1ba0:	d2 f7       	brpl	.-12     	; 0x1b96 <fmod+0x32>
    1ba2:	bb 27       	eor	r27, r27
    1ba4:	e9 1b       	sub	r30, r25
    1ba6:	f5 0b       	sbc	r31, r21
    1ba8:	62 1b       	sub	r22, r18
    1baa:	73 0b       	sbc	r23, r19
    1bac:	84 0b       	sbc	r24, r20
    1bae:	b1 09       	sbc	r27, r1
    1bb0:	c1 f2       	breq	.-80     	; 0x1b62 <__cmpsf2+0x14>
    1bb2:	22 f4       	brpl	.+8      	; 0x1bbc <fmod+0x58>
    1bb4:	62 0f       	add	r22, r18
    1bb6:	73 1f       	adc	r23, r19
    1bb8:	84 1f       	adc	r24, r20
    1bba:	b1 1d       	adc	r27, r1
    1bbc:	31 97       	sbiw	r30, 0x01	; 1
    1bbe:	2a f0       	brmi	.+10     	; 0x1bca <fmod+0x66>
    1bc0:	66 0f       	add	r22, r22
    1bc2:	77 1f       	adc	r23, r23
    1bc4:	88 1f       	adc	r24, r24
    1bc6:	bb 1f       	adc	r27, r27
    1bc8:	ef cf       	rjmp	.-34     	; 0x1ba8 <fmod+0x44>
    1bca:	91 50       	subi	r25, 0x01	; 1
    1bcc:	50 40       	sbci	r21, 0x00	; 0
    1bce:	5a f0       	brmi	.+22     	; 0x1be6 <fmod+0x82>
    1bd0:	41 f0       	breq	.+16     	; 0x1be2 <fmod+0x7e>
    1bd2:	88 23       	and	r24, r24
    1bd4:	32 f0       	brmi	.+12     	; 0x1be2 <fmod+0x7e>
    1bd6:	66 0f       	add	r22, r22
    1bd8:	77 1f       	adc	r23, r23
    1bda:	88 1f       	adc	r24, r24
    1bdc:	91 50       	subi	r25, 0x01	; 1
    1bde:	50 40       	sbci	r21, 0x00	; 0
    1be0:	c1 f7       	brne	.-16     	; 0x1bd2 <fmod+0x6e>
    1be2:	93 95       	inc	r25
    1be4:	30 c0       	rjmp	.+96     	; 0x1c46 <__fp_mpack>
    1be6:	86 95       	lsr	r24
    1be8:	77 95       	ror	r23
    1bea:	67 95       	ror	r22
    1bec:	9f 5f       	subi	r25, 0xFF	; 255
    1bee:	d9 f7       	brne	.-10     	; 0x1be6 <fmod+0x82>
    1bf0:	f8 cf       	rjmp	.-16     	; 0x1be2 <fmod+0x7e>

00001bf2 <__fp_cmp>:
    1bf2:	99 0f       	add	r25, r25
    1bf4:	00 08       	sbc	r0, r0
    1bf6:	55 0f       	add	r21, r21
    1bf8:	aa 0b       	sbc	r26, r26
    1bfa:	e0 e8       	ldi	r30, 0x80	; 128
    1bfc:	fe ef       	ldi	r31, 0xFE	; 254
    1bfe:	16 16       	cp	r1, r22
    1c00:	17 06       	cpc	r1, r23
    1c02:	e8 07       	cpc	r30, r24
    1c04:	f9 07       	cpc	r31, r25
    1c06:	c0 f0       	brcs	.+48     	; 0x1c38 <__fp_cmp+0x46>
    1c08:	12 16       	cp	r1, r18
    1c0a:	13 06       	cpc	r1, r19
    1c0c:	e4 07       	cpc	r30, r20
    1c0e:	f5 07       	cpc	r31, r21
    1c10:	98 f0       	brcs	.+38     	; 0x1c38 <__fp_cmp+0x46>
    1c12:	62 1b       	sub	r22, r18
    1c14:	73 0b       	sbc	r23, r19
    1c16:	84 0b       	sbc	r24, r20
    1c18:	95 0b       	sbc	r25, r21
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <__fp_cmp+0x38>
    1c1c:	0a 26       	eor	r0, r26
    1c1e:	61 f0       	breq	.+24     	; 0x1c38 <__fp_cmp+0x46>
    1c20:	23 2b       	or	r18, r19
    1c22:	24 2b       	or	r18, r20
    1c24:	25 2b       	or	r18, r21
    1c26:	21 f4       	brne	.+8      	; 0x1c30 <__fp_cmp+0x3e>
    1c28:	08 95       	ret
    1c2a:	0a 26       	eor	r0, r26
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <__fp_cmp+0x3e>
    1c2e:	a1 40       	sbci	r26, 0x01	; 1
    1c30:	a6 95       	lsr	r26
    1c32:	8f ef       	ldi	r24, 0xFF	; 255
    1c34:	81 1d       	adc	r24, r1
    1c36:	81 1d       	adc	r24, r1
    1c38:	08 95       	ret

00001c3a <__fp_inf>:
    1c3a:	97 f9       	bld	r25, 7
    1c3c:	9f 67       	ori	r25, 0x7F	; 127
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	08 95       	ret

00001c46 <__fp_mpack>:
    1c46:	9f 3f       	cpi	r25, 0xFF	; 255
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <__fp_mpack_finite+0xc>

00001c4a <__fp_mpack_finite>:
    1c4a:	91 50       	subi	r25, 0x01	; 1
    1c4c:	20 f4       	brcc	.+8      	; 0x1c56 <__fp_mpack_finite+0xc>
    1c4e:	87 95       	ror	r24
    1c50:	77 95       	ror	r23
    1c52:	67 95       	ror	r22
    1c54:	b7 95       	ror	r27
    1c56:	88 0f       	add	r24, r24
    1c58:	91 1d       	adc	r25, r1
    1c5a:	96 95       	lsr	r25
    1c5c:	87 95       	ror	r24
    1c5e:	97 f9       	bld	r25, 7
    1c60:	08 95       	ret

00001c62 <__fp_nan>:
    1c62:	9f ef       	ldi	r25, 0xFF	; 255
    1c64:	80 ec       	ldi	r24, 0xC0	; 192
    1c66:	08 95       	ret

00001c68 <__fp_pscA>:
    1c68:	00 24       	eor	r0, r0
    1c6a:	0a 94       	dec	r0
    1c6c:	16 16       	cp	r1, r22
    1c6e:	17 06       	cpc	r1, r23
    1c70:	18 06       	cpc	r1, r24
    1c72:	09 06       	cpc	r0, r25
    1c74:	08 95       	ret

00001c76 <__fp_pscB>:
    1c76:	00 24       	eor	r0, r0
    1c78:	0a 94       	dec	r0
    1c7a:	12 16       	cp	r1, r18
    1c7c:	13 06       	cpc	r1, r19
    1c7e:	14 06       	cpc	r1, r20
    1c80:	05 06       	cpc	r0, r21
    1c82:	08 95       	ret

00001c84 <__fp_round>:
    1c84:	09 2e       	mov	r0, r25
    1c86:	03 94       	inc	r0
    1c88:	00 0c       	add	r0, r0
    1c8a:	11 f4       	brne	.+4      	; 0x1c90 <__fp_round+0xc>
    1c8c:	88 23       	and	r24, r24
    1c8e:	52 f0       	brmi	.+20     	; 0x1ca4 <__fp_round+0x20>
    1c90:	bb 0f       	add	r27, r27
    1c92:	40 f4       	brcc	.+16     	; 0x1ca4 <__fp_round+0x20>
    1c94:	bf 2b       	or	r27, r31
    1c96:	11 f4       	brne	.+4      	; 0x1c9c <__fp_round+0x18>
    1c98:	60 ff       	sbrs	r22, 0
    1c9a:	04 c0       	rjmp	.+8      	; 0x1ca4 <__fp_round+0x20>
    1c9c:	6f 5f       	subi	r22, 0xFF	; 255
    1c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca4:	08 95       	ret

00001ca6 <__fp_split3>:
    1ca6:	57 fd       	sbrc	r21, 7
    1ca8:	90 58       	subi	r25, 0x80	; 128
    1caa:	44 0f       	add	r20, r20
    1cac:	55 1f       	adc	r21, r21
    1cae:	59 f0       	breq	.+22     	; 0x1cc6 <__fp_splitA+0x10>
    1cb0:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb2:	71 f0       	breq	.+28     	; 0x1cd0 <__fp_splitA+0x1a>
    1cb4:	47 95       	ror	r20

00001cb6 <__fp_splitA>:
    1cb6:	88 0f       	add	r24, r24
    1cb8:	97 fb       	bst	r25, 7
    1cba:	99 1f       	adc	r25, r25
    1cbc:	61 f0       	breq	.+24     	; 0x1cd6 <__fp_splitA+0x20>
    1cbe:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc0:	79 f0       	breq	.+30     	; 0x1ce0 <__fp_splitA+0x2a>
    1cc2:	87 95       	ror	r24
    1cc4:	08 95       	ret
    1cc6:	12 16       	cp	r1, r18
    1cc8:	13 06       	cpc	r1, r19
    1cca:	14 06       	cpc	r1, r20
    1ccc:	55 1f       	adc	r21, r21
    1cce:	f2 cf       	rjmp	.-28     	; 0x1cb4 <__fp_split3+0xe>
    1cd0:	46 95       	lsr	r20
    1cd2:	f1 df       	rcall	.-30     	; 0x1cb6 <__fp_splitA>
    1cd4:	08 c0       	rjmp	.+16     	; 0x1ce6 <__fp_splitA+0x30>
    1cd6:	16 16       	cp	r1, r22
    1cd8:	17 06       	cpc	r1, r23
    1cda:	18 06       	cpc	r1, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	f1 cf       	rjmp	.-30     	; 0x1cc2 <__fp_splitA+0xc>
    1ce0:	86 95       	lsr	r24
    1ce2:	71 05       	cpc	r23, r1
    1ce4:	61 05       	cpc	r22, r1
    1ce6:	08 94       	sec
    1ce8:	08 95       	ret

00001cea <__fp_zero>:
    1cea:	e8 94       	clt

00001cec <__fp_szero>:
    1cec:	bb 27       	eor	r27, r27
    1cee:	66 27       	eor	r22, r22
    1cf0:	77 27       	eor	r23, r23
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	97 f9       	bld	r25, 7
    1cf6:	08 95       	ret

00001cf8 <__udivmodqi4>:
    1cf8:	99 1b       	sub	r25, r25
    1cfa:	79 e0       	ldi	r23, 0x09	; 9
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <__udivmodqi4_ep>

00001cfe <__udivmodqi4_loop>:
    1cfe:	99 1f       	adc	r25, r25
    1d00:	96 17       	cp	r25, r22
    1d02:	08 f0       	brcs	.+2      	; 0x1d06 <__udivmodqi4_ep>
    1d04:	96 1b       	sub	r25, r22

00001d06 <__udivmodqi4_ep>:
    1d06:	88 1f       	adc	r24, r24
    1d08:	7a 95       	dec	r23
    1d0a:	c9 f7       	brne	.-14     	; 0x1cfe <__udivmodqi4_loop>
    1d0c:	80 95       	com	r24
    1d0e:	08 95       	ret

00001d10 <__muldi3>:
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	1f 93       	push	r17
    1d16:	0f 93       	push	r16
    1d18:	9a 9d       	mul	r25, r10
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	21 9f       	mul	r18, r17
    1d1e:	f0 0d       	add	r31, r0
    1d20:	8b 9d       	mul	r24, r11
    1d22:	f0 0d       	add	r31, r0
    1d24:	8a 9d       	mul	r24, r10
    1d26:	e0 2d       	mov	r30, r0
    1d28:	f1 0d       	add	r31, r1
    1d2a:	03 9f       	mul	r16, r19
    1d2c:	f0 0d       	add	r31, r0
    1d2e:	02 9f       	mul	r16, r18
    1d30:	e0 0d       	add	r30, r0
    1d32:	f1 1d       	adc	r31, r1
    1d34:	4e 9d       	mul	r20, r14
    1d36:	e0 0d       	add	r30, r0
    1d38:	f1 1d       	adc	r31, r1
    1d3a:	5e 9d       	mul	r21, r14
    1d3c:	f0 0d       	add	r31, r0
    1d3e:	4f 9d       	mul	r20, r15
    1d40:	f0 0d       	add	r31, r0
    1d42:	7f 93       	push	r23
    1d44:	6f 93       	push	r22
    1d46:	bf 92       	push	r11
    1d48:	af 92       	push	r10
    1d4a:	5f 93       	push	r21
    1d4c:	4f 93       	push	r20
    1d4e:	d5 01       	movw	r26, r10
    1d50:	39 d0       	rcall	.+114    	; 0x1dc4 <__umulhisi3>
    1d52:	8b 01       	movw	r16, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	d7 01       	movw	r26, r14
    1d58:	35 d0       	rcall	.+106    	; 0x1dc4 <__umulhisi3>
    1d5a:	eb 01       	movw	r28, r22
    1d5c:	e8 0f       	add	r30, r24
    1d5e:	f9 1f       	adc	r31, r25
    1d60:	d6 01       	movw	r26, r12
    1d62:	1f d0       	rcall	.+62     	; 0x1da2 <__muldi3_6>
    1d64:	2f 91       	pop	r18
    1d66:	3f 91       	pop	r19
    1d68:	d6 01       	movw	r26, r12
    1d6a:	2c d0       	rcall	.+88     	; 0x1dc4 <__umulhisi3>
    1d6c:	c6 0f       	add	r28, r22
    1d6e:	d7 1f       	adc	r29, r23
    1d70:	e8 1f       	adc	r30, r24
    1d72:	f9 1f       	adc	r31, r25
    1d74:	af 91       	pop	r26
    1d76:	bf 91       	pop	r27
    1d78:	14 d0       	rcall	.+40     	; 0x1da2 <__muldi3_6>
    1d7a:	2f 91       	pop	r18
    1d7c:	3f 91       	pop	r19
    1d7e:	22 d0       	rcall	.+68     	; 0x1dc4 <__umulhisi3>
    1d80:	c6 0f       	add	r28, r22
    1d82:	d7 1f       	adc	r29, r23
    1d84:	e8 1f       	adc	r30, r24
    1d86:	f9 1f       	adc	r31, r25
    1d88:	d6 01       	movw	r26, r12
    1d8a:	1c d0       	rcall	.+56     	; 0x1dc4 <__umulhisi3>
    1d8c:	e6 0f       	add	r30, r22
    1d8e:	f7 1f       	adc	r31, r23
    1d90:	98 01       	movw	r18, r16
    1d92:	be 01       	movw	r22, r28
    1d94:	cf 01       	movw	r24, r30
    1d96:	11 24       	eor	r1, r1
    1d98:	0f 91       	pop	r16
    1d9a:	1f 91       	pop	r17
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <__muldi3_6>:
    1da2:	10 d0       	rcall	.+32     	; 0x1dc4 <__umulhisi3>
    1da4:	46 0f       	add	r20, r22
    1da6:	57 1f       	adc	r21, r23
    1da8:	c8 1f       	adc	r28, r24
    1daa:	d9 1f       	adc	r29, r25
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <__muldi3_6+0xe>
    1dae:	31 96       	adiw	r30, 0x01	; 1
    1db0:	08 95       	ret

00001db2 <__adddi3>:
    1db2:	2a 0d       	add	r18, r10
    1db4:	3b 1d       	adc	r19, r11
    1db6:	4c 1d       	adc	r20, r12
    1db8:	5d 1d       	adc	r21, r13
    1dba:	6e 1d       	adc	r22, r14
    1dbc:	7f 1d       	adc	r23, r15
    1dbe:	80 1f       	adc	r24, r16
    1dc0:	91 1f       	adc	r25, r17
    1dc2:	08 95       	ret

00001dc4 <__umulhisi3>:
    1dc4:	a2 9f       	mul	r26, r18
    1dc6:	b0 01       	movw	r22, r0
    1dc8:	b3 9f       	mul	r27, r19
    1dca:	c0 01       	movw	r24, r0
    1dcc:	a3 9f       	mul	r26, r19
    1dce:	70 0d       	add	r23, r0
    1dd0:	81 1d       	adc	r24, r1
    1dd2:	11 24       	eor	r1, r1
    1dd4:	91 1d       	adc	r25, r1
    1dd6:	b2 9f       	mul	r27, r18
    1dd8:	70 0d       	add	r23, r0
    1dda:	81 1d       	adc	r24, r1
    1ddc:	11 24       	eor	r1, r1
    1dde:	91 1d       	adc	r25, r1
    1de0:	08 95       	ret

00001de2 <malloc>:
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	82 30       	cpi	r24, 0x02	; 2
    1de8:	91 05       	cpc	r25, r1
    1dea:	10 f4       	brcc	.+4      	; 0x1df0 <malloc+0xe>
    1dec:	82 e0       	ldi	r24, 0x02	; 2
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	e0 91 e8 07 	lds	r30, 0x07E8
    1df4:	f0 91 e9 07 	lds	r31, 0x07E9
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	c0 e0       	ldi	r28, 0x00	; 0
    1dfe:	d0 e0       	ldi	r29, 0x00	; 0
    1e00:	30 97       	sbiw	r30, 0x00	; 0
    1e02:	11 f1       	breq	.+68     	; 0x1e48 <malloc+0x66>
    1e04:	40 81       	ld	r20, Z
    1e06:	51 81       	ldd	r21, Z+1	; 0x01
    1e08:	48 17       	cp	r20, r24
    1e0a:	59 07       	cpc	r21, r25
    1e0c:	c0 f0       	brcs	.+48     	; 0x1e3e <malloc+0x5c>
    1e0e:	48 17       	cp	r20, r24
    1e10:	59 07       	cpc	r21, r25
    1e12:	61 f4       	brne	.+24     	; 0x1e2c <malloc+0x4a>
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	20 97       	sbiw	r28, 0x00	; 0
    1e1a:	19 f0       	breq	.+6      	; 0x1e22 <malloc+0x40>
    1e1c:	9b 83       	std	Y+3, r25	; 0x03
    1e1e:	8a 83       	std	Y+2, r24	; 0x02
    1e20:	2b c0       	rjmp	.+86     	; 0x1e78 <malloc+0x96>
    1e22:	90 93 e9 07 	sts	0x07E9, r25
    1e26:	80 93 e8 07 	sts	0x07E8, r24
    1e2a:	26 c0       	rjmp	.+76     	; 0x1e78 <malloc+0x96>
    1e2c:	21 15       	cp	r18, r1
    1e2e:	31 05       	cpc	r19, r1
    1e30:	19 f0       	breq	.+6      	; 0x1e38 <malloc+0x56>
    1e32:	42 17       	cp	r20, r18
    1e34:	53 07       	cpc	r21, r19
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <malloc+0x5c>
    1e38:	9a 01       	movw	r18, r20
    1e3a:	be 01       	movw	r22, r28
    1e3c:	df 01       	movw	r26, r30
    1e3e:	ef 01       	movw	r28, r30
    1e40:	02 80       	ldd	r0, Z+2	; 0x02
    1e42:	f3 81       	ldd	r31, Z+3	; 0x03
    1e44:	e0 2d       	mov	r30, r0
    1e46:	dc cf       	rjmp	.-72     	; 0x1e00 <malloc+0x1e>
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f1       	breq	.+66     	; 0x1e90 <malloc+0xae>
    1e4e:	28 1b       	sub	r18, r24
    1e50:	39 0b       	sbc	r19, r25
    1e52:	24 30       	cpi	r18, 0x04	; 4
    1e54:	31 05       	cpc	r19, r1
    1e56:	90 f4       	brcc	.+36     	; 0x1e7c <malloc+0x9a>
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	13 97       	sbiw	r26, 0x03	; 3
    1e60:	61 15       	cp	r22, r1
    1e62:	71 05       	cpc	r23, r1
    1e64:	21 f0       	breq	.+8      	; 0x1e6e <malloc+0x8c>
    1e66:	fb 01       	movw	r30, r22
    1e68:	93 83       	std	Z+3, r25	; 0x03
    1e6a:	82 83       	std	Z+2, r24	; 0x02
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <malloc+0x94>
    1e6e:	90 93 e9 07 	sts	0x07E9, r25
    1e72:	80 93 e8 07 	sts	0x07E8, r24
    1e76:	fd 01       	movw	r30, r26
    1e78:	32 96       	adiw	r30, 0x02	; 2
    1e7a:	44 c0       	rjmp	.+136    	; 0x1f04 <malloc+0x122>
    1e7c:	fd 01       	movw	r30, r26
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	81 93       	st	Z+, r24
    1e84:	91 93       	st	Z+, r25
    1e86:	22 50       	subi	r18, 0x02	; 2
    1e88:	31 09       	sbc	r19, r1
    1e8a:	2d 93       	st	X+, r18
    1e8c:	3c 93       	st	X, r19
    1e8e:	3a c0       	rjmp	.+116    	; 0x1f04 <malloc+0x122>
    1e90:	20 91 e6 07 	lds	r18, 0x07E6
    1e94:	30 91 e7 07 	lds	r19, 0x07E7
    1e98:	23 2b       	or	r18, r19
    1e9a:	41 f4       	brne	.+16     	; 0x1eac <malloc+0xca>
    1e9c:	20 91 02 01 	lds	r18, 0x0102
    1ea0:	30 91 03 01 	lds	r19, 0x0103
    1ea4:	30 93 e7 07 	sts	0x07E7, r19
    1ea8:	20 93 e6 07 	sts	0x07E6, r18
    1eac:	20 91 00 01 	lds	r18, 0x0100
    1eb0:	30 91 01 01 	lds	r19, 0x0101
    1eb4:	21 15       	cp	r18, r1
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	41 f4       	brne	.+16     	; 0x1eca <malloc+0xe8>
    1eba:	2d b7       	in	r18, 0x3d	; 61
    1ebc:	3e b7       	in	r19, 0x3e	; 62
    1ebe:	40 91 04 01 	lds	r20, 0x0104
    1ec2:	50 91 05 01 	lds	r21, 0x0105
    1ec6:	24 1b       	sub	r18, r20
    1ec8:	35 0b       	sbc	r19, r21
    1eca:	e0 91 e6 07 	lds	r30, 0x07E6
    1ece:	f0 91 e7 07 	lds	r31, 0x07E7
    1ed2:	e2 17       	cp	r30, r18
    1ed4:	f3 07       	cpc	r31, r19
    1ed6:	a0 f4       	brcc	.+40     	; 0x1f00 <malloc+0x11e>
    1ed8:	2e 1b       	sub	r18, r30
    1eda:	3f 0b       	sbc	r19, r31
    1edc:	28 17       	cp	r18, r24
    1ede:	39 07       	cpc	r19, r25
    1ee0:	78 f0       	brcs	.+30     	; 0x1f00 <malloc+0x11e>
    1ee2:	ac 01       	movw	r20, r24
    1ee4:	4e 5f       	subi	r20, 0xFE	; 254
    1ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee8:	24 17       	cp	r18, r20
    1eea:	35 07       	cpc	r19, r21
    1eec:	48 f0       	brcs	.+18     	; 0x1f00 <malloc+0x11e>
    1eee:	4e 0f       	add	r20, r30
    1ef0:	5f 1f       	adc	r21, r31
    1ef2:	50 93 e7 07 	sts	0x07E7, r21
    1ef6:	40 93 e6 07 	sts	0x07E6, r20
    1efa:	81 93       	st	Z+, r24
    1efc:	91 93       	st	Z+, r25
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <malloc+0x122>
    1f00:	e0 e0       	ldi	r30, 0x00	; 0
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	cf 01       	movw	r24, r30
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	08 95       	ret

00001f0c <free>:
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	09 f4       	brne	.+2      	; 0x1f1a <free+0xe>
    1f18:	8c c0       	rjmp	.+280    	; 0x2032 <free+0x126>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	32 97       	sbiw	r30, 0x02	; 2
    1f1e:	13 82       	std	Z+3, r1	; 0x03
    1f20:	12 82       	std	Z+2, r1	; 0x02
    1f22:	00 91 e8 07 	lds	r16, 0x07E8
    1f26:	10 91 e9 07 	lds	r17, 0x07E9
    1f2a:	01 15       	cp	r16, r1
    1f2c:	11 05       	cpc	r17, r1
    1f2e:	81 f4       	brne	.+32     	; 0x1f50 <free+0x44>
    1f30:	20 81       	ld	r18, Z
    1f32:	31 81       	ldd	r19, Z+1	; 0x01
    1f34:	82 0f       	add	r24, r18
    1f36:	93 1f       	adc	r25, r19
    1f38:	20 91 e6 07 	lds	r18, 0x07E6
    1f3c:	30 91 e7 07 	lds	r19, 0x07E7
    1f40:	28 17       	cp	r18, r24
    1f42:	39 07       	cpc	r19, r25
    1f44:	79 f5       	brne	.+94     	; 0x1fa4 <free+0x98>
    1f46:	f0 93 e7 07 	sts	0x07E7, r31
    1f4a:	e0 93 e6 07 	sts	0x07E6, r30
    1f4e:	71 c0       	rjmp	.+226    	; 0x2032 <free+0x126>
    1f50:	d8 01       	movw	r26, r16
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	50 e0       	ldi	r21, 0x00	; 0
    1f56:	ae 17       	cp	r26, r30
    1f58:	bf 07       	cpc	r27, r31
    1f5a:	50 f4       	brcc	.+20     	; 0x1f70 <free+0x64>
    1f5c:	12 96       	adiw	r26, 0x02	; 2
    1f5e:	2d 91       	ld	r18, X+
    1f60:	3c 91       	ld	r19, X
    1f62:	13 97       	sbiw	r26, 0x03	; 3
    1f64:	ad 01       	movw	r20, r26
    1f66:	21 15       	cp	r18, r1
    1f68:	31 05       	cpc	r19, r1
    1f6a:	09 f1       	breq	.+66     	; 0x1fae <free+0xa2>
    1f6c:	d9 01       	movw	r26, r18
    1f6e:	f3 cf       	rjmp	.-26     	; 0x1f56 <free+0x4a>
    1f70:	9d 01       	movw	r18, r26
    1f72:	da 01       	movw	r26, r20
    1f74:	33 83       	std	Z+3, r19	; 0x03
    1f76:	22 83       	std	Z+2, r18	; 0x02
    1f78:	60 81       	ld	r22, Z
    1f7a:	71 81       	ldd	r23, Z+1	; 0x01
    1f7c:	86 0f       	add	r24, r22
    1f7e:	97 1f       	adc	r25, r23
    1f80:	82 17       	cp	r24, r18
    1f82:	93 07       	cpc	r25, r19
    1f84:	69 f4       	brne	.+26     	; 0x1fa0 <free+0x94>
    1f86:	ec 01       	movw	r28, r24
    1f88:	28 81       	ld	r18, Y
    1f8a:	39 81       	ldd	r19, Y+1	; 0x01
    1f8c:	26 0f       	add	r18, r22
    1f8e:	37 1f       	adc	r19, r23
    1f90:	2e 5f       	subi	r18, 0xFE	; 254
    1f92:	3f 4f       	sbci	r19, 0xFF	; 255
    1f94:	31 83       	std	Z+1, r19	; 0x01
    1f96:	20 83       	st	Z, r18
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9c:	93 83       	std	Z+3, r25	; 0x03
    1f9e:	82 83       	std	Z+2, r24	; 0x02
    1fa0:	45 2b       	or	r20, r21
    1fa2:	29 f4       	brne	.+10     	; 0x1fae <free+0xa2>
    1fa4:	f0 93 e9 07 	sts	0x07E9, r31
    1fa8:	e0 93 e8 07 	sts	0x07E8, r30
    1fac:	42 c0       	rjmp	.+132    	; 0x2032 <free+0x126>
    1fae:	13 96       	adiw	r26, 0x03	; 3
    1fb0:	fc 93       	st	X, r31
    1fb2:	ee 93       	st	-X, r30
    1fb4:	12 97       	sbiw	r26, 0x02	; 2
    1fb6:	ed 01       	movw	r28, r26
    1fb8:	49 91       	ld	r20, Y+
    1fba:	59 91       	ld	r21, Y+
    1fbc:	9e 01       	movw	r18, r28
    1fbe:	24 0f       	add	r18, r20
    1fc0:	35 1f       	adc	r19, r21
    1fc2:	e2 17       	cp	r30, r18
    1fc4:	f3 07       	cpc	r31, r19
    1fc6:	71 f4       	brne	.+28     	; 0x1fe4 <free+0xd8>
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	84 0f       	add	r24, r20
    1fce:	95 1f       	adc	r25, r21
    1fd0:	02 96       	adiw	r24, 0x02	; 2
    1fd2:	11 96       	adiw	r26, 0x01	; 1
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	13 96       	adiw	r26, 0x03	; 3
    1fde:	9c 93       	st	X, r25
    1fe0:	8e 93       	st	-X, r24
    1fe2:	12 97       	sbiw	r26, 0x02	; 2
    1fe4:	e0 e0       	ldi	r30, 0x00	; 0
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	d8 01       	movw	r26, r16
    1fea:	12 96       	adiw	r26, 0x02	; 2
    1fec:	8d 91       	ld	r24, X+
    1fee:	9c 91       	ld	r25, X
    1ff0:	13 97       	sbiw	r26, 0x03	; 3
    1ff2:	00 97       	sbiw	r24, 0x00	; 0
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <free+0xf0>
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	8c 01       	movw	r16, r24
    1ffa:	f6 cf       	rjmp	.-20     	; 0x1fe8 <free+0xdc>
    1ffc:	8d 91       	ld	r24, X+
    1ffe:	9c 91       	ld	r25, X
    2000:	98 01       	movw	r18, r16
    2002:	2e 5f       	subi	r18, 0xFE	; 254
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	82 0f       	add	r24, r18
    2008:	93 1f       	adc	r25, r19
    200a:	20 91 e6 07 	lds	r18, 0x07E6
    200e:	30 91 e7 07 	lds	r19, 0x07E7
    2012:	28 17       	cp	r18, r24
    2014:	39 07       	cpc	r19, r25
    2016:	69 f4       	brne	.+26     	; 0x2032 <free+0x126>
    2018:	30 97       	sbiw	r30, 0x00	; 0
    201a:	29 f4       	brne	.+10     	; 0x2026 <free+0x11a>
    201c:	10 92 e9 07 	sts	0x07E9, r1
    2020:	10 92 e8 07 	sts	0x07E8, r1
    2024:	02 c0       	rjmp	.+4      	; 0x202a <free+0x11e>
    2026:	13 82       	std	Z+3, r1	; 0x03
    2028:	12 82       	std	Z+2, r1	; 0x02
    202a:	10 93 e7 07 	sts	0x07E7, r17
    202e:	00 93 e6 07 	sts	0x07E6, r16
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <memset>:
    203c:	dc 01       	movw	r26, r24
    203e:	01 c0       	rjmp	.+2      	; 0x2042 <memset+0x6>
    2040:	6d 93       	st	X+, r22
    2042:	41 50       	subi	r20, 0x01	; 1
    2044:	50 40       	sbci	r21, 0x00	; 0
    2046:	e0 f7       	brcc	.-8      	; 0x2040 <memset+0x4>
    2048:	08 95       	ret

0000204a <strncpy>:
    204a:	fb 01       	movw	r30, r22
    204c:	dc 01       	movw	r26, r24
    204e:	41 50       	subi	r20, 0x01	; 1
    2050:	50 40       	sbci	r21, 0x00	; 0
    2052:	48 f0       	brcs	.+18     	; 0x2066 <strncpy+0x1c>
    2054:	01 90       	ld	r0, Z+
    2056:	0d 92       	st	X+, r0
    2058:	00 20       	and	r0, r0
    205a:	c9 f7       	brne	.-14     	; 0x204e <strncpy+0x4>
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <strncpy+0x16>
    205e:	1d 92       	st	X+, r1
    2060:	41 50       	subi	r20, 0x01	; 1
    2062:	50 40       	sbci	r21, 0x00	; 0
    2064:	e0 f7       	brcc	.-8      	; 0x205e <strncpy+0x14>
    2066:	08 95       	ret

00002068 <_exit>:
    2068:	f8 94       	cli

0000206a <__stop_program>:
    206a:	ff cf       	rjmp	.-2      	; 0x206a <__stop_program>
